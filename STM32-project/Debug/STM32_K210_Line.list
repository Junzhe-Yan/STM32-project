
STM32_K210_Line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c018  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800c200  0800c200  0001c200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c830  0800c830  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c830  0800c830  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c830  0800c830  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c830  0800c830  0001c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001f0  0800ca28  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800ca28  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010aac  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003837  00000000  00000000  00030d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbf  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1fc  00000000  00000000  000364ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bedd  00000000  00000000  000556fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1d7e  00000000  00000000  000715d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dd4  00000000  00000000  00113358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0011912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c1e8 	.word	0x0800c1e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0800c1e8 	.word	0x0800c1e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_d2lz>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
 8001238:	460c      	mov	r4, r1
 800123a:	2200      	movs	r2, #0
 800123c:	2300      	movs	r3, #0
 800123e:	4628      	mov	r0, r5
 8001240:	4621      	mov	r1, r4
 8001242:	f7ff fc27 	bl	8000a94 <__aeabi_dcmplt>
 8001246:	b928      	cbnz	r0, 8001254 <__aeabi_d2lz+0x20>
 8001248:	4628      	mov	r0, r5
 800124a:	4621      	mov	r1, r4
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001250:	f000 b80a 	b.w	8001268 <__aeabi_d2ulz>
 8001254:	4628      	mov	r0, r5
 8001256:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800125a:	f000 f805 	bl	8001268 <__aeabi_d2ulz>
 800125e:	4240      	negs	r0, r0
 8001260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	bf00      	nop

08001268 <__aeabi_d2ulz>:
 8001268:	b5d0      	push	{r4, r6, r7, lr}
 800126a:	2200      	movs	r2, #0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <__aeabi_d2ulz+0x34>)
 800126e:	4606      	mov	r6, r0
 8001270:	460f      	mov	r7, r1
 8001272:	f7ff f99d 	bl	80005b0 <__aeabi_dmul>
 8001276:	f7ff fc73 	bl	8000b60 <__aeabi_d2uiz>
 800127a:	4604      	mov	r4, r0
 800127c:	f7ff f91e 	bl	80004bc <__aeabi_ui2d>
 8001280:	2200      	movs	r2, #0
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <__aeabi_d2ulz+0x38>)
 8001284:	f7ff f994 	bl	80005b0 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4630      	mov	r0, r6
 800128e:	4639      	mov	r1, r7
 8001290:	f7fe ffd6 	bl	8000240 <__aeabi_dsub>
 8001294:	f7ff fc64 	bl	8000b60 <__aeabi_d2uiz>
 8001298:	4621      	mov	r1, r4
 800129a:	bdd0      	pop	{r4, r6, r7, pc}
 800129c:	3df00000 	.word	0x3df00000
 80012a0:	41f00000 	.word	0x41f00000

080012a4 <Key1_is_Press>:
uint16_t g_key3_long_press = 0;

// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the button has been pressed, press to return to KEY_ PRESS, release and return to KEY_ RELEASE
static uint8_t Key1_is_Press(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 80012a8:	2108      	movs	r1, #8
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <Key1_is_Press+0x1c>)
 80012ac:	f002 fe3c 	bl	8003f28 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // If the key is pressed, return to KEY_ PRESS 如果按键被按下，则返回KEY_PRESS
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <Key1_is_Press+0x18>
	}
	return KEY_RELEASE; // If the button is released, return to KEY_ RELEASE 如果按键是松开状态，则返回KEY_RELEASE
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000

080012c4 <Key1_State>:
// 读取按键K1的状态，按下返回1，松开返回0.
// mode:设置模式，0：按下一直返回1；1：按下只返回一次1
// Read the status of button K1, press to return 1, release to return 0
// Mode: Set mode, 0: Press and hold to return to 1; 1: Press to return only once 1
uint8_t Key1_State(uint8_t mode)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 80012ce:	f7ff ffe9 	bl	80012a4 <Key1_is_Press>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10e      	bne.n	80012f6 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <Key1_State+0x5c>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	3301      	adds	r3, #1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	429a      	cmp	r2, r3
 80012e6:	da0c      	bge.n	8001302 <Key1_State+0x3e>
		{
			key1_state++;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Key1_State+0x5c>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <Key1_State+0x5c>)
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	e005      	b.n	8001302 <Key1_State+0x3e>
		}
	}
	else
	{
		key1_state = 0;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <Key1_State+0x5c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	801a      	strh	r2, [r3, #0]
		g_key1_long_press = 0;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <Key1_State+0x60>)
 80012fe:	2200      	movs	r2, #0
 8001300:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <Key1_State+0x5c>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d104      	bne.n	8001314 <Key1_State+0x50>
	{
		g_key1_long_press = 1;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <Key1_State+0x60>)
 800130c:	2201      	movs	r2, #1
 800130e:	801a      	strh	r2, [r3, #0]
		return KEY_PRESS;
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <Key1_State+0x52>
	}
	return KEY_RELEASE;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000020e 	.word	0x2000020e
 8001324:	2000020c 	.word	0x2000020c

08001328 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&USART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF); // 阻塞方式打印,串口x
 8001330:	1d39      	adds	r1, r7, #4
 8001332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001336:	2201      	movs	r2, #1
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <__io_putchar+0x20>)
 800133a:	f005 fd81 	bl	8006e40 <HAL_UART_Transmit>
  return ch;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000590 	.word	0x20000590

0800134c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	e853 3f00 	ldrex	r3, [r3]
 8001360:	60bb      	str	r3, [r7, #8]
   return(result);
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	330c      	adds	r3, #12
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	61ba      	str	r2, [r7, #24]
 8001372:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001374:	6979      	ldr	r1, [r7, #20]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	e841 2300 	strex	r3, r2, [r1]
 800137c:	613b      	str	r3, [r7, #16]
   return(result);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e7      	bne.n	8001354 <LL_USART_EnableIT_RXNE+0x8>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	b2db      	uxtb	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <USART2_UART_Init>:
// 函数功能:打开串口2接收中断功能
// 传入函数:无
// Function function: Enable serial port 2 to receive interrupt function
// Incoming function: None
void USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

	LL_USART_EnableIT_RXNE(USART2); // Start receiving interrupt 启动接收中断
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USART2_UART_Init+0x10>)
 80013d2:	f7ff ffbb 	bl	800134c <LL_USART_EnableIT_RXNE>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004400 	.word	0x40004400

080013e0 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	uint8_t rx2_temp;
	if (LL_USART_IsEnabledIT_RXNE(USART2)) // Determine if there is any interruption information 判断是否有中断信息
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <USART2_IRQHandler+0x2c>)
 80013e8:	f7ff ffd2 	bl	8001390 <LL_USART_IsEnabledIT_RXNE>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <USART2_IRQHandler+0x24>
	{
		// LL_USART_ClearFlag_RXNE(USART2); //clear interrupt 清除中断
		rx2_temp = LL_USART_ReceiveData8(USART2); // Read information and clear interrupts 读取信息并清除中断
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <USART2_IRQHandler+0x2c>)
 80013f4:	f7ff ffde 	bl	80013b4 <LL_USART_ReceiveData8>
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
		Deal_K210(rx2_temp);					  // Processing data sent by K210 处理k210送来的数据
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f96a 	bl	80016d8 <Deal_K210>
		//		USART2_DataByte(rx2_temp);//send data 发送数据
	}
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40004400 	.word	0x40004400

08001410 <BSP_Init>:
#include "bsp.h"

//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

	Bsp_Tim_Init();//电机相关部分初始化 Initialization of motor related parts
 8001414:	f001 f81a 	bl	800244c <Bsp_Tim_Init>
	PID_Param_Init();//电机PID初始化 Motor PID initialization
 8001418:	f000 fd24 	bl	8001e64 <PID_Param_Init>



	USART2_UART_Init();
 800141c:	f7ff ffd6 	bl	80013cc <USART2_UART_Init>


}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <BSP_Loop>:

uint8_t g_key_flag =0; //1：小车开始巡线运动 0：小车停止巡线运动 1: the car starts patrolling. 0: the car stops patrolling.
//Loop Run Function
//Parameter:None
void BSP_Loop(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	if(Key1_State(1))
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff4b 	bl	80012c4 <Key1_State>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <BSP_Loop+0x24>
	{
		g_key_flag = !g_key_flag;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <BSP_Loop+0x48>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <BSP_Loop+0x48>)
 8001446:	701a      	strb	r2, [r3, #0]
	}

	if(g_key_flag == 0)
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <BSP_Loop+0x48>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d108      	bne.n	8001462 <BSP_Loop+0x3e>
	{
		Motion_Set_Speed(0,0,0,0);
 8001450:	2300      	movs	r3, #0
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f000 fa5e 	bl	8001918 <Motion_Set_Speed>
		APP_K210X_Init();//电机PID重置 Motor PID reset
 800145c:	f000 f8ba 	bl	80015d4 <APP_K210X_Init>
	else
	{
		APP_K210X_Line_PID();
	}

}
 8001460:	e001      	b.n	8001466 <BSP_Loop+0x42>
		APP_K210X_Line_PID();
 8001462:	f000 f8fd 	bl	8001660 <APP_K210X_Line_PID>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000210 	.word	0x20000210

08001470 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d841      	bhi.n	8001508 <Encoder_Read_CNT+0x98>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <Encoder_Read_CNT+0x1c>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014b7 	.word	0x080014b7
 8001494:	080014d5 	.word	0x080014d5
 8001498:	080014ef 	.word	0x080014ef
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <Encoder_Read_CNT+0xa8>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80014a6:	337f      	adds	r3, #127	; 0x7f
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <Encoder_Read_CNT+0xa8>)
 80014ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80014b4:	e029      	b.n	800150a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 80014b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80014c2:	337f      	adds	r3, #127	; 0x7f
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80014d2:	e01a      	b.n	800150a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <Encoder_Read_CNT+0xac>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80014de:	337f      	adds	r3, #127	; 0x7f
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <Encoder_Read_CNT+0xac>)
 80014e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80014ec:	e00d      	b.n	800150a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <Encoder_Read_CNT+0xb0>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80014f8:	337f      	adds	r3, #127	; 0x7f
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <Encoder_Read_CNT+0xb0>)
 8001500:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001506:	e000      	b.n	800150a <Encoder_Read_CNT+0x9a>
	default:
		break;
 8001508:	bf00      	nop
	}
	return Encoder_TIM;
 800150a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40000800 	.word	0x40000800
 800151c:	40000c00 	.word	0x40000c00
 8001520:	40000400 	.word	0x40000400

08001524 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <Encoder_Get_ALL+0x38>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3304      	adds	r3, #4
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <Encoder_Get_ALL+0x3c>)
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3308      	adds	r3, #8
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <Encoder_Get_ALL+0x40>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	330c      	adds	r3, #12
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <Encoder_Get_ALL+0x44>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	601a      	str	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000214 	.word	0x20000214
 8001560:	20000218 	.word	0x20000218
 8001564:	2000021c 	.word	0x2000021c
 8001568:	20000220 	.word	0x20000220

0800156c <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ff7d 	bl	8001470 <Encoder_Read_CNT>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <Encoder_Update_Count+0x58>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <Encoder_Update_Count+0x58>)
 8001582:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ff73 	bl	8001470 <Encoder_Read_CNT>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <Encoder_Update_Count+0x5c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <Encoder_Update_Count+0x5c>)
 8001596:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001598:	2002      	movs	r0, #2
 800159a:	f7ff ff69 	bl	8001470 <Encoder_Read_CNT>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <Encoder_Update_Count+0x60>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <Encoder_Update_Count+0x60>)
 80015aa:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff ff5f 	bl	8001470 <Encoder_Read_CNT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <Encoder_Update_Count+0x64>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <Encoder_Update_Count+0x64>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000214 	.word	0x20000214
 80015c8:	20000218 	.word	0x20000218
 80015cc:	2000021c 	.word	0x2000021c
 80015d0:	20000220 	.word	0x20000220

080015d4 <APP_K210X_Init>:

#define K210X_SPEED 		200

// 初始化K210X轴 PID参数 Initialize the K210X axis PID parameter
void APP_K210X_Init(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	pid_k210_x.target_val = 0.0;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <APP_K210X_Init+0x5c>)
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	pid_k210_x.pwm_output = 0.0;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <APP_K210X_Init+0x5c>)
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
	pid_k210_x.err = 0.0;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <APP_K210X_Init+0x5c>)
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
	pid_k210_x.err_last = 0.0;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <APP_K210X_Init+0x5c>)
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
	pid_k210_x.err_next = 0.0;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <APP_K210X_Init+0x5c>)
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
	pid_k210_x.integral = 0.0;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <APP_K210X_Init+0x5c>)
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

	pid_k210_x.Kp = K210X_PID_KP;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <APP_K210X_Init+0x5c>)
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <APP_K210X_Init+0x60>)
 800160c:	60da      	str	r2, [r3, #12]
	pid_k210_x.Ki = K210X_PID_KI;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <APP_K210X_Init+0x5c>)
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <APP_K210X_Init+0x64>)
 8001612:	611a      	str	r2, [r3, #16]
	pid_k210_x.Kd = K210X_PID_KD;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <APP_K210X_Init+0x5c>)
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <APP_K210X_Init+0x60>)
 8001618:	615a      	str	r2, [r3, #20]

	//初始化 Initialization
	K210_data.k210_X = 160;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <APP_K210X_Init+0x68>)
 800161c:	22a0      	movs	r2, #160	; 0xa0
 800161e:	801a      	strh	r2, [r3, #0]
	K210_data.k210_Y = 120;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <APP_K210X_Init+0x68>)
 8001622:	2278      	movs	r2, #120	; 0x78
 8001624:	805a      	strh	r2, [r3, #2]
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000022c 	.word	0x2000022c
 8001634:	40a00000 	.word	0x40a00000
 8001638:	42c80000 	.word	0x42c80000
 800163c:	2000026c 	.word	0x2000026c

08001640 <APP_K210X_PID_Calc>:

// 调用增量式pid计算,返回计算的结果 Call incremental pid calculation and return the result of calculation.
// float actual_value: 当前的误差 Current error
float APP_K210X_PID_Calc(float actual_value)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    return PID_Incre_Calc(&pid_k210_x, actual_value);
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <APP_K210X_PID_Calc+0x1c>)
 800164c:	f000 fc92 	bl	8001f74 <PID_Incre_Calc>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000022c 	.word	0x2000022c

08001660 <APP_K210X_Line_PID>:

// 根据传感器的值反馈，使用pid控制小车电机做巡线运动
//  According to the feedback of the sensor, pid is used to control the car motor to patrol the line.
void APP_K210X_Line_PID(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	g_K210x_median=160-K210_data.k210_X; //k210屏幕的x轴是320 所以中间值为160 The x-axis of the k210 screen is 320, so the median value is 160.
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <APP_K210X_Line_PID+0x68>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fba1 	bl	8000db4 <__aeabi_i2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a15      	ldr	r2, [pc, #84]	; (80016cc <APP_K210X_Line_PID+0x6c>)
 8001676:	6013      	str	r3, [r2, #0]

	pid_output_k210x = (int)(APP_K210X_PID_Calc(g_K210x_median));
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <APP_K210X_Line_PID+0x6c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ffdf 	bl	8001640 <APP_K210X_PID_Calc>
 8001682:	4603      	mov	r3, r0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdaf 	bl	80011e8 <__aeabi_f2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb91 	bl	8000db4 <__aeabi_i2f>
 8001692:	4603      	mov	r3, r0
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <APP_K210X_Line_PID+0x70>)
 8001696:	6013      	str	r3, [r2, #0]

	printf("%.4f\r\n",pid_output_k210x);
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <APP_K210X_Line_PID+0x70>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff2f 	bl	8000500 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <APP_K210X_Line_PID+0x74>)
 80016a8:	f007 f902 	bl	80088b0 <iprintf>
	Motion_Ctrl(K210X_SPEED, 0, pid_output_k210x);
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <APP_K210X_Line_PID+0x70>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd99 	bl	80011e8 <__aeabi_f2iz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	20c8      	movs	r0, #200	; 0xc8
 80016c0:	f000 fa8a 	bl	8001bd8 <Motion_Ctrl>

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000026c 	.word	0x2000026c
 80016cc:	20000224 	.word	0x20000224
 80016d0:	20000228 	.word	0x20000228
 80016d4:	0800c200 	.word	0x0800c200

080016d8 <Deal_K210>:
// 函数功能:保留k210的信息
// 传入函数:recv_msg:串口发来的信息
// Function function: Preserve information of k210
// Incoming function: recv_ Msg: Information sent from serial port
void Deal_K210(uint8_t recv_msg)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	if (recv_msg == '$' && g_new_flag == 0)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b24      	cmp	r3, #36	; 0x24
 80016e6:	d10c      	bne.n	8001702 <Deal_K210+0x2a>
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <Deal_K210+0x9c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <Deal_K210+0x2a>
		{
			g_new_flag = 1;
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <Deal_K210+0x9c>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
			memset(buf_msg, 0, sizeof(buf_msg)); // Clear old data 清除旧数据
 80016f6:	2214      	movs	r2, #20
 80016f8:	2100      	movs	r1, #0
 80016fa:	481f      	ldr	r0, [pc, #124]	; (8001778 <Deal_K210+0xa0>)
 80016fc:	f007 f94d 	bl	800899a <memset>
			return;
 8001700:	e034      	b.n	800176c <Deal_K210+0x94>
		}

	if(g_new_flag == 1)
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <Deal_K210+0x9c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d130      	bne.n	800176c <Deal_K210+0x94>
	{
		
		if (recv_msg == '#')
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b23      	cmp	r3, #35	; 0x23
 800170e:	d10d      	bne.n	800172c <Deal_K210+0x54>
		{
			g_new_flag = 0;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <Deal_K210+0x9c>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
			g_index = 0;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <Deal_K210+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			Get_K210_Data(); // New data received completed 新数据接收完毕
 800171c:	f000 f830 	bl	8001780 <Get_K210_Data>
			memset(buf_msg, 0, sizeof(buf_msg)); // Clear old data 清除旧数据
 8001720:	2214      	movs	r2, #20
 8001722:	2100      	movs	r1, #0
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <Deal_K210+0xa0>)
 8001726:	f007 f938 	bl	800899a <memset>
 800172a:	e01f      	b.n	800176c <Deal_K210+0x94>
		}

		else if (g_new_flag == 1 && recv_msg != '$')
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <Deal_K210+0x9c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d11b      	bne.n	800176c <Deal_K210+0x94>
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b24      	cmp	r3, #36	; 0x24
 8001738:	d018      	beq.n	800176c <Deal_K210+0x94>
		{
			buf_msg[g_index++] = recv_msg;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <Deal_K210+0xa4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	b2d1      	uxtb	r1, r2
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <Deal_K210+0xa4>)
 8001744:	7011      	strb	r1, [r2, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <Deal_K210+0xa0>)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	5453      	strb	r3, [r2, r1]
			if(g_index > 20) //数组溢出 Array overflow
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <Deal_K210+0xa4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b14      	cmp	r3, #20
 8001754:	d90a      	bls.n	800176c <Deal_K210+0x94>
			{
				g_index = 0;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <Deal_K210+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
				g_new_flag = 0;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <Deal_K210+0x9c>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
				memset(buf_msg, 0, sizeof(buf_msg)); // Clear old data 清除旧数据
 8001762:	2214      	movs	r2, #20
 8001764:	2100      	movs	r1, #0
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <Deal_K210+0xa0>)
 8001768:	f007 f917 	bl	800899a <memset>
			}
		}
	}
}
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000268 	.word	0x20000268
 8001778:	20000254 	.word	0x20000254
 800177c:	20000269 	.word	0x20000269

08001780 <Get_K210_Data>:
//函数功能:获取识别图像的中心点X\Y坐标
//传入参数:无
//Function function: Obtain the X  Y coordinates of the center point of the recognition image
//Incoming parameter: None
void Get_K210_Data(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	K210_data.k210_X = (buf_msg[0] -'0') *100 + (buf_msg[1] -'0') *10 + (buf_msg[2] -'0');
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <Get_K210_Data+0x94>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3b30      	subs	r3, #48	; 0x30
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4413      	add	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	0091      	lsls	r1, r2, #2
 8001796:	461a      	mov	r2, r3
 8001798:	460b      	mov	r3, r1
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <Get_K210_Data+0x94>)
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	3b30      	subs	r3, #48	; 0x30
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	0089      	lsls	r1, r1, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <Get_K210_Data+0x94>)
 80017b8:	789b      	ldrb	r3, [r3, #2]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b30      	subs	r3, #48	; 0x30
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <Get_K210_Data+0x98>)
 80017c6:	801a      	strh	r2, [r3, #0]

	K210_data.k210_Y = (buf_msg[3] -'0') *100 + (buf_msg[4] -'0') *10 + (buf_msg[5] -'0');
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <Get_K210_Data+0x94>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	3b30      	subs	r3, #48	; 0x30
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	0091      	lsls	r1, r2, #2
 80017da:	461a      	mov	r2, r3
 80017dc:	460b      	mov	r3, r1
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <Get_K210_Data+0x94>)
 80017e6:	791b      	ldrb	r3, [r3, #4]
 80017e8:	3b30      	subs	r3, #48	; 0x30
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	0089      	lsls	r1, r1, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <Get_K210_Data+0x94>)
 80017fc:	795b      	ldrb	r3, [r3, #5]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b30      	subs	r3, #48	; 0x30
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <Get_K210_Data+0x98>)
 800180a:	805a      	strh	r2, [r3, #2]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000254 	.word	0x20000254
 8001818:	2000026c 	.word	0x2000026c

0800181c <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <Motion_Get_Circle_Pulse+0x10>)
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	44820000 	.word	0x44820000

08001830 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	4603      	mov	r3, r0
 8001844:	80bb      	strh	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 8001856:	db0a      	blt.n	800186e <Motion_Set_Pwm+0x3e>
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001860:	dc05      	bgt.n	800186e <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	4619      	mov	r1, r3
 8001868:	2000      	movs	r0, #0
 800186a:	f000 fd5b 	bl	8002324 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 800186e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001872:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 8001876:	db0a      	blt.n	800188e <Motion_Set_Pwm+0x5e>
 8001878:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800187c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001880:	dc05      	bgt.n	800188e <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8001882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001886:	4619      	mov	r1, r3
 8001888:	2001      	movs	r0, #1
 800188a:	f000 fd4b 	bl	8002324 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 800188e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001892:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 8001896:	db0a      	blt.n	80018ae <Motion_Set_Pwm+0x7e>
 8001898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80018a0:	dc05      	bgt.n	80018ae <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 80018a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018a6:	4619      	mov	r1, r3
 80018a8:	2002      	movs	r0, #2
 80018aa:	f000 fd3b 	bl	8002324 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 80018ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018b2:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 80018b6:	db0a      	blt.n	80018ce <Motion_Set_Pwm+0x9e>
 80018b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018bc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80018c0:	dc05      	bgt.n	80018ce <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 80018c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018c6:	4619      	mov	r1, r3
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 fd2b 	bl	8002324 <Motor_Set_Pwm>
    }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
	...

080018d8 <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 80018e2:	2300      	movs	r3, #0
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2000      	movs	r0, #0
 80018ea:	f000 f815 	bl	8001918 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 80018ee:	2004      	movs	r0, #4
 80018f0:	f000 fbf0 	bl	80020d4 <PID_Clear_Motor>
    g_start_ctrl = 0;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <Motion_Stop+0x38>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <Motion_Stop+0x3c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fcc2 	bl	800228c <Motor_Stop>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002bc 	.word	0x200002bc
 8001914:	200002f0 	.word	0x200002f0

08001918 <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	80fb      	strh	r3, [r7, #6]
 800192a:	4603      	mov	r3, r0
 800192c:	80bb      	strh	r3, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <Motion_Set_Speed+0x80>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <Motion_Set_Speed+0x84>)
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <Motion_Set_Speed+0x84>)
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	8453      	strh	r3, [r2, #34]	; 0x22
    motor_data.speed_set[2] = speed_m3;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <Motion_Set_Speed+0x84>)
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	8493      	strh	r3, [r2, #36]	; 0x24
    motor_data.speed_set[3] = speed_m4;
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <Motion_Set_Speed+0x84>)
 8001950:	883b      	ldrh	r3, [r7, #0]
 8001952:	84d3      	strh	r3, [r2, #38]	; 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e016      	b.n	8001988 <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <Motion_Set_Speed+0x84>)
 800195e:	3310      	adds	r3, #16
 8001960:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdb9 	bl	80004dc <__aeabi_i2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f915 	bl	8000ba0 <__aeabi_d2f>
 8001976:	4602      	mov	r2, r0
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fc35 	bl	80021ec <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3301      	adds	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d9e5      	bls.n	800195a <Motion_Set_Speed+0x42>
    }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	200002bc 	.word	0x200002bc
 800199c:	200002c8 	.word	0x200002c8

080019a0 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    int i = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    float speed_mm[MAX_MOTOR] = {0};
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 80019ba:	f000 f8d3 	bl	8001b64 <Motion_Get_Circle_MM>
 80019be:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 80019c0:	f7ff ff2c 	bl	800181c <Motion_Get_Circle_Pulse>
 80019c4:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 80019c6:	f000 f8c3 	bl	8001b50 <Motion_Get_APB>
 80019ca:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 80019cc:	f000 f8d4 	bl	8001b78 <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	e01e      	b.n	8001a14 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 80019d6:	4a5a      	ldr	r2, [pc, #360]	; (8001b40 <Motion_Get_Speed+0x1a0>)
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f9e5 	bl	8000db4 <__aeabi_i2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa34 	bl	8000e5c <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	69f9      	ldr	r1, [r7, #28]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fae3 	bl	8000fc4 <__aeabi_fdiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3328      	adds	r3, #40	; 0x28
 8001a08:	443b      	add	r3, r7
 8001a0a:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	dddd      	ble.n	80019d6 <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f913 	bl	8000c4c <__addsf3>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff f90c 	bl	8000c4c <__addsf3>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f7ff f905 	bl	8000c4c <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fabb 	bl	8000fc4 <__aeabi_fdiv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fbc9 	bl	80011e8 <__aeabi_f2iz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f8ef 	bl	8000c48 <__aeabi_fsub>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f7ff f8e8 	bl	8000c48 <__aeabi_fsub>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff f8e3 	bl	8000c4c <__addsf3>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a8c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fa97 	bl	8000fc4 <__aeabi_fdiv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fba5 	bl	80011e8 <__aeabi_f2iz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f8cd 	bl	8000c4c <__addsf3>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f7ff f8c4 	bl	8000c48 <__aeabi_fsub>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7ff f8bd 	bl	8000c48 <__aeabi_fsub>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ad4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fa73 	bl	8000fc4 <__aeabi_fdiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	69b9      	ldr	r1, [r7, #24]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fa6e 	bl	8000fc4 <__aeabi_fdiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4916      	ldr	r1, [pc, #88]	; (8001b44 <Motion_Get_Speed+0x1a4>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9b5 	bl	8000e5c <__aeabi_fmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fb77 	bl	80011e8 <__aeabi_f2iz>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <Motion_Get_Speed+0x1a8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e00c      	b.n	8001b2a <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3328      	adds	r3, #40	; 0x28
 8001b16:	443b      	add	r3, r7
 8001b18:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001b1c:	490b      	ldr	r1, [pc, #44]	; (8001b4c <Motion_Get_Speed+0x1ac>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	3301      	adds	r3, #1
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	ddef      	ble.n	8001b10 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <Motion_Get_Speed+0x1ac>)
 8001b32:	f000 faa7 	bl	8002084 <PID_Calc_Motor>
    }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002ac 	.word	0x200002ac
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	200002bc 	.word	0x200002bc
 8001b4c:	200002c8 	.word	0x200002c8

08001b50 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8001b54:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <Motion_Get_APB+0x10>)
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	431f0000 	.word	0x431f0000

08001b64 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <Motion_Get_Circle_MM+0x10>)
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	434c33f8 	.word	0x434c33f8

08001b78 <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8001b7e:	4813      	ldr	r0, [pc, #76]	; (8001bcc <Motion_Get_Encoder+0x54>)
 8001b80:	f7ff fcd0 	bl	8001524 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	e017      	b.n	8001bba <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <Motion_Get_Encoder+0x54>)
 8001b8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <Motion_Get_Encoder+0x58>)
 8001b96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	1a8a      	subs	r2, r1, r2
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <Motion_Get_Encoder+0x5c>)
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4908      	ldr	r1, [pc, #32]	; (8001bcc <Motion_Get_Encoder+0x54>)
 8001baa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <Motion_Get_Encoder+0x58>)
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d9e4      	bls.n	8001b8a <Motion_Get_Encoder+0x12>
    }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000028c 	.word	0x2000028c
 8001bd0:	2000029c 	.word	0x2000029c
 8001bd4:	200002ac 	.word	0x200002ac

08001bd8 <Motion_Ctrl>:

// 控制小车运动
//Control the movement of the car
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	460b      	mov	r3, r1
 8001be4:	80bb      	strh	r3, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	807b      	strh	r3, [r7, #2]
    wheel_Ctrl(V_x, V_y, V_z);
 8001bea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f804 	bl	8001c04 <wheel_Ctrl>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <wheel_Ctrl>:
    }
}


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8001c16:	f7ff ff9b 	bl	8001b50 <Motion_Get_APB>
 8001c1a:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <wheel_Ctrl+0x1d8>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8001c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f8c3 	bl	8000db4 <__aeabi_i2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a6b      	ldr	r2, [pc, #428]	; (8001de0 <wheel_Ctrl+0x1dc>)
 8001c32:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8001c34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f8bb 	bl	8000db4 <__aeabi_i2f>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4968      	ldr	r1, [pc, #416]	; (8001de4 <wheel_Ctrl+0x1e0>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f9be 	bl	8000fc4 <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f905 	bl	8000e5c <__aeabi_fmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <wheel_Ctrl+0x1e4>)
 8001c58:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10b      	bne.n	8001c7a <wheel_Ctrl+0x76>
 8001c62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <wheel_Ctrl+0x76>
 8001c6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fe30 	bl	80018d8 <Motion_Stop>
        return;
 8001c78:	e0ad      	b.n	8001dd6 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <wheel_Ctrl+0x1dc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <wheel_Ctrl+0x1d8>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe ffe1 	bl	8000c4c <__addsf3>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <wheel_Ctrl+0x1e4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f7fe ffd9 	bl	8000c4c <__addsf3>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff faa3 	bl	80011e8 <__aeabi_f2iz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001ca6:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001ca8:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <wheel_Ctrl+0x1dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <wheel_Ctrl+0x1d8>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe ffc8 	bl	8000c48 <__aeabi_fsub>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <wheel_Ctrl+0x1e4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7fe ffc2 	bl	8000c4c <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa8c 	bl	80011e8 <__aeabi_f2iz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001cd4:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <wheel_Ctrl+0x1dc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <wheel_Ctrl+0x1d8>)
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ffb1 	bl	8000c48 <__aeabi_fsub>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <wheel_Ctrl+0x1e4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f7fe ffa9 	bl	8000c48 <__aeabi_fsub>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa75 	bl	80011e8 <__aeabi_f2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001d02:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <wheel_Ctrl+0x1dc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <wheel_Ctrl+0x1d8>)
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe ff9c 	bl	8000c4c <__addsf3>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <wheel_Ctrl+0x1e4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7fe ff92 	bl	8000c48 <__aeabi_fsub>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa5e 	bl	80011e8 <__aeabi_f2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001d30:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d3a:	dd03      	ble.n	8001d44 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d42:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d4c:	da02      	bge.n	8001d54 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <wheel_Ctrl+0x1f8>)
 8001d52:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8001d54:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d5c:	dd03      	ble.n	8001d66 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d64:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d6e:	da02      	bge.n	8001d76 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <wheel_Ctrl+0x1f8>)
 8001d74:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d7e:	dd03      	ble.n	8001d88 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d86:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001d90:	da02      	bge.n	8001d98 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <wheel_Ctrl+0x1f8>)
 8001d96:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da0:	dd03      	ble.n	8001daa <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da8:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001db2:	da02      	bge.n	8001dba <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <wheel_Ctrl+0x1f8>)
 8001db8:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <wheel_Ctrl+0x1e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b218      	sxth	r0, r3
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <wheel_Ctrl+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b219      	sxth	r1, r3
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <wheel_Ctrl+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <wheel_Ctrl+0x1f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f7ff fda1 	bl	8001918 <Motion_Set_Speed>
}
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000270 	.word	0x20000270
 8001de0:	20000274 	.word	0x20000274
 8001de4:	447a0000 	.word	0x447a0000
 8001de8:	20000278 	.word	0x20000278
 8001dec:	2000027c 	.word	0x2000027c
 8001df0:	20000280 	.word	0x20000280
 8001df4:	20000284 	.word	0x20000284
 8001df8:	20000288 	.word	0x20000288
 8001dfc:	fffffc18 	.word	0xfffffc18

08001e00 <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8001e04:	4814      	ldr	r0, [pc, #80]	; (8001e58 <Motion_Handle+0x58>)
 8001e06:	f7ff fdcb 	bl	80019a0 <Motion_Get_Speed>

    if (g_start_ctrl)
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <Motion_Handle+0x5c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <Motion_Handle+0x60>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f9e6 	bl	80011e8 <__aeabi_f2iz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b21c      	sxth	r4, r3
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <Motion_Handle+0x60>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f9df 	bl	80011e8 <__aeabi_f2iz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b21d      	sxth	r5, r3
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <Motion_Handle+0x60>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f9d8 	bl	80011e8 <__aeabi_f2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	b21e      	sxth	r6, r3
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <Motion_Handle+0x60>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f9d1 	bl	80011e8 <__aeabi_f2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4632      	mov	r2, r6
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fcee 	bl	8001830 <Motion_Set_Pwm>
    }
}
 8001e54:	bf00      	nop
 8001e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e58:	200002c0 	.word	0x200002c0
 8001e5c:	200002bc 	.word	0x200002bc
 8001e60:	200002c8 	.word	0x200002c8

08001e64 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	e062      	b.n	8001f36 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001e70:	493a      	ldr	r1, [pc, #232]	; (8001f5c <PID_Param_Init+0xf8>)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001e84:	4935      	ldr	r1, [pc, #212]	; (8001f5c <PID_Param_Init+0xf8>)
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3308      	adds	r3, #8
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8001e9a:	4930      	ldr	r1, [pc, #192]	; (8001f5c <PID_Param_Init+0xf8>)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3318      	adds	r3, #24
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8001eb0:	492a      	ldr	r1, [pc, #168]	; (8001f5c <PID_Param_Init+0xf8>)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	331c      	adds	r3, #28
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8001ec6:	4925      	ldr	r1, [pc, #148]	; (8001f5c <PID_Param_Init+0xf8>)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8001edc:	491f      	ldr	r1, [pc, #124]	; (8001f5c <PID_Param_Init+0xf8>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3324      	adds	r3, #36	; 0x24
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001ef2:	491a      	ldr	r1, [pc, #104]	; (8001f5c <PID_Param_Init+0xf8>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	330c      	adds	r3, #12
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <PID_Param_Init+0xfc>)
 8001f04:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001f06:	4915      	ldr	r1, [pc, #84]	; (8001f5c <PID_Param_Init+0xf8>)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3310      	adds	r3, #16
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <PID_Param_Init+0x100>)
 8001f18:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8001f1a:	4910      	ldr	r1, [pc, #64]	; (8001f5c <PID_Param_Init+0xf8>)
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3314      	adds	r3, #20
 8001f2a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001f2e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	dd99      	ble.n	8001e70 <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <PID_Param_Init+0x104>)
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <PID_Param_Init+0x108>)
 8001f40:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <PID_Param_Init+0x104>)
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <PID_Param_Init+0x104>)
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <PID_Param_Init+0x10c>)
 8001f4e:	60da      	str	r2, [r3, #12]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200002f4 	.word	0x200002f4
 8001f60:	3f4ccccd 	.word	0x3f4ccccd
 8001f64:	3d75c28f 	.word	0x3d75c28f
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	3ecccccd 	.word	0x3ecccccd
 8001f70:	3dcccccd 	.word	0x3dcccccd

08001f74 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fe5e 	bl	8000c48 <__aeabi_fsub>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689c      	ldr	r4, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68dd      	ldr	r5, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f7fe fe4e 	bl	8000c48 <__aeabi_fsub>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7fe ff53 	bl	8000e5c <__aeabi_fmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461d      	mov	r5, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7fe ff49 	bl	8000e5c <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f7fe fe3c 	bl	8000c4c <__addsf3>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695d      	ldr	r5, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699e      	ldr	r6, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe30 	bl	8000c4c <__addsf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f7fe fe29 	bl	8000c48 <__aeabi_fsub>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f7fe fe23 	bl	8000c4c <__addsf3>
 8002006:	4603      	mov	r3, r0
 8002008:	4619      	mov	r1, r3
 800200a:	4628      	mov	r0, r5
 800200c:	f7fe ff26 	bl	8000e5c <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	4619      	mov	r1, r3
 8002014:	4640      	mov	r0, r8
 8002016:	f7fe fe19 	bl	8000c4c <__addsf3>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe fe14 	bl	8000c4c <__addsf3>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <PID_Incre_Calc+0x108>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f8c6 	bl	80011d4 <__aeabi_fcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <PID_Incre_Calc+0x108>)
 8002052:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4909      	ldr	r1, [pc, #36]	; (8002080 <PID_Incre_Calc+0x10c>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f89c 	bl	8001198 <__aeabi_fcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a05      	ldr	r2, [pc, #20]	; (8002080 <PID_Incre_Calc+0x10c>)
 800206a:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800207a:	bf00      	nop
 800207c:	44c80000 	.word	0x44c80000
 8002080:	c4c80000 	.word	0xc4c80000

08002084 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e016      	b.n	80020c0 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <PID_Calc_Motor+0x4c>)
 800209e:	1898      	adds	r0, r3, r2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7ff ff63 	bl	8001f74 <PID_Incre_Calc>
 80020ae:	4601      	mov	r1, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	3204      	adds	r2, #4
 80020b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	dde5      	ble.n	8002092 <PID_Calc_Motor+0xe>
    }
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200002f4 	.word	0x200002f4

080020d4 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d87b      	bhi.n	80021dc <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d140      	bne.n	800216c <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e039      	b.n	8002164 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 80020f0:	493d      	ldr	r1, [pc, #244]	; (80021e8 <PID_Clear_Motor+0x114>)
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3308      	adds	r3, #8
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8002106:	4938      	ldr	r1, [pc, #224]	; (80021e8 <PID_Clear_Motor+0x114>)
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	3318      	adds	r3, #24
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 800211c:	4932      	ldr	r1, [pc, #200]	; (80021e8 <PID_Clear_Motor+0x114>)
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	331c      	adds	r3, #28
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8002132:	492d      	ldr	r1, [pc, #180]	; (80021e8 <PID_Clear_Motor+0x114>)
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	3320      	adds	r3, #32
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8002148:	4927      	ldr	r1, [pc, #156]	; (80021e8 <PID_Clear_Motor+0x114>)
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	3324      	adds	r3, #36	; 0x24
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	ddc2      	ble.n	80020f0 <PID_Clear_Motor+0x1c>
 800216a:	e038      	b.n	80021de <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	491e      	ldr	r1, [pc, #120]	; (80021e8 <PID_Clear_Motor+0x114>)
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3308      	adds	r3, #8
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	4918      	ldr	r1, [pc, #96]	; (80021e8 <PID_Clear_Motor+0x114>)
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	3318      	adds	r3, #24
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	4913      	ldr	r1, [pc, #76]	; (80021e8 <PID_Clear_Motor+0x114>)
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	331c      	adds	r3, #28
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 80021ae:	79fa      	ldrb	r2, [r7, #7]
 80021b0:	490d      	ldr	r1, [pc, #52]	; (80021e8 <PID_Clear_Motor+0x114>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3320      	adds	r3, #32
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <PID_Clear_Motor+0x114>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3324      	adds	r3, #36	; 0x24
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e000      	b.n	80021de <PID_Clear_Motor+0x10a>
        return;
 80021dc:	bf00      	nop
    }
}
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200002f4 	.word	0x200002f4

080021ec <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d81f      	bhi.n	800223e <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d112      	bne.n	800222a <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e00b      	b.n	8002222 <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 800220a:	490f      	ldr	r1, [pc, #60]	; (8002248 <PID_Set_Motor_Target+0x5c>)
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	ddf0      	ble.n	800220a <PID_Set_Motor_Target+0x1e>
 8002228:	e00a      	b.n	8002240 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 800222a:	79fa      	ldrb	r2, [r7, #7]
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <PID_Set_Motor_Target+0x5c>)
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e000      	b.n	8002240 <PID_Set_Motor_Target+0x54>
        return;
 800223e:	bf00      	nop
    }
}
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	200002f4 	.word	0x200002f4

0800224c <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8002256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225a:	2b00      	cmp	r3, #0
 800225c:	dd05      	ble.n	800226a <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002264:	b29b      	uxth	r3, r3
 8002266:	b21b      	sxth	r3, r3
 8002268:	e00a      	b.n	8002280 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 800226a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	da05      	bge.n	800227e <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002278:	b29b      	uxth	r3, r3
 800227a:	b21b      	sxth	r3, r3
 800227c:	e000      	b.n	8002280 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <Motor_Stop+0x14>
        brake = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <Motor_Stop+0x90>)
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022b4:	fb03 f202 	mul.w	r2, r3, r2
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <Motor_Stop+0x90>)
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022c2:	fb03 f202 	mul.w	r2, r3, r2
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <Motor_Stop+0x90>)
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022d0:	fb03 f202 	mul.w	r2, r3, r2
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <Motor_Stop+0x90>)
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <Motor_Stop+0x94>)
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022ec:	fb03 f202 	mul.w	r2, r3, r2
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <Motor_Stop+0x94>)
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022fa:	fb03 f202 	mul.w	r2, r3, r2
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <Motor_Stop+0x94>)
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002308:	fb03 f202 	mul.w	r2, r3, r2
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <Motor_Stop+0x94>)
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40013400 	.word	0x40013400
 8002320:	40012c00 	.word	0x40012c00

08002324 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	4613      	mov	r3, r2
 8002332:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002334:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff87 	bl	800224c <Motor_Ignore_Dead_Zone>
 800233e:	4603      	mov	r3, r0
 8002340:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8002342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002346:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800234a:	db02      	blt.n	8002352 <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 800234c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002350:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8002352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002356:	f513 6f61 	cmn.w	r3, #3600	; 0xe10
 800235a:	dc02      	bgt.n	8002362 <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 800235c:	f24f 13f0 	movw	r3, #61936	; 0xf1f0
 8002360:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d867      	bhi.n	8002438 <Motor_Set_Pwm+0x114>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <Motor_Set_Pwm+0x4c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	080023b3 	.word	0x080023b3
 8002378:	080023e5 	.word	0x080023e5
 800237c:	0800240f 	.word	0x0800240f
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	425b      	negs	r3, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8002388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db07      	blt.n	80023a0 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <Motor_Set_Pwm+0x120>)
 8002392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002396:	6353      	str	r3, [r2, #52]	; 0x34
            PWM_M1_B = 0;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <Motor_Set_Pwm+0x120>)
 800239a:	2200      	movs	r2, #0
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800239e:	e04c      	b.n	800243a <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34
            PWM_M1_B = -pulse;
 80023a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023aa:	425a      	negs	r2, r3
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80023b0:	e043      	b.n	800243a <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	425b      	negs	r3, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80023ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db07      	blt.n	80023d2 <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80023c2:	4a20      	ldr	r2, [pc, #128]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023c8:	63d3      	str	r3, [r2, #60]	; 0x3c
            PWM_M2_B = 0;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80023d0:	e033      	b.n	800243a <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
            PWM_M2_B = -pulse;
 80023d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023dc:	425a      	negs	r2, r3
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <Motor_Set_Pwm+0x120>)
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80023e2:	e02a      	b.n	800243a <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 80023e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db07      	blt.n	80023fc <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <Motor_Set_Pwm+0x124>)
 80023ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f2:	6353      	str	r3, [r2, #52]	; 0x34
            PWM_M3_B = 0;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <Motor_Set_Pwm+0x124>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80023fa:	e01e      	b.n	800243a <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <Motor_Set_Pwm+0x124>)
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
            PWM_M3_B = -pulse;
 8002402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002406:	425a      	negs	r2, r3
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <Motor_Set_Pwm+0x124>)
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800240c:	e015      	b.n	800243a <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 800240e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db07      	blt.n	8002426 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <Motor_Set_Pwm+0x124>)
 8002418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800241c:	63d3      	str	r3, [r2, #60]	; 0x3c
            PWM_M4_B = 0;
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <Motor_Set_Pwm+0x124>)
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8002424:	e009      	b.n	800243a <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <Motor_Set_Pwm+0x124>)
 8002428:	2200      	movs	r2, #0
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
            PWM_M4_B = -pulse;
 800242c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002430:	425a      	negs	r2, r3
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <Motor_Set_Pwm+0x124>)
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8002436:	e000      	b.n	800243a <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8002438:	bf00      	nop
    }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40013400 	.word	0x40013400
 8002448:	40012c00 	.word	0x40012c00

0800244c <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002450:	2100      	movs	r1, #0
 8002452:	4822      	ldr	r0, [pc, #136]	; (80024dc <Bsp_Tim_Init+0x90>)
 8002454:	f002 fd74 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002458:	2104      	movs	r1, #4
 800245a:	4820      	ldr	r0, [pc, #128]	; (80024dc <Bsp_Tim_Init+0x90>)
 800245c:	f002 fd70 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002460:	2108      	movs	r1, #8
 8002462:	481e      	ldr	r0, [pc, #120]	; (80024dc <Bsp_Tim_Init+0x90>)
 8002464:	f002 fd6c 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002468:	210c      	movs	r1, #12
 800246a:	481c      	ldr	r0, [pc, #112]	; (80024dc <Bsp_Tim_Init+0x90>)
 800246c:	f002 fd68 	bl	8004f40 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002470:	2100      	movs	r1, #0
 8002472:	481b      	ldr	r0, [pc, #108]	; (80024e0 <Bsp_Tim_Init+0x94>)
 8002474:	f002 fd64 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002478:	2104      	movs	r1, #4
 800247a:	4819      	ldr	r0, [pc, #100]	; (80024e0 <Bsp_Tim_Init+0x94>)
 800247c:	f002 fd60 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002480:	2108      	movs	r1, #8
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <Bsp_Tim_Init+0x94>)
 8002484:	f002 fd5c 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002488:	210c      	movs	r1, #12
 800248a:	4815      	ldr	r0, [pc, #84]	; (80024e0 <Bsp_Tim_Init+0x94>)
 800248c:	f002 fd58 	bl	8004f40 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 8002490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002494:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800249a:	2104      	movs	r1, #4
 800249c:	4811      	ldr	r0, [pc, #68]	; (80024e4 <Bsp_Tim_Init+0x98>)
 800249e:	f003 f81b 	bl	80054d8 <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <Bsp_Tim_Init+0x9c>)
 80024a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80024aa:	2104      	movs	r1, #4
 80024ac:	480f      	ldr	r0, [pc, #60]	; (80024ec <Bsp_Tim_Init+0xa0>)
 80024ae:	f003 f813 	bl	80054d8 <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <Bsp_Tim_Init+0xa4>)
 80024b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80024ba:	2104      	movs	r1, #4
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <Bsp_Tim_Init+0xa8>)
 80024be:	f003 f80b 	bl	80054d8 <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <Bsp_Tim_Init+0xac>)
 80024c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80024ca:	2104      	movs	r1, #4
 80024cc:	480b      	ldr	r0, [pc, #44]	; (80024fc <Bsp_Tim_Init+0xb0>)
 80024ce:	f003 f803 	bl	80054d8 <HAL_TIM_Encoder_Start>


	//启动定时6中断 Start timing 6 interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 80024d2:	480b      	ldr	r0, [pc, #44]	; (8002500 <Bsp_Tim_Init+0xb4>)
 80024d4:	f002 fbc4 	bl	8004c60 <HAL_TIM_Base_Start_IT>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000398 	.word	0x20000398
 80024e0:	20000548 	.word	0x20000548
 80024e4:	200003e0 	.word	0x200003e0
 80024e8:	40000400 	.word	0x40000400
 80024ec:	20000428 	.word	0x20000428
 80024f0:	40000800 	.word	0x40000800
 80024f4:	20000470 	.word	0x20000470
 80024f8:	40000c00 	.word	0x40000c00
 80024fc:	200004b8 	.word	0x200004b8
 8002500:	20000500 	.word	0x20000500

08002504 <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数 基本定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d103      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速
 8002516:	f7ff f829 	bl	800156c <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度 Call PID to control the speed
 800251a:	f7ff fc71 	bl	8001e00 <Motion_Handle>

	}


}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40001000 	.word	0x40001000

0800252c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <MX_GPIO_Init+0xc4>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <MX_GPIO_Init+0xc4>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <MX_GPIO_Init+0xc4>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin;
 80025d0:	2338      	movs	r3, #56	; 0x38
 80025d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d8:	2301      	movs	r3, #1
 80025da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_GPIO_Init+0xc8>)
 80025e4:	f001 fa0c 	bl	8003a00 <HAL_GPIO_Init>

}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40012000 	.word	0x40012000

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025fc:	f001 f862 	bl	80036c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002600:	f000 f819 	bl	8002636 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002604:	f7ff ff92 	bl	800252c <MX_GPIO_Init>
  MX_TIM1_Init();
 8002608:	f000 f996 	bl	8002938 <MX_TIM1_Init>
  MX_TIM2_Init();
 800260c:	f000 fa58 	bl	8002ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002610:	f000 faaa 	bl	8002b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002614:	f000 fafc 	bl	8002c10 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002618:	f000 fb4e 	bl	8002cb8 <MX_TIM5_Init>
  MX_TIM6_Init();
 800261c:	f000 fba0 	bl	8002d60 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002620:	f000 fbd4 	bl	8002dcc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002624:	f000 ff4a 	bl	80034bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002628:	f000 ff72 	bl	8003510 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 800262c:	f7fe fef0 	bl	8001410 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8002630:	f7fe fef8 	bl	8001424 <BSP_Loop>
 8002634:	e7fc      	b.n	8002630 <main+0x38>

08002636 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b090      	sub	sp, #64	; 0x40
 800263a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	2228      	movs	r2, #40	; 0x28
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f006 f9a8 	bl	800899a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002658:	2301      	movs	r3, #1
 800265a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800265c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002660:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002666:	2301      	movs	r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266a:	2302      	movs	r3, #2
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002674:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267a:	f107 0318 	add.w	r3, r7, #24
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fc78 	bl	8003f74 <HAL_RCC_OscConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800268a:	f000 f819 	bl	80026c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	230f      	movs	r3, #15
 8002690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2302      	movs	r3, #2
 8002694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2102      	movs	r1, #2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 ffd1 	bl	8004650 <HAL_RCC_ClockConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80026b4:	f000 f804 	bl	80026c0 <Error_Handler>
  }
}
 80026b8:	bf00      	nop
 80026ba:	3740      	adds	r7, #64	; 0x40
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <Error_Handler+0x8>

080026ca <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_MspInit+0x60>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4a15      	ldr	r2, [pc, #84]	; (8002740 <HAL_MspInit+0x60>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6193      	str	r3, [r2, #24]
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_MspInit+0x60>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_MspInit+0x60>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_MspInit+0x60>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_MspInit+0x60>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002716:	2005      	movs	r0, #5
 8002718:	f001 f902 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_MspInit+0x64>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_MspInit+0x64>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274c:	e7fe      	b.n	800274c <NMI_Handler+0x4>

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278e:	f000 ffdf 	bl	8003750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM6_IRQHandler+0x10>)
 800279e:	f002 ff59 	bl	8005654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000500 	.word	0x20000500

080027ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <_kill>:

int _kill(int pid, int sig)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c4:	f006 f93c 	bl	8008a40 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2216      	movs	r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
	return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_exit>:

void _exit (int status)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e2:	f04f 31ff 	mov.w	r1, #4294967295
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffe7 	bl	80027ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ec:	e7fe      	b.n	80027ec <_exit+0x12>

080027ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e00a      	b.n	8002816 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002800:	f3af 8000 	nop.w
 8002804:	4601      	mov	r1, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	60ba      	str	r2, [r7, #8]
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf0      	blt.n	8002800 <_read+0x12>
	}

return len;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e009      	b.n	800284e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	60ba      	str	r2, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fd70 	bl	8001328 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf1      	blt.n	800283a <_write+0x12>
	}
	return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_close>:

int _close(int file)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	return -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002886:	605a      	str	r2, [r3, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <_isatty>:

int _isatty(int file)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f006 f8a6 	bl	8008a40 <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20010000 	.word	0x20010000
 8002920:	00000400 	.word	0x00000400
 8002924:	20000394 	.word	0x20000394
 8002928:	20000728 	.word	0x20000728

0800292c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b096      	sub	sp, #88	; 0x58
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800293e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2220      	movs	r2, #32
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f006 f812 	bl	800899a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002978:	4a50      	ldr	r2, [pc, #320]	; (8002abc <MX_TIM1_Init+0x184>)
 800297a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <MX_TIM1_Init+0x180>)
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <MX_TIM1_Init+0x180>)
 800298a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800298e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002996:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <MX_TIM1_Init+0x180>)
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029a2:	4845      	ldr	r0, [pc, #276]	; (8002ab8 <MX_TIM1_Init+0x180>)
 80029a4:	f002 f888 	bl	8004ab8 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029ae:	f7ff fe87 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029bc:	4619      	mov	r1, r3
 80029be:	483e      	ldr	r0, [pc, #248]	; (8002ab8 <MX_TIM1_Init+0x180>)
 80029c0:	f003 f8f2 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029ca:	f7ff fe79 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029ce:	483a      	ldr	r0, [pc, #232]	; (8002ab8 <MX_TIM1_Init+0x180>)
 80029d0:	f002 f9d8 	bl	8004d84 <HAL_TIM_PWM_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80029da:	f7ff fe71 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029ea:	4619      	mov	r1, r3
 80029ec:	4832      	ldr	r0, [pc, #200]	; (8002ab8 <MX_TIM1_Init+0x180>)
 80029ee:	f003 ffbf 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029f8:	f7ff fe62 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029fc:	2360      	movs	r3, #96	; 0x60
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4825      	ldr	r0, [pc, #148]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002a22:	f002 ff1f 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a2c:	f7ff fe48 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a34:	2204      	movs	r2, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	481f      	ldr	r0, [pc, #124]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002a3a:	f002 ff13 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002a44:	f7ff fe3c 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4819      	ldr	r0, [pc, #100]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002a52:	f002 ff07 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002a5c:	f7ff fe30 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	220c      	movs	r2, #12
 8002a66:	4619      	mov	r1, r3
 8002a68:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002a6a:	f002 fefb 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002a74:	f7ff fe24 	bl	80026c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002a9c:	f004 f838 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002aa6:	f7ff fe0b 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <MX_TIM1_Init+0x180>)
 8002aac:	f000 fbb2 	bl	8003214 <HAL_TIM_MspPostInit>

}
 8002ab0:	bf00      	nop
 8002ab2:	3758      	adds	r7, #88	; 0x58
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000398 	.word	0x20000398
 8002abc:	40012c00 	.word	0x40012c00

08002ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f005 ff63 	bl	800899a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b04:	2303      	movs	r3, #3
 8002b06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002b30:	f002 fb2e 	bl	8005190 <HAL_TIM_Encoder_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b3a:	f7ff fdc1 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4806      	ldr	r0, [pc, #24]	; (8002b64 <MX_TIM2_Init+0xa4>)
 8002b4c:	f003 ff10 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b56:	f7ff fdb3 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	3730      	adds	r7, #48	; 0x30
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200003e0 	.word	0x200003e0

08002b68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f005 ff0f 	bl	800899a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <MX_TIM3_Init+0xa4>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002baa:	2303      	movs	r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002bd6:	f002 fadb 	bl	8005190 <HAL_TIM_Encoder_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002be0:	f7ff fd6e 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_TIM3_Init+0xa0>)
 8002bf2:	f003 febd 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002bfc:	f7ff fd60 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3730      	adds	r7, #48	; 0x30
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000428 	.word	0x20000428
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f005 febb 	bl	800899a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c2e:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <MX_TIM4_Init+0xa4>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c52:	2303      	movs	r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c7e:	f002 fa87 	bl	8005190 <HAL_TIM_Encoder_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c88:	f7ff fd1a 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_TIM4_Init+0xa0>)
 8002c9a:	f003 fe69 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ca4:	f7ff fd0c 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	3730      	adds	r7, #48	; 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000470 	.word	0x20000470
 8002cb4:	40000800 	.word	0x40000800

08002cb8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f005 fe67 	bl	800899a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <MX_TIM5_Init+0xa4>)
 8002cd8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d12:	2301      	movs	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	4619      	mov	r1, r3
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002d26:	f002 fa33 	bl	8005190 <HAL_TIM_Encoder_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d30:	f7ff fcc6 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_TIM5_Init+0xa0>)
 8002d42:	f003 fe15 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d4c:	f7ff fcb8 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200004b8 	.word	0x200004b8
 8002d5c:	40000c00 	.word	0x40000c00

08002d60 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d66:	463b      	mov	r3, r7
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d70:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <MX_TIM6_Init+0x68>)
 8002d72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d76:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002d7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d84:	2263      	movs	r2, #99	; 0x63
 8002d86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002d90:	f001 fe92 	bl	8004ab8 <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d9a:	f7ff fc91 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002da6:	463b      	mov	r3, r7
 8002da8:	4619      	mov	r1, r3
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <MX_TIM6_Init+0x64>)
 8002dac:	f003 fde0 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002db6:	f7ff fc83 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000500 	.word	0x20000500
 8002dc8:	40001000 	.word	0x40001000

08002dcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b096      	sub	sp, #88	; 0x58
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	611a      	str	r2, [r3, #16]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	2220      	movs	r2, #32
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f005 fdc8 	bl	800899a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e0a:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e0c:	4a50      	ldr	r2, [pc, #320]	; (8002f50 <MX_TIM8_Init+0x184>)
 8002e0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e10:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e16:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e1e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002e22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e2a:	4b48      	ldr	r3, [pc, #288]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e30:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e36:	4845      	ldr	r0, [pc, #276]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e38:	f001 fe3e 	bl	8004ab8 <HAL_TIM_Base_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e42:	f7ff fc3d 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e50:	4619      	mov	r1, r3
 8002e52:	483e      	ldr	r0, [pc, #248]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e54:	f002 fea8 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002e5e:	f7ff fc2f 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e62:	483a      	ldr	r0, [pc, #232]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e64:	f001 ff8e 	bl	8004d84 <HAL_TIM_PWM_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e6e:	f7ff fc27 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4832      	ldr	r0, [pc, #200]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002e82:	f003 fd75 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002e8c:	f7ff fc18 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e90:	2360      	movs	r3, #96	; 0x60
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4825      	ldr	r0, [pc, #148]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002eb6:	f002 fcd5 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002ec0:	f7ff fbfe 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	481f      	ldr	r0, [pc, #124]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002ece:	f002 fcc9 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002ed8:	f7ff fbf2 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4819      	ldr	r0, [pc, #100]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002ee6:	f002 fcbd 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002ef0:	f7ff fbe6 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	220c      	movs	r2, #12
 8002efa:	4619      	mov	r1, r3
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002efe:	f002 fcb1 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002f08:	f7ff fbda 	bl	80026c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002f30:	f003 fdee 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002f3a:	f7ff fbc1 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f3e:	4803      	ldr	r0, [pc, #12]	; (8002f4c <MX_TIM8_Init+0x180>)
 8002f40:	f000 f968 	bl	8003214 <HAL_TIM_MspPostInit>

}
 8002f44:	bf00      	nop
 8002f46:	3758      	adds	r7, #88	; 0x58
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000548 	.word	0x20000548
 8002f50:	40013400 	.word	0x40013400

08002f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <HAL_TIM_Base_MspInit+0x8c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10c      	bne.n	8002f80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f70:	6193      	str	r3, [r2, #24]
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f7e:	e02a      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_TIM_Base_MspInit+0x94>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d114      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f90:	f043 0310 	orr.w	r3, r3, #16
 8002f94:	61d3      	str	r3, [r2, #28]
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 1);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	2036      	movs	r0, #54	; 0x36
 8002fa8:	f000 fcda 	bl	8003960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002fac:	2036      	movs	r0, #54	; 0x36
 8002fae:	f000 fd03 	bl	80039b8 <HAL_NVIC_EnableIRQ>
}
 8002fb2:	e010      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <HAL_TIM_Base_MspInit+0x98>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002fc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc8:	6193      	str	r3, [r2, #24]
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_TIM_Base_MspInit+0x90>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40001000 	.word	0x40001000
 8002fec:	40013400 	.word	0x40013400

08002ff0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b092      	sub	sp, #72	; 0x48
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d14f      	bne.n	80030b0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003010:	4b78      	ldr	r3, [pc, #480]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a77      	ldr	r2, [pc, #476]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	61d3      	str	r3, [r2, #28]
 800301c:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003028:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a71      	ldr	r2, [pc, #452]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003040:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a6b      	ldr	r2, [pc, #428]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 8003058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305e:	2300      	movs	r3, #0
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306a:	4619      	mov	r1, r3
 800306c:	4862      	ldr	r0, [pc, #392]	; (80031f8 <HAL_TIM_Encoder_MspInit+0x208>)
 800306e:	f000 fcc7 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 8003072:	2308      	movs	r3, #8
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003076:	2300      	movs	r3, #0
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 800307e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	485d      	ldr	r0, [pc, #372]	; (80031fc <HAL_TIM_Encoder_MspInit+0x20c>)
 8003086:	f000 fcbb 	bl	8003a00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80030ae:	e09d      	b.n	80031ec <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_TIM_Encoder_MspInit+0x214>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d136      	bne.n	8003128 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4a4d      	ldr	r2, [pc, #308]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	61d3      	str	r3, [r2, #28]
 80030c6:	4b4b      	ldr	r3, [pc, #300]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d2:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a47      	ldr	r2, [pc, #284]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6193      	str	r3, [r2, #24]
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80030ea:	2330      	movs	r3, #48	; 0x30
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fa:	4619      	mov	r1, r3
 80030fc:	483f      	ldr	r0, [pc, #252]	; (80031fc <HAL_TIM_Encoder_MspInit+0x20c>)
 80030fe:	f000 fc7f 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003116:	643b      	str	r3, [r7, #64]	; 0x40
 8003118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
 8003120:	4a37      	ldr	r2, [pc, #220]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 8003122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003124:	6053      	str	r3, [r2, #4]
}
 8003126:	e061      	b.n	80031ec <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <HAL_TIM_Encoder_MspInit+0x218>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d133      	bne.n	800319a <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	61d3      	str	r3, [r2, #28]
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800314a:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003150:	f043 0320 	orr.w	r3, r3, #32
 8003154:	6193      	str	r3, [r2, #24]
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 8003162:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003168:	2300      	movs	r3, #0
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003174:	4619      	mov	r1, r3
 8003176:	4825      	ldr	r0, [pc, #148]	; (800320c <HAL_TIM_Encoder_MspInit+0x21c>)
 8003178:	f000 fc42 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003184:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003188:	647b      	str	r3, [r7, #68]	; 0x44
 800318a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_TIM_Encoder_MspInit+0x210>)
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	6053      	str	r3, [r2, #4]
}
 8003198:	e028      	b.n	80031ec <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_Encoder_MspInit+0x220>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d123      	bne.n	80031ec <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	61d3      	str	r3, [r2, #28]
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x204>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 80031d4:	2303      	movs	r3, #3
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d8:	2300      	movs	r3, #0
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e4:	4619      	mov	r1, r3
 80031e6:	4804      	ldr	r0, [pc, #16]	; (80031f8 <HAL_TIM_Encoder_MspInit+0x208>)
 80031e8:	f000 fc0a 	bl	8003a00 <HAL_GPIO_Init>
}
 80031ec:	bf00      	nop
 80031ee:	3748      	adds	r7, #72	; 0x48
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010c00 	.word	0x40010c00
 8003200:	40010000 	.word	0x40010000
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800
 800320c:	40011400 	.word	0x40011400
 8003210:	40000c00 	.word	0x40000c00

08003214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_TIM_MspPostInit+0xbc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d12b      	bne.n	800328c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 800323a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 800324c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	481d      	ldr	r0, [pc, #116]	; (80032d8 <HAL_TIM_MspPostInit+0xc4>)
 8003262:	f000 fbcd 	bl	8003a00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_TIM_MspPostInit+0xc8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_TIM_MspPostInit+0xc8>)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800328a:	e01d      	b.n	80032c8 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <HAL_TIM_MspPostInit+0xcc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d118      	bne.n	80032c8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	6193      	str	r3, [r2, #24]
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_TIM_MspPostInit+0xc0>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 80032ae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80032b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2302      	movs	r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	4808      	ldr	r0, [pc, #32]	; (80032e4 <HAL_TIM_MspPostInit+0xd0>)
 80032c4:	f000 fb9c 	bl	8003a00 <HAL_GPIO_Init>
}
 80032c8:	bf00      	nop
 80032ca:	3728      	adds	r7, #40	; 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40011800 	.word	0x40011800
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40013400 	.word	0x40013400
 80032e4:	40011000 	.word	0x40011000

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4906      	ldr	r1, [pc, #24]	; (8003338 <__NVIC_EnableIRQ+0x34>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	; (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	; (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <LL_USART_Enable>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <LL_USART_ConfigAsyncMode>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	615a      	str	r2, [r3, #20]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <LL_APB1_GRP1_EnableClock+0x2c>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4313      	orrs	r3, r2
 800344e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4013      	ands	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <LL_APB2_GRP1_EnableClock+0x2c>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000

0800349c <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80034a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034aa:	f043 0308 	orr.w	r3, r3, #8
 80034ae:	6053      	str	r3, [r2, #4]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	40010000 	.word	0x40010000

080034bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <MX_USART1_UART_Init+0x50>)
 80034c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034e2:	220c      	movs	r2, #12
 80034e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_USART1_UART_Init+0x4c>)
 80034f4:	f003 fbea 	bl	8006ccc <HAL_UART_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034fe:	f7ff f8df 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000590 	.word	0x20000590
 800350c:	40013800 	.word	0x40013800

08003510 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	615a      	str	r2, [r3, #20]
 8003528:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352a:	463b      	mov	r3, r7
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003538:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800353c:	f7ff ff7e 	bl	800343c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003540:	2020      	movs	r0, #32
 8003542:	f7ff ff93 	bl	800346c <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003546:	f242 0320 	movw	r3, #8224	; 0x2020
 800354a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800354c:	2309      	movs	r3, #9
 800354e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	463b      	mov	r3, r7
 800355a:	4619      	mov	r1, r3
 800355c:	481e      	ldr	r0, [pc, #120]	; (80035d8 <MX_USART2_UART_Init+0xc8>)
 800355e:	f003 fee7 	bl	8007330 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003562:	f244 0340 	movw	r3, #16448	; 0x4040
 8003566:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003568:	2304      	movs	r3, #4
 800356a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800356c:	463b      	mov	r3, r7
 800356e:	4619      	mov	r1, r3
 8003570:	4819      	ldr	r0, [pc, #100]	; (80035d8 <MX_USART2_UART_Init+0xc8>)
 8003572:	f003 fedd 	bl	8007330 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 8003576:	f7ff ff91 	bl	800349c <LL_GPIO_AF_EnableRemap_USART2>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800357a:	f7ff feb5 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 800357e:	4603      	mov	r3, r0
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff03 	bl	8003390 <NVIC_EncodePriority>
 800358a:	4603      	mov	r3, r0
 800358c:	4619      	mov	r1, r3
 800358e:	2026      	movs	r0, #38	; 0x26
 8003590:	f7ff fed4 	bl	800333c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003594:	2026      	movs	r0, #38	; 0x26
 8003596:	f7ff feb5 	bl	8003304 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800359a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800359e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80035ac:	230c      	movs	r3, #12
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4619      	mov	r1, r3
 80035be:	4807      	ldr	r0, [pc, #28]	; (80035dc <MX_USART2_UART_Init+0xcc>)
 80035c0:	f004 f946 	bl	8007850 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_USART2_UART_Init+0xcc>)
 80035c6:	f7ff ff24 	bl	8003412 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80035ca:	4804      	ldr	r0, [pc, #16]	; (80035dc <MX_USART2_UART_Init+0xcc>)
 80035cc:	f7ff ff12 	bl	80033f4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	; 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40011400 	.word	0x40011400
 80035dc:	40004400 	.word	0x40004400

080035e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_UART_MspInit+0x8c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d131      	bne.n	8003664 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_UART_MspInit+0x90>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_UART_MspInit+0x90>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_UART_MspInit+0x90>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_UART_MspInit+0x90>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_UART_MspInit+0x90>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6193      	str	r3, [r2, #24]
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_UART_MspInit+0x90>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	4619      	mov	r1, r3
 8003644:	480b      	ldr	r0, [pc, #44]	; (8003674 <HAL_UART_MspInit+0x94>)
 8003646:	f000 f9db 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800364a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	4619      	mov	r1, r3
 800365e:	4805      	ldr	r0, [pc, #20]	; (8003674 <HAL_UART_MspInit+0x94>)
 8003660:	f000 f9ce 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40013800 	.word	0x40013800
 8003670:	40021000 	.word	0x40021000
 8003674:	40010800 	.word	0x40010800

08003678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003678:	f7ff f958 	bl	800292c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800367e:	490c      	ldr	r1, [pc, #48]	; (80036b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003680:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003684:	e002      	b.n	800368c <LoopCopyDataInit>

08003686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368a:	3304      	adds	r3, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800368c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003690:	d3f9      	bcc.n	8003686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003694:	4c09      	ldr	r4, [pc, #36]	; (80036bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003698:	e001      	b.n	800369e <LoopFillZerobss>

0800369a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800369c:	3204      	adds	r2, #4

0800369e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a0:	d3fb      	bcc.n	800369a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036a2:	f005 f9d3 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036a6:	f7fe ffa7 	bl	80025f8 <main>
  bx lr
 80036aa:	4770      	bx	lr
  ldr r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80036b4:	0800c838 	.word	0x0800c838
  ldr r2, =_sbss
 80036b8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80036bc:	20000728 	.word	0x20000728

080036c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c0:	e7fe      	b.n	80036c0 <ADC1_2_IRQHandler>
	...

080036c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_Init+0x28>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_Init+0x28>)
 80036ce:	f043 0310 	orr.w	r3, r3, #16
 80036d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 f923 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036da:	2003      	movs	r0, #3
 80036dc:	f000 f808 	bl	80036f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e0:	f7fe fffe 	bl	80026e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x54>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_InitTick+0x58>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003706:	fbb3 f3f1 	udiv	r3, r3, r1
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f96a 	bl	80039e8 <HAL_SYSTICK_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00e      	b.n	800373c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d80a      	bhi.n	800373a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f000 f918 	bl	8003960 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <HAL_InitTick+0x5c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000001c 	.word	0x2000001c
 8003748:	20000024 	.word	0x20000024
 800374c:	20000020 	.word	0x20000020

08003750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_IncTick+0x1c>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_IncTick+0x20>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_IncTick+0x20>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	20000024 	.word	0x20000024
 8003770:	200005d8 	.word	0x200005d8

08003774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTick;
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_GetTick+0x10>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	200005d8 	.word	0x200005d8

08003788 <__NVIC_SetPriorityGrouping>:
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a4:	4013      	ands	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	60d3      	str	r3, [r2, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_GetPriorityGrouping>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <__NVIC_GetPriorityGrouping+0x18>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 0307 	and.w	r3, r3, #7
}
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_EnableIRQ>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db0b      	blt.n	8003816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	4906      	ldr	r1, [pc, #24]	; (8003820 <__NVIC_EnableIRQ+0x34>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff90 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b07      	cmp	r3, #7
 800392c:	d00f      	beq.n	800394e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d00c      	beq.n	800394e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d009      	beq.n	800394e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d006      	beq.n	800394e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d003      	beq.n	800394e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003946:	2191      	movs	r1, #145	; 0x91
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800394a:	f7fe febe 	bl	80026ca <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff1a 	bl	8003788 <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	0800c208 	.word	0x0800c208

08003960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d903      	bls.n	8003980 <HAL_NVIC_SetPriority+0x20>
 8003978:	21a9      	movs	r1, #169	; 0xa9
 800397a:	480e      	ldr	r0, [pc, #56]	; (80039b4 <HAL_NVIC_SetPriority+0x54>)
 800397c:	f7fe fea5 	bl	80026ca <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d903      	bls.n	800398e <HAL_NVIC_SetPriority+0x2e>
 8003986:	21aa      	movs	r1, #170	; 0xaa
 8003988:	480a      	ldr	r0, [pc, #40]	; (80039b4 <HAL_NVIC_SetPriority+0x54>)
 800398a:	f7fe fe9e 	bl	80026ca <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800398e:	f7ff ff1f 	bl	80037d0 <__NVIC_GetPriorityGrouping>
 8003992:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7ff ff6d 	bl	8003878 <NVIC_EncodePriority>
 800399e:	4602      	mov	r2, r0
 80039a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff3c 	bl	8003824 <__NVIC_SetPriority>
}
 80039ac:	bf00      	nop
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	0800c208 	.word	0x0800c208

080039b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da03      	bge.n	80039d2 <HAL_NVIC_EnableIRQ+0x1a>
 80039ca:	21bd      	movs	r1, #189	; 0xbd
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <HAL_NVIC_EnableIRQ+0x2c>)
 80039ce:	f7fe fe7c 	bl	80026ca <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff08 	bl	80037ec <__NVIC_EnableIRQ>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	0800c208 	.word	0x0800c208

080039e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff73 	bl	80038dc <SysTick_Config>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a94      	ldr	r2, [pc, #592]	; (8003c68 <HAL_GPIO_Init+0x268>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01b      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a93      	ldr	r2, [pc, #588]	; (8003c6c <HAL_GPIO_Init+0x26c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d017      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a92      	ldr	r2, [pc, #584]	; (8003c70 <HAL_GPIO_Init+0x270>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a91      	ldr	r2, [pc, #580]	; (8003c74 <HAL_GPIO_Init+0x274>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a90      	ldr	r2, [pc, #576]	; (8003c78 <HAL_GPIO_Init+0x278>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a8f      	ldr	r2, [pc, #572]	; (8003c7c <HAL_GPIO_Init+0x27c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a8e      	ldr	r2, [pc, #568]	; (8003c80 <HAL_GPIO_Init+0x280>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
 8003a4a:	21bd      	movs	r1, #189	; 0xbd
 8003a4c:	488d      	ldr	r0, [pc, #564]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003a4e:	f7fe fe3c 	bl	80026ca <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_GPIO_Init+0x68>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x70>
 8003a68:	21be      	movs	r1, #190	; 0xbe
 8003a6a:	4886      	ldr	r0, [pc, #536]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003a6c:	f7fe fe2d 	bl	80026ca <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8235 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f000 8230 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b11      	cmp	r3, #17
 8003a8a:	f000 822b 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	f000 8226 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	f000 8221 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a78      	ldr	r2, [pc, #480]	; (8003c88 <HAL_GPIO_Init+0x288>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	f000 821b 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_GPIO_Init+0x28c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f000 8215 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <HAL_GPIO_Init+0x290>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f000 820f 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a72      	ldr	r2, [pc, #456]	; (8003c94 <HAL_GPIO_Init+0x294>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f000 8209 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a70      	ldr	r2, [pc, #448]	; (8003c98 <HAL_GPIO_Init+0x298>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	f000 8203 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <HAL_GPIO_Init+0x29c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f000 81fd 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	f000 81f8 	beq.w	8003ee4 <HAL_GPIO_Init+0x4e4>
 8003af4:	21bf      	movs	r1, #191	; 0xbf
 8003af6:	4863      	ldr	r0, [pc, #396]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003af8:	f7fe fde7 	bl	80026ca <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afc:	e1f2      	b.n	8003ee4 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003afe:	2201      	movs	r2, #1
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	f040 81e1 	bne.w	8003ede <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a52      	ldr	r2, [pc, #328]	; (8003c68 <HAL_GPIO_Init+0x268>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01b      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <HAL_GPIO_Init+0x26c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d017      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a50      	ldr	r2, [pc, #320]	; (8003c70 <HAL_GPIO_Init+0x270>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <HAL_GPIO_Init+0x274>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_GPIO_Init+0x278>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a4d      	ldr	r2, [pc, #308]	; (8003c7c <HAL_GPIO_Init+0x27c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_GPIO_Init+0x280>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x15c>
 8003b54:	21cd      	movs	r1, #205	; 0xcd
 8003b56:	484b      	ldr	r0, [pc, #300]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003b58:	f7fe fdb7 	bl	80026ca <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_GPIO_Init+0x29c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f000 80c6 	beq.w	8003cf4 <HAL_GPIO_Init+0x2f4>
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_GPIO_Init+0x29c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f200 80ec 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003b70:	4a47      	ldr	r2, [pc, #284]	; (8003c90 <HAL_GPIO_Init+0x290>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f000 80be 	beq.w	8003cf4 <HAL_GPIO_Init+0x2f4>
 8003b78:	4a45      	ldr	r2, [pc, #276]	; (8003c90 <HAL_GPIO_Init+0x290>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f200 80e4 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003b80:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_GPIO_Init+0x298>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	f000 80b6 	beq.w	8003cf4 <HAL_GPIO_Init+0x2f4>
 8003b88:	4a43      	ldr	r2, [pc, #268]	; (8003c98 <HAL_GPIO_Init+0x298>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	f200 80dc 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003b90:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <HAL_GPIO_Init+0x28c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f000 80ae 	beq.w	8003cf4 <HAL_GPIO_Init+0x2f4>
 8003b98:	4a3c      	ldr	r2, [pc, #240]	; (8003c8c <HAL_GPIO_Init+0x28c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	f200 80d4 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_GPIO_Init+0x294>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_GPIO_Init+0x2f4>
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <HAL_GPIO_Init+0x294>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f200 80cc 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d82b      	bhi.n	8003c0c <HAL_GPIO_Init+0x20c>
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	f200 80c7 	bhi.w	8003d48 <HAL_GPIO_Init+0x348>
 8003bba:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <HAL_GPIO_Init+0x1c0>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003cf5 	.word	0x08003cf5
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003ca1 	.word	0x08003ca1
 8003bcc:	08003d43 	.word	0x08003d43
 8003bd0:	08003d49 	.word	0x08003d49
 8003bd4:	08003d49 	.word	0x08003d49
 8003bd8:	08003d49 	.word	0x08003d49
 8003bdc:	08003d49 	.word	0x08003d49
 8003be0:	08003d49 	.word	0x08003d49
 8003be4:	08003d49 	.word	0x08003d49
 8003be8:	08003d49 	.word	0x08003d49
 8003bec:	08003d49 	.word	0x08003d49
 8003bf0:	08003d49 	.word	0x08003d49
 8003bf4:	08003d49 	.word	0x08003d49
 8003bf8:	08003d49 	.word	0x08003d49
 8003bfc:	08003d49 	.word	0x08003d49
 8003c00:	08003d49 	.word	0x08003d49
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003ccb 	.word	0x08003ccb
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_GPIO_Init+0x288>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d070      	beq.n	8003cf4 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c12:	e099      	b.n	8003d48 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d00b      	beq.n	8003c34 <HAL_GPIO_Init+0x234>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_GPIO_Init+0x234>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x234>
 8003c2c:	21d5      	movs	r1, #213	; 0xd5
 8003c2e:	4815      	ldr	r0, [pc, #84]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003c30:	f7fe fd4b 	bl	80026ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	623b      	str	r3, [r7, #32]
          break;
 8003c3a:	e086      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d00b      	beq.n	8003c5c <HAL_GPIO_Init+0x25c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d007      	beq.n	8003c5c <HAL_GPIO_Init+0x25c>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x25c>
 8003c54:	21dc      	movs	r1, #220	; 0xdc
 8003c56:	480b      	ldr	r0, [pc, #44]	; (8003c84 <HAL_GPIO_Init+0x284>)
 8003c58:	f7fe fd37 	bl	80026ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	623b      	str	r3, [r7, #32]
          break;
 8003c64:	e071      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
 8003c66:	bf00      	nop
 8003c68:	40010800 	.word	0x40010800
 8003c6c:	40010c00 	.word	0x40010c00
 8003c70:	40011000 	.word	0x40011000
 8003c74:	40011400 	.word	0x40011400
 8003c78:	40011800 	.word	0x40011800
 8003c7c:	40011c00 	.word	0x40011c00
 8003c80:	40012000 	.word	0x40012000
 8003c84:	0800c244 	.word	0x0800c244
 8003c88:	10110000 	.word	0x10110000
 8003c8c:	10210000 	.word	0x10210000
 8003c90:	10310000 	.word	0x10310000
 8003c94:	10120000 	.word	0x10120000
 8003c98:	10220000 	.word	0x10220000
 8003c9c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_GPIO_Init+0x2c0>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d007      	beq.n	8003cc0 <HAL_GPIO_Init+0x2c0>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2c0>
 8003cb8:	21e3      	movs	r1, #227	; 0xe3
 8003cba:	4891      	ldr	r0, [pc, #580]	; (8003f00 <HAL_GPIO_Init+0x500>)
 8003cbc:	f7fe fd05 	bl	80026ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
          break;
 8003cc8:	e03f      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d00b      	beq.n	8003cea <HAL_GPIO_Init+0x2ea>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x2ea>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2ea>
 8003ce2:	21ea      	movs	r1, #234	; 0xea
 8003ce4:	4886      	ldr	r0, [pc, #536]	; (8003f00 <HAL_GPIO_Init+0x500>)
 8003ce6:	f7fe fcf0 	bl	80026ca <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	623b      	str	r3, [r7, #32]
          break;
 8003cf2:	e02a      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <HAL_GPIO_Init+0x314>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d007      	beq.n	8003d14 <HAL_GPIO_Init+0x314>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x314>
 8003d0c:	21f7      	movs	r1, #247	; 0xf7
 8003d0e:	487c      	ldr	r0, [pc, #496]	; (8003f00 <HAL_GPIO_Init+0x500>)
 8003d10:	f7fe fcdb 	bl	80026ca <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	623b      	str	r3, [r7, #32]
          break;
 8003d20:	e013      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	611a      	str	r2, [r3, #16]
          break;
 8003d34:	e009      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d36:	2308      	movs	r3, #8
 8003d38:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	615a      	str	r2, [r3, #20]
          break;
 8003d40:	e003      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e000      	b.n	8003d4a <HAL_GPIO_Init+0x34a>
          break;
 8003d48:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2bff      	cmp	r3, #255	; 0xff
 8003d4e:	d801      	bhi.n	8003d54 <HAL_GPIO_Init+0x354>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	e001      	b.n	8003d58 <HAL_GPIO_Init+0x358>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	d802      	bhi.n	8003d66 <HAL_GPIO_Init+0x366>
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x36c>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3b08      	subs	r3, #8
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	210f      	movs	r1, #15
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	431a      	orrs	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a2 	beq.w	8003ede <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_GPIO_Init+0x504>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	; (8003f04 <HAL_GPIO_Init+0x504>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6193      	str	r3, [r2, #24]
 8003da6:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_GPIO_Init+0x504>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003db2:	4a55      	ldr	r2, [pc, #340]	; (8003f08 <HAL_GPIO_Init+0x508>)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4c      	ldr	r2, [pc, #304]	; (8003f0c <HAL_GPIO_Init+0x50c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <HAL_GPIO_Init+0x41e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4b      	ldr	r2, [pc, #300]	; (8003f10 <HAL_GPIO_Init+0x510>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d019      	beq.n	8003e1a <HAL_GPIO_Init+0x41a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4a      	ldr	r2, [pc, #296]	; (8003f14 <HAL_GPIO_Init+0x514>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <HAL_GPIO_Init+0x416>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a49      	ldr	r2, [pc, #292]	; (8003f18 <HAL_GPIO_Init+0x518>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00d      	beq.n	8003e12 <HAL_GPIO_Init+0x412>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_GPIO_Init+0x51c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <HAL_GPIO_Init+0x40e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a47      	ldr	r2, [pc, #284]	; (8003f20 <HAL_GPIO_Init+0x520>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_GPIO_Init+0x40a>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e00a      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e008      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e004      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_GPIO_Init+0x420>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	f002 0203 	and.w	r2, r2, #3
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	4093      	lsls	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e30:	4935      	ldr	r1, [pc, #212]	; (8003f08 <HAL_GPIO_Init+0x508>)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	4935      	ldr	r1, [pc, #212]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
 8003e56:	e006      	b.n	8003e66 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	4930      	ldr	r1, [pc, #192]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	492b      	ldr	r1, [pc, #172]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	4926      	ldr	r1, [pc, #152]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	4921      	ldr	r1, [pc, #132]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
 8003ea6:	e006      	b.n	8003eb6 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	491c      	ldr	r1, [pc, #112]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4917      	ldr	r1, [pc, #92]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
 8003ece:	e006      	b.n	8003ede <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	4912      	ldr	r1, [pc, #72]	; (8003f24 <HAL_GPIO_Init+0x524>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f47f ae05 	bne.w	8003afe <HAL_GPIO_Init+0xfe>
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	0800c244 	.word	0x0800c244
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010800 	.word	0x40010800
 8003f10:	40010c00 	.word	0x40010c00
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	40011800 	.word	0x40011800
 8003f20:	40011c00 	.word	0x40011c00
 8003f24:	40010400 	.word	0x40010400

08003f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f34:	887b      	ldrh	r3, [r7, #2]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_GPIO_ReadPin+0x1c>
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_GPIO_ReadPin+0x26>
 8003f44:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003f48:	4809      	ldr	r0, [pc, #36]	; (8003f70 <HAL_GPIO_ReadPin+0x48>)
 8003f4a:	f7fe fbbe 	bl	80026ca <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	887b      	ldrh	r3, [r7, #2]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e001      	b.n	8003f64 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	0800c244 	.word	0x0800c244

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e35a      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x54>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x54>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d110      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x54>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x54>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x54>
 8003fbe:	f240 1165 	movw	r1, #357	; 0x165
 8003fc2:	488f      	ldr	r0, [pc, #572]	; (8004200 <HAL_RCC_OscConfig+0x28c>)
 8003fc4:	f7fe fb81 	bl	80026ca <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809a 	beq.w	800410a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <HAL_RCC_OscConfig+0x88>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCC_OscConfig+0x88>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d004      	beq.n	8003ffc <HAL_RCC_OscConfig+0x88>
 8003ff2:	f240 116b 	movw	r1, #363	; 0x16b
 8003ff6:	4882      	ldr	r0, [pc, #520]	; (8004200 <HAL_RCC_OscConfig+0x28c>)
 8003ff8:	f7fe fb67 	bl	80026ca <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b04      	cmp	r3, #4
 8004006:	d00c      	beq.n	8004022 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004008:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d112      	bne.n	800403a <HAL_RCC_OscConfig+0xc6>
 8004014:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06c      	beq.n	8004108 <HAL_RCC_OscConfig+0x194>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d168      	bne.n	8004108 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e300      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0xde>
 8004044:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e02e      	b.n	80040b0 <HAL_RCC_OscConfig+0x13c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x100>
 800405a:	4b6a      	ldr	r3, [pc, #424]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a69      	ldr	r2, [pc, #420]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b67      	ldr	r3, [pc, #412]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a66      	ldr	r2, [pc, #408]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800406c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0x13c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x124>
 800407e:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a60      	ldr	r2, [pc, #384]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b5e      	ldr	r3, [pc, #376]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a5d      	ldr	r2, [pc, #372]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x13c>
 8004098:	4b5a      	ldr	r3, [pc, #360]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a59      	ldr	r2, [pc, #356]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b57      	ldr	r3, [pc, #348]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7ff fb5c 	bl	8003774 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7ff fb58 	bl	8003774 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e2b4      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x14c>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7ff fb48 	bl	8003774 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7ff fb44 	bl	8003774 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e2a0      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b42      	ldr	r3, [pc, #264]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x174>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8080 	beq.w	8004218 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_OscConfig+0x1be>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0x1be>
 8004128:	f240 119f 	movw	r1, #415	; 0x19f
 800412c:	4834      	ldr	r0, [pc, #208]	; (8004200 <HAL_RCC_OscConfig+0x28c>)
 800412e:	f7fe facc 	bl	80026ca <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b1f      	cmp	r3, #31
 8004138:	d904      	bls.n	8004144 <HAL_RCC_OscConfig+0x1d0>
 800413a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800413e:	4830      	ldr	r0, [pc, #192]	; (8004200 <HAL_RCC_OscConfig+0x28c>)
 8004140:	f7fe fac3 	bl	80026ca <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b08      	cmp	r3, #8
 800415a:	d11c      	bne.n	8004196 <HAL_RCC_OscConfig+0x222>
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004168:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_OscConfig+0x20c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e25d      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	491d      	ldr	r1, [pc, #116]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004194:	e040      	b.n	8004218 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCC_OscConfig+0x294>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7ff fae6 	bl	8003774 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7ff fae2 	bl	8003774 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e23e      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490a      	ldr	r1, [pc, #40]	; (8004204 <HAL_RCC_OscConfig+0x290>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x294>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7ff fac5 	bl	8003774 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ec:	e00e      	b.n	800420c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7ff fac1 	bl	8003774 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d907      	bls.n	800420c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e21d      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
 8004200:	0800c280 	.word	0x0800c280
 8004204:	40021000 	.word	0x40021000
 8004208:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420c:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ea      	bne.n	80041ee <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d040      	beq.n	80042a6 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_OscConfig+0x2ca>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d004      	beq.n	800423e <HAL_RCC_OscConfig+0x2ca>
 8004234:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004238:	4873      	ldr	r0, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x494>)
 800423a:	f7fe fa46 	bl	80026ca <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d019      	beq.n	800427a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x498>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424c:	f7ff fa92 	bl	8003774 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004254:	f7ff fa8e 	bl	8003774 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1ea      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004272:	2001      	movs	r0, #1
 8004274:	f000 fc02 	bl	8004a7c <RCC_Delay>
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427a:	4b64      	ldr	r3, [pc, #400]	; (800440c <HAL_RCC_OscConfig+0x498>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7ff fa78 	bl	8003774 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7ff fa74 	bl	8003774 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1d0      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429a:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80bf 	beq.w	8004432 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_RCC_OscConfig+0x366>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d008      	beq.n	80042da <HAL_RCC_OscConfig+0x366>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d004      	beq.n	80042da <HAL_RCC_OscConfig+0x366>
 80042d0:	f240 210f 	movw	r1, #527	; 0x20f
 80042d4:	484c      	ldr	r0, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x494>)
 80042d6:	f7fe f9f8 	bl	80026ca <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a46      	ldr	r2, [pc, #280]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_RCC_OscConfig+0x49c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b40      	ldr	r3, [pc, #256]	; (8004410 <HAL_RCC_OscConfig+0x49c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3f      	ldr	r2, [pc, #252]	; (8004410 <HAL_RCC_OscConfig+0x49c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7ff fa2b 	bl	8003774 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7ff fa27 	bl	8003774 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b64      	cmp	r3, #100	; 0x64
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e183      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_RCC_OscConfig+0x49c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x3e2>
 8004348:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	e02d      	b.n	80043b2 <HAL_RCC_OscConfig+0x43e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x404>
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a25      	ldr	r2, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	e01c      	b.n	80043b2 <HAL_RCC_OscConfig+0x43e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0x426>
 8004380:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0x43e>
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7ff f9db 	bl	8003774 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7ff f9d7 	bl	8003774 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e131      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_OscConfig+0x490>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCC_OscConfig+0x44e>
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7ff f9c5 	bl	8003774 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	e012      	b.n	8004414 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7ff f9c1 	bl	8003774 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d909      	bls.n	8004414 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e11b      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
 8004404:	40021000 	.word	0x40021000
 8004408:	0800c280 	.word	0x0800c280
 800440c:	42420480 	.word	0x42420480
 8004410:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004414:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004426:	4b87      	ldr	r3, [pc, #540]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4a86      	ldr	r2, [pc, #536]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 800442c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004430:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_RCC_OscConfig+0x4e0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d008      	beq.n	8004454 <HAL_RCC_OscConfig+0x4e0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d004      	beq.n	8004454 <HAL_RCC_OscConfig+0x4e0>
 800444a:	f240 21ad 	movw	r1, #685	; 0x2ad
 800444e:	487e      	ldr	r0, [pc, #504]	; (8004648 <HAL_RCC_OscConfig+0x6d4>)
 8004450:	f7fe f93b 	bl	80026ca <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80ee 	beq.w	800463a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445e:	4b79      	ldr	r3, [pc, #484]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	f000 80ce 	beq.w	8004608 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2b02      	cmp	r3, #2
 8004472:	f040 80b2 	bne.w	80045da <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_OscConfig+0x51e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004486:	d004      	beq.n	8004492 <HAL_RCC_OscConfig+0x51e>
 8004488:	f240 21b6 	movw	r1, #694	; 0x2b6
 800448c:	486e      	ldr	r0, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x6d4>)
 800448e:	f7fe f91c 	bl	80026ca <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04a      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044a2:	d045      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044ac:	d040      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044b6:	d03b      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c0:	d036      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044ca:	d031      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044d4:	d02c      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044de:	d027      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e8:	d022      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044f2:	d01d      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044fc:	d018      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004510:	d00e      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800451a:	d009      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004524:	d004      	beq.n	8004530 <HAL_RCC_OscConfig+0x5bc>
 8004526:	f240 21b7 	movw	r1, #695	; 0x2b7
 800452a:	4847      	ldr	r0, [pc, #284]	; (8004648 <HAL_RCC_OscConfig+0x6d4>)
 800452c:	f7fe f8cd 	bl	80026ca <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCC_OscConfig+0x6d8>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7ff f91d 	bl	8003774 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7ff f919 	bl	8003774 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e075      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004550:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f0      	bne.n	800453e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_OscConfig+0x60e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004576:	d004      	beq.n	8004582 <HAL_RCC_OscConfig+0x60e>
 8004578:	f240 21cd 	movw	r1, #717	; 0x2cd
 800457c:	4832      	ldr	r0, [pc, #200]	; (8004648 <HAL_RCC_OscConfig+0x6d4>)
 800457e:	f7fe f8a4 	bl	80026ca <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	492d      	ldr	r1, [pc, #180]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a19      	ldr	r1, [r3, #32]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	430b      	orrs	r3, r1
 80045a6:	4927      	ldr	r1, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_OscConfig+0x6d8>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7ff f8df 	bl	8003774 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ba:	f7ff f8db 	bl	8003774 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e037      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x646>
 80045d8:	e02f      	b.n	800463a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <HAL_RCC_OscConfig+0x6d8>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7ff f8c8 	bl	8003774 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e8:	f7ff f8c4 	bl	8003774 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e020      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x674>
 8004606:	e018      	b.n	800463a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e013      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_OscConfig+0x6d0>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	429a      	cmp	r2, r3
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	0800c280 	.word	0x0800c280
 800464c:	42420060 	.word	0x42420060

08004650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e176      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <HAL_RCC_ClockConfig+0x4e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d110      	bne.n	800469e <HAL_RCC_ClockConfig+0x4e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <HAL_RCC_ClockConfig+0x4e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_RCC_ClockConfig+0x4e>
 8004694:	f240 3136 	movw	r1, #822	; 0x336
 8004698:	4874      	ldr	r0, [pc, #464]	; (800486c <HAL_RCC_ClockConfig+0x21c>)
 800469a:	f7fe f816 	bl	80026ca <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCC_ClockConfig+0x6a>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d007      	beq.n	80046ba <HAL_RCC_ClockConfig+0x6a>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d004      	beq.n	80046ba <HAL_RCC_ClockConfig+0x6a>
 80046b0:	f240 3137 	movw	r1, #823	; 0x337
 80046b4:	486d      	ldr	r0, [pc, #436]	; (800486c <HAL_RCC_ClockConfig+0x21c>)
 80046b6:	f7fe f808 	bl	80026ca <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ba:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d910      	bls.n	80046ea <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	4b69      	ldr	r3, [pc, #420]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 0207 	bic.w	r2, r3, #7
 80046d0:	4967      	ldr	r1, [pc, #412]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d8:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e133      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d049      	beq.n	800478a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004702:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a5b      	ldr	r2, [pc, #364]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 8004708:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800470c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471a:	4b56      	ldr	r3, [pc, #344]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a55      	ldr	r2, [pc, #340]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 8004720:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004724:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d024      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d020      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b90      	cmp	r3, #144	; 0x90
 800473c:	d01c      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2ba0      	cmp	r3, #160	; 0xa0
 8004744:	d018      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2bb0      	cmp	r3, #176	; 0xb0
 800474c:	d014      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2bc0      	cmp	r3, #192	; 0xc0
 8004754:	d010      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2bd0      	cmp	r3, #208	; 0xd0
 800475c:	d00c      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2be0      	cmp	r3, #224	; 0xe0
 8004764:	d008      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2bf0      	cmp	r3, #240	; 0xf0
 800476c:	d004      	beq.n	8004778 <HAL_RCC_ClockConfig+0x128>
 800476e:	f240 315d 	movw	r1, #861	; 0x35d
 8004772:	483e      	ldr	r0, [pc, #248]	; (800486c <HAL_RCC_ClockConfig+0x21c>)
 8004774:	f7fd ffa9 	bl	80026ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	493b      	ldr	r1, [pc, #236]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d051      	beq.n	800483a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x168>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d008      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x168>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d004      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x168>
 80047ae:	f44f 7159 	mov.w	r1, #868	; 0x364
 80047b2:	482e      	ldr	r0, [pc, #184]	; (800486c <HAL_RCC_ClockConfig+0x21c>)
 80047b4:	f7fd ff89 	bl	80026ca <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c0:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d115      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0c0      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b4      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0ac      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 0203 	bic.w	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	491b      	ldr	r1, [pc, #108]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480a:	f7fe ffb3 	bl	8003774 <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004810:	e00a      	b.n	8004828 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004812:	f7fe ffaf 	bl	8003774 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e094      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x224>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 020c 	and.w	r2, r3, #12
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	429a      	cmp	r2, r3
 8004838:	d1eb      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d217      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 0207 	bic.w	r2, r3, #7
 8004850:	4907      	ldr	r1, [pc, #28]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCC_ClockConfig+0x220>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d008      	beq.n	8004878 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e073      	b.n	8004952 <HAL_RCC_ClockConfig+0x302>
 800486a:	bf00      	nop
 800486c:	0800c280 	.word	0x0800c280
 8004870:	40022000 	.word	0x40022000
 8004874:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d025      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <HAL_RCC_ClockConfig+0x26e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004894:	d013      	beq.n	80048be <HAL_RCC_ClockConfig+0x26e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800489e:	d00e      	beq.n	80048be <HAL_RCC_ClockConfig+0x26e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x26e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b2:	d004      	beq.n	80048be <HAL_RCC_ClockConfig+0x26e>
 80048b4:	f240 31a2 	movw	r1, #930	; 0x3a2
 80048b8:	4828      	ldr	r0, [pc, #160]	; (800495c <HAL_RCC_ClockConfig+0x30c>)
 80048ba:	f7fd ff06 	bl	80026ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_RCC_ClockConfig+0x310>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4925      	ldr	r1, [pc, #148]	; (8004960 <HAL_RCC_ClockConfig+0x310>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d026      	beq.n	800492a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d018      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2c6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ec:	d013      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2c6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048f6:	d00e      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2c6>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2c6>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800490a:	d004      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2c6>
 800490c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8004910:	4812      	ldr	r0, [pc, #72]	; (800495c <HAL_RCC_ClockConfig+0x30c>)
 8004912:	f7fd feda 	bl	80026ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x310>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x310>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x310>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x314>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x318>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x31c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fed0 	bl	80036f0 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	0800c280 	.word	0x0800c280
 8004960:	40021000 	.word	0x40021000
 8004964:	0800c3dc 	.word	0x0800c3dc
 8004968:	2000001c 	.word	0x2000001c
 800496c:	20000020 	.word	0x20000020

08004970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x30>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x36>
 800499e:	e027      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049a2:	613b      	str	r3, [r7, #16]
      break;
 80049a4:	e027      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0c9b      	lsrs	r3, r3, #18
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b0:	5cd3      	ldrb	r3, [r2, r3]
 80049b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c5b      	lsrs	r3, r3, #17
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049d2:	fb03 f202 	mul.w	r2, r3, r2
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e004      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	613b      	str	r3, [r7, #16]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80049f2:	613b      	str	r3, [r7, #16]
      break;
 80049f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f6:	693b      	ldr	r3, [r7, #16]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	007a1200 	.word	0x007a1200
 8004a0c:	0800c3f4 	.word	0x0800c3f4
 8004a10:	0800c404 	.word	0x0800c404
 8004a14:	003d0900 	.word	0x003d0900

08004a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a1c:	4b02      	ldr	r3, [pc, #8]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	2000001c 	.word	0x2000001c

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff2 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800c3ec 	.word	0x0800c3ec

08004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a58:	f7ff ffde 	bl	8004a18 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	0adb      	lsrs	r3, r3, #11
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	0800c3ec 	.word	0x0800c3ec

08004a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <RCC_Delay+0x34>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <RCC_Delay+0x38>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a98:	bf00      	nop
  }
  while (Delay --);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f9      	bne.n	8004a98 <RCC_Delay+0x1c>
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	2000001c 	.word	0x2000001c
 8004ab4:	10624dd3 	.word	0x10624dd3

08004ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0b5      	b.n	8004c36 <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5c      	ldr	r2, [pc, #368]	; (8004c40 <HAL_TIM_Base_Init+0x188>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5a      	ldr	r2, [pc, #360]	; (8004c44 <HAL_TIM_Base_Init+0x18c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d01d      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <HAL_TIM_Base_Init+0x190>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a55      	ldr	r2, [pc, #340]	; (8004c4c <HAL_TIM_Base_Init+0x194>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a53      	ldr	r2, [pc, #332]	; (8004c50 <HAL_TIM_Base_Init+0x198>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_TIM_Base_Init+0x19c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a50      	ldr	r2, [pc, #320]	; (8004c58 <HAL_TIM_Base_Init+0x1a0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_Base_Init+0x6c>
 8004b1a:	f240 1113 	movw	r1, #275	; 0x113
 8004b1e:	484f      	ldr	r0, [pc, #316]	; (8004c5c <HAL_TIM_Base_Init+0x1a4>)
 8004b20:	f7fd fdd3 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d014      	beq.n	8004b56 <HAL_TIM_Base_Init+0x9e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d010      	beq.n	8004b56 <HAL_TIM_Base_Init+0x9e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d00c      	beq.n	8004b56 <HAL_TIM_Base_Init+0x9e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d008      	beq.n	8004b56 <HAL_TIM_Base_Init+0x9e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIM_Base_Init+0x9e>
 8004b4c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004b50:	4842      	ldr	r0, [pc, #264]	; (8004c5c <HAL_TIM_Base_Init+0x1a4>)
 8004b52:	f7fd fdba 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <HAL_TIM_Base_Init+0xc4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d009      	beq.n	8004b7c <HAL_TIM_Base_Init+0xc4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_Base_Init+0xc4>
 8004b72:	f240 1115 	movw	r1, #277	; 0x115
 8004b76:	4839      	ldr	r0, [pc, #228]	; (8004c5c <HAL_TIM_Base_Init+0x1a4>)
 8004b78:	f7fd fda7 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_TIM_Base_Init+0xd6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d304      	bcc.n	8004b98 <HAL_TIM_Base_Init+0xe0>
 8004b8e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004b92:	4832      	ldr	r0, [pc, #200]	; (8004c5c <HAL_TIM_Base_Init+0x1a4>)
 8004b94:	f7fd fd99 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_TIM_Base_Init+0xfa>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_Base_Init+0xfa>
 8004ba8:	f240 1117 	movw	r1, #279	; 0x117
 8004bac:	482b      	ldr	r0, [pc, #172]	; (8004c5c <HAL_TIM_Base_Init+0x1a4>)
 8004bae:	f7fd fd8c 	bl	80026ca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe f9c4 	bl	8002f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f001 fb1c 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40013400 	.word	0x40013400
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40001000 	.word	0x40001000
 8004c58:	40001400 	.word	0x40001400
 8004c5c:	0800c2b8 	.word	0x0800c2b8

08004c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <HAL_TIM_Base_Start_IT+0x104>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d027      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <HAL_TIM_Base_Start_IT+0x108>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <HAL_TIM_Base_Start_IT+0x10c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <HAL_TIM_Base_Start_IT+0x110>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <HAL_TIM_Base_Start_IT+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <HAL_TIM_Base_Start_IT+0x118>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <HAL_TIM_Base_Start_IT+0x11c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x62>
 8004cb8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8004cbc:	4830      	ldr	r0, [pc, #192]	; (8004d80 <HAL_TIM_Base_Start_IT+0x120>)
 8004cbe:	f7fd fd04 	bl	80026ca <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e044      	b.n	8004d5c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_TIM_Base_Start_IT+0x104>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0xc6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_TIM_Base_Start_IT+0x108>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0xc6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0xc6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_TIM_Base_Start_IT+0x10c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0xc6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIM_Base_Start_IT+0x110>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0xc6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <HAL_TIM_Base_Start_IT+0x114>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d111      	bne.n	8004d4a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d010      	beq.n	8004d5a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	e007      	b.n	8004d5a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40001000 	.word	0x40001000
 8004d7c:	40001400 	.word	0x40001400
 8004d80:	0800c2b8 	.word	0x0800c2b8

08004d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0b5      	b.n	8004f02 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_TIM_PWM_Init+0x188>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d027      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5a      	ldr	r2, [pc, #360]	; (8004f10 <HAL_TIM_PWM_Init+0x18c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d01d      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a56      	ldr	r2, [pc, #344]	; (8004f14 <HAL_TIM_PWM_Init+0x190>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a55      	ldr	r2, [pc, #340]	; (8004f18 <HAL_TIM_PWM_Init+0x194>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <HAL_TIM_PWM_Init+0x198>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a52      	ldr	r2, [pc, #328]	; (8004f20 <HAL_TIM_PWM_Init+0x19c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a50      	ldr	r2, [pc, #320]	; (8004f24 <HAL_TIM_PWM_Init+0x1a0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_PWM_Init+0x6c>
 8004de6:	f240 512c 	movw	r1, #1324	; 0x52c
 8004dea:	484f      	ldr	r0, [pc, #316]	; (8004f28 <HAL_TIM_PWM_Init+0x1a4>)
 8004dec:	f7fd fc6d 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d014      	beq.n	8004e22 <HAL_TIM_PWM_Init+0x9e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d010      	beq.n	8004e22 <HAL_TIM_PWM_Init+0x9e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d00c      	beq.n	8004e22 <HAL_TIM_PWM_Init+0x9e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d008      	beq.n	8004e22 <HAL_TIM_PWM_Init+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d004      	beq.n	8004e22 <HAL_TIM_PWM_Init+0x9e>
 8004e18:	f240 512d 	movw	r1, #1325	; 0x52d
 8004e1c:	4842      	ldr	r0, [pc, #264]	; (8004f28 <HAL_TIM_PWM_Init+0x1a4>)
 8004e1e:	f7fd fc54 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00e      	beq.n	8004e48 <HAL_TIM_PWM_Init+0xc4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e32:	d009      	beq.n	8004e48 <HAL_TIM_PWM_Init+0xc4>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d004      	beq.n	8004e48 <HAL_TIM_PWM_Init+0xc4>
 8004e3e:	f240 512e 	movw	r1, #1326	; 0x52e
 8004e42:	4839      	ldr	r0, [pc, #228]	; (8004f28 <HAL_TIM_PWM_Init+0x1a4>)
 8004e44:	f7fd fc41 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIM_PWM_Init+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d304      	bcc.n	8004e64 <HAL_TIM_PWM_Init+0xe0>
 8004e5a:	f240 512f 	movw	r1, #1327	; 0x52f
 8004e5e:	4832      	ldr	r0, [pc, #200]	; (8004f28 <HAL_TIM_PWM_Init+0x1a4>)
 8004e60:	f7fd fc33 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_TIM_PWM_Init+0xfa>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_PWM_Init+0xfa>
 8004e74:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8004e78:	482b      	ldr	r0, [pc, #172]	; (8004f28 <HAL_TIM_PWM_Init+0x1a4>)
 8004e7a:	f7fd fc26 	bl	80026ca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f84a 	bl	8004f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f001 f9b6 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40001000 	.word	0x40001000
 8004f24:	40001400 	.word	0x40001400
 8004f28:	0800c2b8 	.word	0x0800c2b8

08004f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a8a      	ldr	r2, [pc, #552]	; (8005178 <HAL_TIM_PWM_Start+0x238>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10b      	bne.n	8004f6c <HAL_TIM_PWM_Start+0x2c>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d062      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d05f      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d05c      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	d059      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a82      	ldr	r2, [pc, #520]	; (800517c <HAL_TIM_PWM_Start+0x23c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10b      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x4e>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d051      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d04e      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d04b      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d048      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d10b      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0x70>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d040      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d03d      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d03a      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d037      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a72      	ldr	r2, [pc, #456]	; (8005180 <HAL_TIM_PWM_Start+0x240>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x92>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02f      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d02c      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d029      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d026      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6b      	ldr	r2, [pc, #428]	; (8005184 <HAL_TIM_PWM_Start+0x244>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10b      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0xb4>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01e      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d018      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d015      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a63      	ldr	r2, [pc, #396]	; (8005188 <HAL_TIM_PWM_Start+0x248>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10b      	bne.n	8005016 <HAL_TIM_PWM_Start+0xd6>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00a      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d007      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	d004      	beq.n	8005020 <HAL_TIM_PWM_Start+0xe0>
 8005016:	f240 51b3 	movw	r1, #1459	; 0x5b3
 800501a:	485c      	ldr	r0, [pc, #368]	; (800518c <HAL_TIM_PWM_Start+0x24c>)
 800501c:	f7fd fb55 	bl	80026ca <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_TIM_PWM_Start+0xfa>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e022      	b.n	8005080 <HAL_TIM_PWM_Start+0x140>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d109      	bne.n	8005054 <HAL_TIM_PWM_Start+0x114>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e015      	b.n	8005080 <HAL_TIM_PWM_Start+0x140>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b08      	cmp	r3, #8
 8005058:	d109      	bne.n	800506e <HAL_TIM_PWM_Start+0x12e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e008      	b.n	8005080 <HAL_TIM_PWM_Start+0x140>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e072      	b.n	800516e <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <HAL_TIM_PWM_Start+0x158>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005096:	e013      	b.n	80050c0 <HAL_TIM_PWM_Start+0x180>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d104      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x168>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a6:	e00b      	b.n	80050c0 <HAL_TIM_PWM_Start+0x180>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d104      	bne.n	80050b8 <HAL_TIM_PWM_Start+0x178>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b6:	e003      	b.n	80050c0 <HAL_TIM_PWM_Start+0x180>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fbf1 	bl	80068b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a29      	ldr	r2, [pc, #164]	; (8005178 <HAL_TIM_PWM_Start+0x238>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x1a2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a27      	ldr	r2, [pc, #156]	; (800517c <HAL_TIM_PWM_Start+0x23c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x1a6>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_TIM_PWM_Start+0x1a8>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIM_PWM_Start+0x238>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1f8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <HAL_TIM_PWM_Start+0x23c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1f8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1f8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_TIM_PWM_Start+0x240>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1f8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_TIM_PWM_Start+0x244>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_Start+0x1f8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_TIM_PWM_Start+0x248>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	0800c2b8 	.word	0x0800c2b8

08005190 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e194      	b.n	80054ce <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a7f      	ldr	r2, [pc, #508]	; (80053a8 <HAL_TIM_Encoder_Init+0x218>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a7e      	ldr	r2, [pc, #504]	; (80053ac <HAL_TIM_Encoder_Init+0x21c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d013      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7a      	ldr	r2, [pc, #488]	; (80053b0 <HAL_TIM_Encoder_Init+0x220>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a78      	ldr	r2, [pc, #480]	; (80053b4 <HAL_TIM_Encoder_Init+0x224>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a77      	ldr	r2, [pc, #476]	; (80053b8 <HAL_TIM_Encoder_Init+0x228>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIM_Encoder_Init+0x5a>
 80051e0:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80051e4:	4875      	ldr	r0, [pc, #468]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 80051e6:	f7fd fa70 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d014      	beq.n	800521c <HAL_TIM_Encoder_Init+0x8c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d010      	beq.n	800521c <HAL_TIM_Encoder_Init+0x8c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d00c      	beq.n	800521c <HAL_TIM_Encoder_Init+0x8c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d008      	beq.n	800521c <HAL_TIM_Encoder_Init+0x8c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b60      	cmp	r3, #96	; 0x60
 8005210:	d004      	beq.n	800521c <HAL_TIM_Encoder_Init+0x8c>
 8005212:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8005216:	4869      	ldr	r0, [pc, #420]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 8005218:	f7fd fa57 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00e      	beq.n	8005242 <HAL_TIM_Encoder_Init+0xb2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d009      	beq.n	8005242 <HAL_TIM_Encoder_Init+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005236:	d004      	beq.n	8005242 <HAL_TIM_Encoder_Init+0xb2>
 8005238:	f640 31da 	movw	r1, #3034	; 0xbda
 800523c:	485f      	ldr	r0, [pc, #380]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 800523e:	f7fd fa44 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_TIM_Encoder_Init+0xcc>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d004      	beq.n	800525c <HAL_TIM_Encoder_Init+0xcc>
 8005252:	f640 31db 	movw	r1, #3035	; 0xbdb
 8005256:	4859      	ldr	r0, [pc, #356]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 8005258:	f7fd fa37 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00c      	beq.n	800527e <HAL_TIM_Encoder_Init+0xee>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d008      	beq.n	800527e <HAL_TIM_Encoder_Init+0xee>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d004      	beq.n	800527e <HAL_TIM_Encoder_Init+0xee>
 8005274:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8005278:	4850      	ldr	r0, [pc, #320]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 800527a:	f7fd fa26 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_Encoder_Init+0x110>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d008      	beq.n	80052a0 <HAL_TIM_Encoder_Init+0x110>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_Encoder_Init+0x110>
 8005296:	f640 31dd 	movw	r1, #3037	; 0xbdd
 800529a:	4848      	ldr	r0, [pc, #288]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 800529c:	f7fd fa15 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_Encoder_Init+0x132>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d008      	beq.n	80052c2 <HAL_TIM_Encoder_Init+0x132>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_Encoder_Init+0x132>
 80052b8:	f640 31de 	movw	r1, #3038	; 0xbde
 80052bc:	483f      	ldr	r0, [pc, #252]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 80052be:	f7fd fa04 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_TIM_Encoder_Init+0x14c>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Encoder_Init+0x14c>
 80052d2:	f640 31df 	movw	r1, #3039	; 0xbdf
 80052d6:	4839      	ldr	r0, [pc, #228]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 80052d8:	f7fd f9f7 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_TIM_Encoder_Init+0x166>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_Encoder_Init+0x166>
 80052ec:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 80052f0:	4832      	ldr	r0, [pc, #200]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 80052f2:	f7fd f9ea 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_TIM_Encoder_Init+0x190>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d00c      	beq.n	8005320 <HAL_TIM_Encoder_Init+0x190>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b08      	cmp	r3, #8
 800530c:	d008      	beq.n	8005320 <HAL_TIM_Encoder_Init+0x190>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d004      	beq.n	8005320 <HAL_TIM_Encoder_Init+0x190>
 8005316:	f640 31e1 	movw	r1, #3041	; 0xbe1
 800531a:	4828      	ldr	r0, [pc, #160]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 800531c:	f7fd f9d5 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_TIM_Encoder_Init+0x1ba>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d00c      	beq.n	800534a <HAL_TIM_Encoder_Init+0x1ba>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d008      	beq.n	800534a <HAL_TIM_Encoder_Init+0x1ba>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	d004      	beq.n	800534a <HAL_TIM_Encoder_Init+0x1ba>
 8005340:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8005344:	481d      	ldr	r0, [pc, #116]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 8005346:	f7fd f9c0 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d904      	bls.n	800535c <HAL_TIM_Encoder_Init+0x1cc>
 8005352:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8005356:	4819      	ldr	r0, [pc, #100]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 8005358:	f7fd f9b7 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d904      	bls.n	800536e <HAL_TIM_Encoder_Init+0x1de>
 8005364:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8005368:	4814      	ldr	r0, [pc, #80]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 800536a:	f7fd f9ae 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_TIM_Encoder_Init+0x1f0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537e:	d304      	bcc.n	800538a <HAL_TIM_Encoder_Init+0x1fa>
 8005380:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8005384:	480d      	ldr	r0, [pc, #52]	; (80053bc <HAL_TIM_Encoder_Init+0x22c>)
 8005386:	f7fd f9a0 	bl	80026ca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d114      	bne.n	80053c0 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fd fe26 	bl	8002ff0 <HAL_TIM_Encoder_MspInit>
 80053a4:	e00c      	b.n	80053c0 <HAL_TIM_Encoder_Init+0x230>
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	0800c2b8 	.word	0x0800c2b8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 ff18 	bl	800621c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	f023 0303 	bic.w	r3, r3, #3
 8005418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	4313      	orrs	r3, r2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005432:	f023 030c 	bic.w	r3, r3, #12
 8005436:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800543e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	4313      	orrs	r3, r2
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	011a      	lsls	r2, r3, #4
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	4313      	orrs	r3, r2
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005470:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4313      	orrs	r3, r2
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop

080054d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005500:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a4d      	ldr	r2, [pc, #308]	; (800563c <HAL_TIM_Encoder_Start+0x164>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01d      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a4b      	ldr	r2, [pc, #300]	; (8005640 <HAL_TIM_Encoder_Start+0x168>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d013      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a47      	ldr	r2, [pc, #284]	; (8005644 <HAL_TIM_Encoder_Start+0x16c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a46      	ldr	r2, [pc, #280]	; (8005648 <HAL_TIM_Encoder_Start+0x170>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a44      	ldr	r2, [pc, #272]	; (800564c <HAL_TIM_Encoder_Start+0x174>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_TIM_Encoder_Start+0x70>
 800553e:	f640 4195 	movw	r1, #3221	; 0xc95
 8005542:	4843      	ldr	r0, [pc, #268]	; (8005650 <HAL_TIM_Encoder_Start+0x178>)
 8005544:	f7fd f8c1 	bl	80026ca <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d110      	bne.n	8005570 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d102      	bne.n	800555a <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005554:	7b7b      	ldrb	r3, [r7, #13]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e069      	b.n	8005632 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556e:	e031      	b.n	80055d4 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d110      	bne.n	8005598 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800557c:	7b3b      	ldrb	r3, [r7, #12]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d001      	beq.n	8005586 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e055      	b.n	8005632 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005596:	e01d      	b.n	80055d4 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d108      	bne.n	80055b0 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055a4:	7b7b      	ldrb	r3, [r7, #13]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d102      	bne.n	80055b0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055aa:	7b3b      	ldrb	r3, [r7, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e03e      	b.n	8005632 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_Encoder_Start+0x10a>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d008      	beq.n	80055f2 <HAL_TIM_Encoder_Start+0x11a>
 80055e0:	e00f      	b.n	8005602 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f960 	bl	80068b0 <TIM_CCxChannelCmd>
      break;
 80055f0:	e016      	b.n	8005620 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2201      	movs	r2, #1
 80055f8:	2104      	movs	r1, #4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f958 	bl	80068b0 <TIM_CCxChannelCmd>
      break;
 8005600:	e00e      	b.n	8005620 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f950 	bl	80068b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	2104      	movs	r1, #4
 8005618:	4618      	mov	r0, r3
 800561a:	f001 f949 	bl	80068b0 <TIM_CCxChannelCmd>
      break;
 800561e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	0800c2b8 	.word	0x0800c2b8

08005654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0202 	mvn.w	r2, #2
 8005680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fda5 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fd98 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fda7 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0204 	mvn.w	r2, #4
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fd7b 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fd6e 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fd7d 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b08      	cmp	r3, #8
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0208 	mvn.w	r2, #8
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2204      	movs	r2, #4
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fd51 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fd44 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fd53 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0210 	mvn.w	r2, #16
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2208      	movs	r2, #8
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fd27 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fd1a 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd29 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0201 	mvn.w	r2, #1
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fe96 	bl	8002504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fa5b 	bl	8006cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fced 	bl	800620a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d10e      	bne.n	800585c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d107      	bne.n	800585c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0220 	mvn.w	r2, #32
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fa26 	bl	8006ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d010      	beq.n	800589c <HAL_TIM_PWM_ConfigChannel+0x38>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b04      	cmp	r3, #4
 800587e:	d00d      	beq.n	800589c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d00a      	beq.n	800589c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d007      	beq.n	800589c <HAL_TIM_PWM_ConfigChannel+0x38>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b3c      	cmp	r3, #60	; 0x3c
 8005890:	d004      	beq.n	800589c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005892:	f241 017e 	movw	r1, #4222	; 0x107e
 8005896:	4890      	ldr	r0, [pc, #576]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005898:	f7fc ff17 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d008      	beq.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b70      	cmp	r3, #112	; 0x70
 80058aa:	d004      	beq.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80058ac:	f241 017f 	movw	r1, #4223	; 0x107f
 80058b0:	4889      	ldr	r0, [pc, #548]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80058b2:	f7fc ff0a 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80058c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80058ca:	4883      	ldr	r0, [pc, #524]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80058cc:	f7fc fefd 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x86>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d004      	beq.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x86>
 80058e0:	f241 0181 	movw	r1, #4225	; 0x1081
 80058e4:	487c      	ldr	r0, [pc, #496]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80058e6:	f7fc fef0 	bl	80026ca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x94>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e147      	b.n	8005b88 <HAL_TIM_PWM_ConfigChannel+0x324>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	f200 8138 	bhi.w	8005b78 <HAL_TIM_PWM_ConfigChannel+0x314>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005945 	.word	0x08005945
 8005914:	08005b79 	.word	0x08005b79
 8005918:	08005b79 	.word	0x08005b79
 800591c:	08005b79 	.word	0x08005b79
 8005920:	080059cb 	.word	0x080059cb
 8005924:	08005b79 	.word	0x08005b79
 8005928:	08005b79 	.word	0x08005b79
 800592c:	08005b79 	.word	0x08005b79
 8005930:	08005a53 	.word	0x08005a53
 8005934:	08005b79 	.word	0x08005b79
 8005938:	08005b79 	.word	0x08005b79
 800593c:	08005b79 	.word	0x08005b79
 8005940:	08005af1 	.word	0x08005af1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a64      	ldr	r2, [pc, #400]	; (8005adc <HAL_TIM_PWM_ConfigChannel+0x278>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a63      	ldr	r2, [pc, #396]	; (8005ae0 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d013      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a5f      	ldr	r2, [pc, #380]	; (8005ae4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5d      	ldr	r2, [pc, #372]	; (8005ae8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5c      	ldr	r2, [pc, #368]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x288>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_TIM_PWM_ConfigChannel+0x126>
 8005980:	f241 018b 	movw	r1, #4235	; 0x108b
 8005984:	4854      	ldr	r0, [pc, #336]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005986:	f7fc fea0 	bl	80026ca <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fcbd 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0208 	orr.w	r2, r2, #8
 80059a4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0204 	bic.w	r2, r2, #4
 80059b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6999      	ldr	r1, [r3, #24]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]
      break;
 80059c8:	e0d9      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a43      	ldr	r2, [pc, #268]	; (8005adc <HAL_TIM_PWM_ConfigChannel+0x278>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a41      	ldr	r2, [pc, #260]	; (8005ae0 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d013      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3c      	ldr	r2, [pc, #240]	; (8005ae8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005a06:	f241 019c 	movw	r1, #4252	; 0x109c
 8005a0a:	4833      	ldr	r0, [pc, #204]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005a0c:	f7fc fe5d 	bl	80026ca <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fd14 	bl	8006444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	619a      	str	r2, [r3, #24]
      break;
 8005a50:	e095      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d01d      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d013      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005a8e:	f241 01ad 	movw	r1, #4269	; 0x10ad
 8005a92:	4811      	ldr	r0, [pc, #68]	; (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005a94:	f7fc fe19 	bl	80026ca <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fd6e 	bl	8006580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69d9      	ldr	r1, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	61da      	str	r2, [r3, #28]
      break;
 8005ad6:	e052      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005ad8:	0800c2b8 	.word	0x0800c2b8
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d013      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <HAL_TIM_PWM_ConfigChannel+0x338>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8005b2c:	f241 01be 	movw	r1, #4286	; 0x10be
 8005b30:	481c      	ldr	r0, [pc, #112]	; (8005ba4 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005b32:	f7fc fdca 	bl	80026ca <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fdbd 	bl	80066bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e002      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	0800c2b8 	.word	0x0800c2b8

08005ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e2f6      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x60a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d029      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b70      	cmp	r3, #112	; 0x70
 8005be4:	d025      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d020      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d01c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b50      	cmp	r3, #80	; 0x50
 8005bfe:	d018      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d014      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d00c      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d008      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d004      	beq.n	8005c32 <HAL_TIM_ConfigClockSource+0x8a>
 8005c28:	f241 41be 	movw	r1, #5310	; 0x14be
 8005c2c:	487c      	ldr	r0, [pc, #496]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005c2e:	f7fc fd4c 	bl	80026ca <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5a:	f000 80f1 	beq.w	8005e40 <HAL_TIM_ConfigClockSource+0x298>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	f200 8299 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d02d      	beq.n	8005cc8 <HAL_TIM_ConfigClockSource+0x120>
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	f200 8292 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d05d      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x18c>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	f200 828d 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005c7e:	2b60      	cmp	r3, #96	; 0x60
 8005c80:	f000 81a5 	beq.w	8005fce <HAL_TIM_ConfigClockSource+0x426>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	f200 8287 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005c8a:	2b50      	cmp	r3, #80	; 0x50
 8005c8c:	f000 8149 	beq.w	8005f22 <HAL_TIM_ConfigClockSource+0x37a>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	f200 8281 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	f000 81fc 	beq.w	8006094 <HAL_TIM_ConfigClockSource+0x4ec>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	f200 827b 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005ca2:	2b30      	cmp	r3, #48	; 0x30
 8005ca4:	f000 824c 	beq.w	8006140 <HAL_TIM_ConfigClockSource+0x598>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	f200 8275 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	f000 8246 	beq.w	8006140 <HAL_TIM_ConfigClockSource+0x598>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	f200 826f 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8240 	beq.w	8006140 <HAL_TIM_ConfigClockSource+0x598>
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	f000 823d 	beq.w	8006140 <HAL_TIM_ConfigClockSource+0x598>
 8005cc6:	e267      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a55      	ldr	r2, [pc, #340]	; (8005e24 <HAL_TIM_ConfigClockSource+0x27c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 8265 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a53      	ldr	r2, [pc, #332]	; (8005e28 <HAL_TIM_ConfigClockSource+0x280>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	f000 825f 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	f000 8259 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <HAL_TIM_ConfigClockSource+0x284>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	f000 8253 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a4c      	ldr	r2, [pc, #304]	; (8005e30 <HAL_TIM_ConfigClockSource+0x288>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f000 824d 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a4a      	ldr	r2, [pc, #296]	; (8005e34 <HAL_TIM_ConfigClockSource+0x28c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f000 8247 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a48      	ldr	r2, [pc, #288]	; (8005e38 <HAL_TIM_ConfigClockSource+0x290>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 8241 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a46      	ldr	r2, [pc, #280]	; (8005e3c <HAL_TIM_ConfigClockSource+0x294>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 823b 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x5f6>
 8005d28:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8005d2c:	483c      	ldr	r0, [pc, #240]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005d2e:	f7fc fccc 	bl	80026ca <assert_failed>
      break;
 8005d32:	e234      	b.n	800619e <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <HAL_TIM_ConfigClockSource+0x27c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <HAL_TIM_ConfigClockSource+0x280>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d013      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a35      	ldr	r2, [pc, #212]	; (8005e2c <HAL_TIM_ConfigClockSource+0x284>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a33      	ldr	r2, [pc, #204]	; (8005e30 <HAL_TIM_ConfigClockSource+0x288>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a32      	ldr	r2, [pc, #200]	; (8005e34 <HAL_TIM_ConfigClockSource+0x28c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1d2>
 8005d70:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8005d74:	482a      	ldr	r0, [pc, #168]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005d76:	f7fc fca8 	bl	80026ca <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d013      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x202>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x202>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d94:	d009      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x202>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d9e:	d004      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x202>
 8005da0:	f241 41d4 	movw	r1, #5332	; 0x14d4
 8005da4:	481e      	ldr	r0, [pc, #120]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005da6:	f7fc fc90 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d014      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x236>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x236>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x236>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d008      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x236>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b0a      	cmp	r3, #10
 8005dd2:	d004      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x236>
 8005dd4:	f241 41d5 	movw	r1, #5333	; 0x14d5
 8005dd8:	4811      	ldr	r0, [pc, #68]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005dda:	f7fc fc76 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d904      	bls.n	8005df0 <HAL_TIM_ConfigClockSource+0x248>
 8005de6:	f241 41d6 	movw	r1, #5334	; 0x14d6
 8005dea:	480d      	ldr	r0, [pc, #52]	; (8005e20 <HAL_TIM_ConfigClockSource+0x278>)
 8005dec:	f7fc fc6d 	bl	80026ca <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	f000 fd37 	bl	8006872 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
      break;
 8005e1c:	e1c0      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
 8005e1e:	bf00      	nop
 8005e20:	0800c2b8 	.word	0x0800c2b8
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40001000 	.word	0x40001000
 8005e3c:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a8d      	ldr	r2, [pc, #564]	; (800607c <HAL_TIM_ConfigClockSource+0x4d4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a8c      	ldr	r2, [pc, #560]	; (8006080 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a88      	ldr	r2, [pc, #544]	; (8006084 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a86      	ldr	r2, [pc, #536]	; (8006088 <HAL_TIM_ConfigClockSource+0x4e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a85      	ldr	r2, [pc, #532]	; (800608c <HAL_TIM_ConfigClockSource+0x4e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x2de>
 8005e7c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8005e80:	4883      	ldr	r0, [pc, #524]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005e82:	f7fc fc22 	bl	80026ca <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x30e>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x30e>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x30e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x30e>
 8005eac:	f241 41ec 	movw	r1, #5356	; 0x14ec
 8005eb0:	4877      	ldr	r0, [pc, #476]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005eb2:	f7fc fc0a 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebe:	d014      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x342>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x342>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x342>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d008      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x342>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b0a      	cmp	r3, #10
 8005ede:	d004      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x342>
 8005ee0:	f241 41ed 	movw	r1, #5357	; 0x14ed
 8005ee4:	486a      	ldr	r0, [pc, #424]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005ee6:	f7fc fbf0 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d904      	bls.n	8005efc <HAL_TIM_ConfigClockSource+0x354>
 8005ef2:	f241 41ee 	movw	r1, #5358	; 0x14ee
 8005ef6:	4866      	ldr	r0, [pc, #408]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005ef8:	f7fc fbe7 	bl	80026ca <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	f000 fcb1 	bl	8006872 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1e:	609a      	str	r2, [r3, #8]
      break;
 8005f20:	e13e      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a55      	ldr	r2, [pc, #340]	; (800607c <HAL_TIM_ConfigClockSource+0x4d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d01d      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a53      	ldr	r2, [pc, #332]	; (8006080 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d018      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d013      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a4f      	ldr	r2, [pc, #316]	; (8006084 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00e      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4e      	ldr	r2, [pc, #312]	; (8006088 <HAL_TIM_ConfigClockSource+0x4e0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d009      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a4c      	ldr	r2, [pc, #304]	; (800608c <HAL_TIM_ConfigClockSource+0x4e4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x3c0>
 8005f5e:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8005f62:	484b      	ldr	r0, [pc, #300]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005f64:	f7fc fbb1 	bl	80026ca <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f70:	d014      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x3f4>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d010      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x3f4>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00c      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x3f4>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d008      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x3f4>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b0a      	cmp	r3, #10
 8005f90:	d004      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x3f4>
 8005f92:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8005f96:	483e      	ldr	r0, [pc, #248]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005f98:	f7fc fb97 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	2b0f      	cmp	r3, #15
 8005fa2:	d904      	bls.n	8005fae <HAL_TIM_ConfigClockSource+0x406>
 8005fa4:	f241 5101 	movw	r1, #5377	; 0x1501
 8005fa8:	4839      	ldr	r0, [pc, #228]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8005faa:	f7fc fb8e 	bl	80026ca <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 fbe2 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2150      	movs	r1, #80	; 0x50
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fc39 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e0e8      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_TIM_ConfigClockSource+0x4d4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01d      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <HAL_TIM_ConfigClockSource+0x4d8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d013      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a24      	ldr	r2, [pc, #144]	; (8006084 <HAL_TIM_ConfigClockSource+0x4dc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a23      	ldr	r2, [pc, #140]	; (8006088 <HAL_TIM_ConfigClockSource+0x4e0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a21      	ldr	r2, [pc, #132]	; (800608c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_TIM_ConfigClockSource+0x46c>
 800600a:	f241 510d 	movw	r1, #5389	; 0x150d
 800600e:	4820      	ldr	r0, [pc, #128]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006010:	f7fc fb5b 	bl	80026ca <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601c:	d014      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x4a0>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d010      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x4a0>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x4a0>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d008      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x4a0>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b0a      	cmp	r3, #10
 800603c:	d004      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x4a0>
 800603e:	f241 5110 	movw	r1, #5392	; 0x1510
 8006042:	4813      	ldr	r0, [pc, #76]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006044:	f7fc fb41 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d904      	bls.n	800605a <HAL_TIM_ConfigClockSource+0x4b2>
 8006050:	f241 5111 	movw	r1, #5393	; 0x1511
 8006054:	480e      	ldr	r0, [pc, #56]	; (8006090 <HAL_TIM_ConfigClockSource+0x4e8>)
 8006056:	f7fc fb38 	bl	80026ca <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 fbba 	bl	80067e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2160      	movs	r1, #96	; 0x60
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fbe3 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006078:	e092      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00
 8006090:	0800c2b8 	.word	0x0800c2b8
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a48      	ldr	r2, [pc, #288]	; (80061bc <HAL_TIM_ConfigClockSource+0x614>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01d      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a47      	ldr	r2, [pc, #284]	; (80061c0 <HAL_TIM_ConfigClockSource+0x618>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d013      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a43      	ldr	r2, [pc, #268]	; (80061c4 <HAL_TIM_ConfigClockSource+0x61c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a41      	ldr	r2, [pc, #260]	; (80061c8 <HAL_TIM_ConfigClockSource+0x620>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a40      	ldr	r2, [pc, #256]	; (80061cc <HAL_TIM_ConfigClockSource+0x624>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x532>
 80060d0:	f241 511d 	movw	r1, #5405	; 0x151d
 80060d4:	483e      	ldr	r0, [pc, #248]	; (80061d0 <HAL_TIM_ConfigClockSource+0x628>)
 80060d6:	f7fc faf8 	bl	80026ca <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e2:	d014      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x566>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x566>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x566>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d008      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x566>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b0a      	cmp	r3, #10
 8006102:	d004      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x566>
 8006104:	f44f 51a9 	mov.w	r1, #5408	; 0x1520
 8006108:	4831      	ldr	r0, [pc, #196]	; (80061d0 <HAL_TIM_ConfigClockSource+0x628>)
 800610a:	f7fc fade 	bl	80026ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d904      	bls.n	8006120 <HAL_TIM_ConfigClockSource+0x578>
 8006116:	f241 5121 	movw	r1, #5409	; 0x1521
 800611a:	482d      	ldr	r0, [pc, #180]	; (80061d0 <HAL_TIM_ConfigClockSource+0x628>)
 800611c:	f7fc fad5 	bl	80026ca <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612c:	461a      	mov	r2, r3
 800612e:	f000 fb29 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2140      	movs	r1, #64	; 0x40
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fb80 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 800613e:	e02f      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <HAL_TIM_ConfigClockSource+0x614>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_TIM_ConfigClockSource+0x618>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d013      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIM_ConfigClockSource+0x61c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <HAL_TIM_ConfigClockSource+0x620>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_TIM_ConfigClockSource+0x624>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x5de>
 800617c:	f241 5130 	movw	r1, #5424	; 0x1530
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <HAL_TIM_ConfigClockSource+0x628>)
 8006182:	f7fc faa2 	bl	80026ca <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 fb54 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006196:	e003      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e000      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 800619e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40013400 	.word	0x40013400
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	0800c2b8 	.word	0x0800c2b8

080061d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a33      	ldr	r2, [pc, #204]	; (80062fc <TIM_Base_SetConfig+0xe0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <TIM_Base_SetConfig+0xe4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a2f      	ldr	r2, [pc, #188]	; (8006304 <TIM_Base_SetConfig+0xe8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a2e      	ldr	r2, [pc, #184]	; (8006308 <TIM_Base_SetConfig+0xec>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a2d      	ldr	r2, [pc, #180]	; (800630c <TIM_Base_SetConfig+0xf0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <TIM_Base_SetConfig+0xe0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <TIM_Base_SetConfig+0x82>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a21      	ldr	r2, [pc, #132]	; (8006300 <TIM_Base_SetConfig+0xe4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_Base_SetConfig+0x82>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0x82>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <TIM_Base_SetConfig+0xe8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <TIM_Base_SetConfig+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0x82>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <TIM_Base_SetConfig+0xf0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <TIM_Base_SetConfig+0xe0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0xc8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a08      	ldr	r2, [pc, #32]	; (8006300 <TIM_Base_SetConfig+0xe4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d103      	bne.n	80062ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	615a      	str	r2, [r3, #20]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40013400 	.word	0x40013400
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0201 	bic.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a34      	ldr	r2, [pc, #208]	; (8006438 <TIM_OC1_SetConfig+0x128>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC1_SetConfig+0x64>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a33      	ldr	r2, [pc, #204]	; (800643c <TIM_OC1_SetConfig+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d119      	bne.n	80063a8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <TIM_OC1_SetConfig+0x7e>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d004      	beq.n	800638e <TIM_OC1_SetConfig+0x7e>
 8006384:	f641 21c4 	movw	r1, #6852	; 0x1ac4
 8006388:	482d      	ldr	r0, [pc, #180]	; (8006440 <TIM_OC1_SetConfig+0x130>)
 800638a:	f7fc f99e 	bl	80026ca <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 0308 	bic.w	r3, r3, #8
 8006394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0304 	bic.w	r3, r3, #4
 80063a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a23      	ldr	r2, [pc, #140]	; (8006438 <TIM_OC1_SetConfig+0x128>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC1_SetConfig+0xa8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a22      	ldr	r2, [pc, #136]	; (800643c <TIM_OC1_SetConfig+0x12c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d12d      	bne.n	8006414 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d008      	beq.n	80063d4 <TIM_OC1_SetConfig+0xc4>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <TIM_OC1_SetConfig+0xc4>
 80063ca:	f641 21d1 	movw	r1, #6865	; 0x1ad1
 80063ce:	481c      	ldr	r0, [pc, #112]	; (8006440 <TIM_OC1_SetConfig+0x130>)
 80063d0:	f7fc f97b 	bl	80026ca <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063dc:	d008      	beq.n	80063f0 <TIM_OC1_SetConfig+0xe0>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <TIM_OC1_SetConfig+0xe0>
 80063e6:	f641 21d2 	movw	r1, #6866	; 0x1ad2
 80063ea:	4815      	ldr	r0, [pc, #84]	; (8006440 <TIM_OC1_SetConfig+0x130>)
 80063ec:	f7fc f96d 	bl	80026ca <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	0800c2b8 	.word	0x0800c2b8

08006444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f023 0210 	bic.w	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0320 	bic.w	r3, r3, #32
 800648e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a35      	ldr	r2, [pc, #212]	; (8006574 <TIM_OC2_SetConfig+0x130>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC2_SetConfig+0x68>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a34      	ldr	r2, [pc, #208]	; (8006578 <TIM_OC2_SetConfig+0x134>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d11a      	bne.n	80064e2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <TIM_OC2_SetConfig+0x82>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d004      	beq.n	80064c6 <TIM_OC2_SetConfig+0x82>
 80064bc:	f641 3110 	movw	r1, #6928	; 0x1b10
 80064c0:	482e      	ldr	r0, [pc, #184]	; (800657c <TIM_OC2_SetConfig+0x138>)
 80064c2:	f7fc f902 	bl	80026ca <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <TIM_OC2_SetConfig+0x130>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC2_SetConfig+0xae>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a22      	ldr	r2, [pc, #136]	; (8006578 <TIM_OC2_SetConfig+0x134>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d12f      	bne.n	8006552 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fa:	d008      	beq.n	800650e <TIM_OC2_SetConfig+0xca>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <TIM_OC2_SetConfig+0xca>
 8006504:	f641 311e 	movw	r1, #6942	; 0x1b1e
 8006508:	481c      	ldr	r0, [pc, #112]	; (800657c <TIM_OC2_SetConfig+0x138>)
 800650a:	f7fc f8de 	bl	80026ca <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d008      	beq.n	800652a <TIM_OC2_SetConfig+0xe6>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <TIM_OC2_SetConfig+0xe6>
 8006520:	f641 311f 	movw	r1, #6943	; 0x1b1f
 8006524:	4815      	ldr	r0, [pc, #84]	; (800657c <TIM_OC2_SetConfig+0x138>)
 8006526:	f7fc f8d0 	bl	80026ca <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	bf00      	nop
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	0800c2b8 	.word	0x0800c2b8

08006580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <TIM_OC3_SetConfig+0x130>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0x66>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a34      	ldr	r2, [pc, #208]	; (80066b4 <TIM_OC3_SetConfig+0x134>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d11a      	bne.n	800661c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <TIM_OC3_SetConfig+0x80>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d004      	beq.n	8006600 <TIM_OC3_SetConfig+0x80>
 80065f6:	f641 315c 	movw	r1, #7004	; 0x1b5c
 80065fa:	482f      	ldr	r0, [pc, #188]	; (80066b8 <TIM_OC3_SetConfig+0x138>)
 80065fc:	f7fc f865 	bl	80026ca <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <TIM_OC3_SetConfig+0x130>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC3_SetConfig+0xac>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a23      	ldr	r2, [pc, #140]	; (80066b4 <TIM_OC3_SetConfig+0x134>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d12f      	bne.n	800668c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d008      	beq.n	8006648 <TIM_OC3_SetConfig+0xc8>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <TIM_OC3_SetConfig+0xc8>
 800663e:	f641 3169 	movw	r1, #7017	; 0x1b69
 8006642:	481d      	ldr	r0, [pc, #116]	; (80066b8 <TIM_OC3_SetConfig+0x138>)
 8006644:	f7fc f841 	bl	80026ca <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006650:	d008      	beq.n	8006664 <TIM_OC3_SetConfig+0xe4>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <TIM_OC3_SetConfig+0xe4>
 800665a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 800665e:	4816      	ldr	r0, [pc, #88]	; (80066b8 <TIM_OC3_SetConfig+0x138>)
 8006660:	f7fc f833 	bl	80026ca <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	0800c2b8 	.word	0x0800c2b8

080066bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a18      	ldr	r2, [pc, #96]	; (8006778 <TIM_OC4_SetConfig+0xbc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC4_SetConfig+0x68>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a17      	ldr	r2, [pc, #92]	; (800677c <TIM_OC4_SetConfig+0xc0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d117      	bne.n	8006754 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672c:	d008      	beq.n	8006740 <TIM_OC4_SetConfig+0x84>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <TIM_OC4_SetConfig+0x84>
 8006736:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 800673a:	4811      	ldr	r0, [pc, #68]	; (8006780 <TIM_OC4_SetConfig+0xc4>)
 800673c:	f7fb ffc5 	bl	80026ca <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400
 8006780:	0800c2b8 	.word	0x0800c2b8

08006784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 030a 	bic.w	r3, r3, #10
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0210 	bic.w	r2, r3, #16
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800680a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	031b      	lsls	r3, r3, #12
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800681c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	f043 0307 	orr.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006872:	b480      	push	{r7}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	021a      	lsls	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	431a      	orrs	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4313      	orrs	r3, r2
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	609a      	str	r2, [r3, #8]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a26      	ldr	r2, [pc, #152]	; (8006958 <TIM_CCxChannelCmd+0xa8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a25      	ldr	r2, [pc, #148]	; (800695c <TIM_CCxChannelCmd+0xac>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d014      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d010      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <TIM_CCxChannelCmd+0xb0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00c      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a21      	ldr	r2, [pc, #132]	; (8006964 <TIM_CCxChannelCmd+0xb4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d008      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a20      	ldr	r2, [pc, #128]	; (8006968 <TIM_CCxChannelCmd+0xb8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <TIM_CCxChannelCmd+0x46>
 80068ec:	f641 5192 	movw	r1, #7570	; 0x1d92
 80068f0:	481e      	ldr	r0, [pc, #120]	; (800696c <TIM_CCxChannelCmd+0xbc>)
 80068f2:	f7fb feea 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <TIM_CCxChannelCmd+0x6e>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d00d      	beq.n	800691e <TIM_CCxChannelCmd+0x6e>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d00a      	beq.n	800691e <TIM_CCxChannelCmd+0x6e>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d007      	beq.n	800691e <TIM_CCxChannelCmd+0x6e>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b3c      	cmp	r3, #60	; 0x3c
 8006912:	d004      	beq.n	800691e <TIM_CCxChannelCmd+0x6e>
 8006914:	f641 5193 	movw	r1, #7571	; 0x1d93
 8006918:	4814      	ldr	r0, [pc, #80]	; (800696c <TIM_CCxChannelCmd+0xbc>)
 800691a:	f7fb fed6 	bl	80026ca <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2201      	movs	r2, #1
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	43db      	mvns	r3, r3
 8006934:	401a      	ands	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1a      	ldr	r2, [r3, #32]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	fa01 f303 	lsl.w	r3, r1, r3
 800694a:	431a      	orrs	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	0800c2b8 	.word	0x0800c2b8

08006970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a5c      	ldr	r2, [pc, #368]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d027      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5a      	ldr	r2, [pc, #360]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d022      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d01d      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a56      	ldr	r2, [pc, #344]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d018      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a55      	ldr	r2, [pc, #340]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a53      	ldr	r2, [pc, #332]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00e      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a52      	ldr	r2, [pc, #328]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d009      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a50      	ldr	r2, [pc, #320]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80069ca:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80069ce:	484f      	ldr	r0, [pc, #316]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80069d0:	f7fb fe7b 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d020      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d01c      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d018      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	d014      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d010      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b50      	cmp	r3, #80	; 0x50
 8006a02:	d00c      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b60      	cmp	r3, #96	; 0x60
 8006a0a:	d008      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d004      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006a14:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8006a18:	483c      	ldr	r0, [pc, #240]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006a1a:	f7fb fe56 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d008      	beq.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a2e:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8006a32:	4836      	ldr	r0, [pc, #216]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006a34:	f7fb fe49 	bl	80026ca <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e050      	b.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d018      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9c:	d00e      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10c      	bne.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40013400 	.word	0x40013400
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40001000 	.word	0x40001000
 8006b08:	40001400 	.word	0x40001400
 8006b0c:	0800c2f0 	.word	0x0800c2f0

08006b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5e      	ldr	r2, [pc, #376]	; (8006c9c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5c      	ldr	r2, [pc, #368]	; (8006ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8006b32:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8006b36:	485b      	ldr	r0, [pc, #364]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b38:	f7fb fdc7 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b44:	d008      	beq.n	8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8006b4e:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8006b52:	4854      	ldr	r0, [pc, #336]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b54:	f7fb fdb9 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	d008      	beq.n	8006b74 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8006b6a:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8006b6e:	484d      	ldr	r0, [pc, #308]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006b70:	f7fb fdab 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b84:	d00e      	beq.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8e:	d009      	beq.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b98:	d004      	beq.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8006b9a:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8006b9e:	4841      	ldr	r0, [pc, #260]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006ba0:	f7fb fd93 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2bff      	cmp	r3, #255	; 0xff
 8006baa:	d904      	bls.n	8006bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8006bac:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8006bb0:	483c      	ldr	r0, [pc, #240]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006bb2:	f7fb fd8a 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbe:	d008      	beq.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006bc8:	f240 71f6 	movw	r1, #2038	; 0x7f6
 8006bcc:	4835      	ldr	r0, [pc, #212]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006bce:	f7fb fd7c 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006be4:	f240 71f7 	movw	r1, #2039	; 0x7f7
 8006be8:	482e      	ldr	r0, [pc, #184]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006bea:	f7fb fd6e 	bl	80026ca <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf6:	d008      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006c00:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8006c04:	4827      	ldr	r0, [pc, #156]	; (8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8006c06:	f7fb fd60 	bl	80026ca <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e03d      	b.n	8006c94 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	0800c2f0 	.word	0x0800c2f0

08006ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e09f      	b.n	8006e1e <HAL_UART_Init+0x152>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d02c      	beq.n	8006d40 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4f      	ldr	r2, [pc, #316]	; (8006e28 <HAL_UART_Init+0x15c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <HAL_UART_Init+0x42>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a4d      	ldr	r2, [pc, #308]	; (8006e2c <HAL_UART_Init+0x160>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_UART_Init+0x42>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a4c      	ldr	r2, [pc, #304]	; (8006e30 <HAL_UART_Init+0x164>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_UART_Init+0x42>
 8006d04:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006d08:	484a      	ldr	r0, [pc, #296]	; (8006e34 <HAL_UART_Init+0x168>)
 8006d0a:	f7fb fcde 	bl	80026ca <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d032      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1e:	d02d      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d028      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d32:	d023      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d34:	f240 116f 	movw	r1, #367	; 0x16f
 8006d38:	483e      	ldr	r0, [pc, #248]	; (8006e34 <HAL_UART_Init+0x168>)
 8006d3a:	f7fb fcc6 	bl	80026ca <assert_failed>
 8006d3e:	e01d      	b.n	8006d7c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a38      	ldr	r2, [pc, #224]	; (8006e28 <HAL_UART_Init+0x15c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a37      	ldr	r2, [pc, #220]	; (8006e2c <HAL_UART_Init+0x160>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a35      	ldr	r2, [pc, #212]	; (8006e30 <HAL_UART_Init+0x164>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <HAL_UART_Init+0x16c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <HAL_UART_Init+0x170>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_UART_Init+0xb0>
 8006d72:	f240 1173 	movw	r1, #371	; 0x173
 8006d76:	482f      	ldr	r0, [pc, #188]	; (8006e34 <HAL_UART_Init+0x168>)
 8006d78:	f7fb fca7 	bl	80026ca <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <HAL_UART_Init+0xcc>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	d004      	beq.n	8006d98 <HAL_UART_Init+0xcc>
 8006d8e:	f240 1175 	movw	r1, #373	; 0x175
 8006d92:	4828      	ldr	r0, [pc, #160]	; (8006e34 <HAL_UART_Init+0x168>)
 8006d94:	f7fb fc99 	bl	80026ca <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fc fc17 	bl	80035e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	; 0x24
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f92a 	bl	8007024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40013800 	.word	0x40013800
 8006e2c:	40004400 	.word	0x40004400
 8006e30:	40004800 	.word	0x40004800
 8006e34:	0800c32c 	.word	0x0800c32c
 8006e38:	40004c00 	.word	0x40004c00
 8006e3c:	40005000 	.word	0x40005000

08006e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d16d      	bne.n	8006f3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_UART_Transmit+0x2c>
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e066      	b.n	8006f3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2221      	movs	r2, #33	; 0x21
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7e:	f7fc fc79 	bl	8003774 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d108      	bne.n	8006eac <HAL_UART_Transmit+0x6c>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	e003      	b.n	8006eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006eb4:	e02a      	b.n	8006f0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f840 	bl	8006f46 <UART_WaitOnFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e036      	b.n	8006f3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3302      	adds	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e007      	b.n	8006efe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1cf      	bne.n	8006eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f810 	bl	8006f46 <UART_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e000      	b.n	8006f3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b090      	sub	sp, #64	; 0x40
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f56:	e050      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d04c      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f66:	f7fc fc05 	bl	8003774 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d241      	bcs.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f96:	637a      	str	r2, [r7, #52]	; 0x34
 8006f98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e5      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fca:	623a      	str	r2, [r7, #32]
 8006fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	69f9      	ldr	r1, [r7, #28]
 8006fd0:	6a3a      	ldr	r2, [r7, #32]
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e00f      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d09f      	beq.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3740      	adds	r7, #64	; 0x40
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a5f      	ldr	r2, [pc, #380]	; (80071b0 <UART_SetConfig+0x18c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d904      	bls.n	8007040 <UART_SetConfig+0x1c>
 8007036:	f640 6166 	movw	r1, #3686	; 0xe66
 800703a:	485e      	ldr	r0, [pc, #376]	; (80071b4 <UART_SetConfig+0x190>)
 800703c:	f7fb fb45 	bl	80026ca <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <UART_SetConfig+0x38>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007050:	d004      	beq.n	800705c <UART_SetConfig+0x38>
 8007052:	f640 6167 	movw	r1, #3687	; 0xe67
 8007056:	4857      	ldr	r0, [pc, #348]	; (80071b4 <UART_SetConfig+0x190>)
 8007058:	f7fb fb37 	bl	80026ca <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00e      	beq.n	8007082 <UART_SetConfig+0x5e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706c:	d009      	beq.n	8007082 <UART_SetConfig+0x5e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007076:	d004      	beq.n	8007082 <UART_SetConfig+0x5e>
 8007078:	f640 6168 	movw	r1, #3688	; 0xe68
 800707c:	484d      	ldr	r0, [pc, #308]	; (80071b4 <UART_SetConfig+0x190>)
 800707e:	f7fb fb24 	bl	80026ca <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695a      	ldr	r2, [r3, #20]
 8007086:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <UART_SetConfig+0x74>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <UART_SetConfig+0x7e>
 8007098:	f640 6169 	movw	r1, #3689	; 0xe69
 800709c:	4845      	ldr	r0, [pc, #276]	; (80071b4 <UART_SetConfig+0x190>)
 800709e:	f7fb fb14 	bl	80026ca <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80070d4:	f023 030c 	bic.w	r3, r3, #12
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	430b      	orrs	r3, r1
 80070e0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a2e      	ldr	r2, [pc, #184]	; (80071b8 <UART_SetConfig+0x194>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d103      	bne.n	800710a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007102:	f7fd fca7 	bl	8004a54 <HAL_RCC_GetPCLK2Freq>
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	e002      	b.n	8007110 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800710a:	f7fd fc8f 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 800710e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009a      	lsls	r2, r3, #2
 800711a:	441a      	add	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	fbb2 f3f3 	udiv	r3, r2, r3
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <UART_SetConfig+0x198>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	0119      	lsls	r1, r3, #4
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009a      	lsls	r2, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	fbb2 f2f3 	udiv	r2, r2, r3
 8007146:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <UART_SetConfig+0x198>)
 8007148:	fba3 0302 	umull	r0, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2064      	movs	r0, #100	; 0x64
 8007150:	fb00 f303 	mul.w	r3, r0, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <UART_SetConfig+0x198>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007166:	4419      	add	r1, r3
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009a      	lsls	r2, r3, #2
 8007172:	441a      	add	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	fbb2 f2f3 	udiv	r2, r2, r3
 800717e:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <UART_SetConfig+0x198>)
 8007180:	fba3 0302 	umull	r0, r3, r3, r2
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	2064      	movs	r0, #100	; 0x64
 8007188:	fb00 f303 	mul.w	r3, r0, r3
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	3332      	adds	r3, #50	; 0x32
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <UART_SetConfig+0x198>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	f003 020f 	and.w	r2, r3, #15
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	440a      	add	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	0044aa20 	.word	0x0044aa20
 80071b4:	0800c32c 	.word	0x0800c32c
 80071b8:	40013800 	.word	0x40013800
 80071bc:	51eb851f 	.word	0x51eb851f

080071c0 <LL_GPIO_SetPinMode>:
{
 80071c0:	b490      	push	{r4, r7}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	0e1b      	lsrs	r3, r3, #24
 80071d4:	4413      	add	r3, r2
 80071d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	fa93 f3a3 	rbit	r3, r3
 80071e4:	613b      	str	r3, [r7, #16]
  return result;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	fab3 f383 	clz	r3, r3
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	210f      	movs	r1, #15
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	401a      	ands	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	fa93 f3a3 	rbit	r3, r3
 8007204:	61bb      	str	r3, [r7, #24]
  return result;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	fab3 f383 	clz	r3, r3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	6023      	str	r3, [r4, #0]
}
 800721a:	bf00      	nop
 800721c:	3720      	adds	r7, #32
 800721e:	46bd      	mov	sp, r7
 8007220:	bc90      	pop	{r4, r7}
 8007222:	4770      	bx	lr

08007224 <LL_GPIO_SetPinSpeed>:
{
 8007224:	b490      	push	{r4, r7}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	461a      	mov	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	0e1b      	lsrs	r3, r3, #24
 8007238:	4413      	add	r3, r2
 800723a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	fa93 f3a3 	rbit	r3, r3
 8007248:	613b      	str	r3, [r7, #16]
  return result;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	fab3 f383 	clz	r3, r3
 8007250:	b2db      	uxtb	r3, r3
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	2103      	movs	r1, #3
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	43db      	mvns	r3, r3
 800725c:	401a      	ands	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	fa93 f3a3 	rbit	r3, r3
 8007268:	61bb      	str	r3, [r7, #24]
  return result;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	fab3 f383 	clz	r3, r3
 8007270:	b2db      	uxtb	r3, r3
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	6023      	str	r3, [r4, #0]
}
 800727e:	bf00      	nop
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bc90      	pop	{r4, r7}
 8007286:	4770      	bx	lr

08007288 <LL_GPIO_SetPinOutputType>:
{
 8007288:	b490      	push	{r4, r7}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	4413      	add	r3, r2
 800729e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	fa93 f3a3 	rbit	r3, r3
 80072ac:	613b      	str	r3, [r7, #16]
  return result;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	fab3 f383 	clz	r3, r3
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	2104      	movs	r1, #4
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	43db      	mvns	r3, r3
 80072c0:	401a      	ands	r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	fa93 f3a3 	rbit	r3, r3
 80072cc:	61bb      	str	r3, [r7, #24]
  return result;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	fab3 f383 	clz	r3, r3
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	fa01 f303 	lsl.w	r3, r1, r3
 80072de:	4313      	orrs	r3, r2
 80072e0:	6023      	str	r3, [r4, #0]
}
 80072e2:	bf00      	nop
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc90      	pop	{r4, r7}
 80072ea:	4770      	bx	lr

080072ec <LL_GPIO_SetPinPull>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	43db      	mvns	r3, r3
 8007302:	401a      	ands	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	fa93 f3a3 	rbit	r3, r3
 8007310:	613b      	str	r3, [r7, #16]
  return result;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	fab3 f383 	clz	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	408b      	lsls	r3, r1
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	60da      	str	r2, [r3, #12]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a68      	ldr	r2, [pc, #416]	; (80074e0 <LL_GPIO_Init+0x1b0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01b      	beq.n	800737a <LL_GPIO_Init+0x4a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a67      	ldr	r2, [pc, #412]	; (80074e4 <LL_GPIO_Init+0x1b4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d017      	beq.n	800737a <LL_GPIO_Init+0x4a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a66      	ldr	r2, [pc, #408]	; (80074e8 <LL_GPIO_Init+0x1b8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <LL_GPIO_Init+0x4a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a65      	ldr	r2, [pc, #404]	; (80074ec <LL_GPIO_Init+0x1bc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00f      	beq.n	800737a <LL_GPIO_Init+0x4a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a64      	ldr	r2, [pc, #400]	; (80074f0 <LL_GPIO_Init+0x1c0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00b      	beq.n	800737a <LL_GPIO_Init+0x4a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a63      	ldr	r2, [pc, #396]	; (80074f4 <LL_GPIO_Init+0x1c4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <LL_GPIO_Init+0x4a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a62      	ldr	r2, [pc, #392]	; (80074f8 <LL_GPIO_Init+0x1c8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <LL_GPIO_Init+0x4a>
 8007372:	21a2      	movs	r1, #162	; 0xa2
 8007374:	4861      	ldr	r0, [pc, #388]	; (80074fc <LL_GPIO_Init+0x1cc>)
 8007376:	f7fb f9a8 	bl	80026ca <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <LL_GPIO_Init+0x62>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <LL_GPIO_Init+0x6a>
 8007392:	21a3      	movs	r1, #163	; 0xa3
 8007394:	4859      	ldr	r0, [pc, #356]	; (80074fc <LL_GPIO_Init+0x1cc>)
 8007396:	f7fb f998 	bl	80026ca <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	60fb      	str	r3, [r7, #12]
  return result;
 80073b0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80073b2:	fab3 f383 	clz	r3, r3
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80073ba:	e084      	b.n	80074c6 <LL_GPIO_Init+0x196>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80073bc:	2201      	movs	r2, #1
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	409a      	lsls	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d07a      	beq.n	80074c0 <LL_GPIO_Init+0x190>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	d806      	bhi.n	80073de <LL_GPIO_Init+0xae>
      {
        currentpin = (0x00000101uL << pinpos);
 80073d0:	f240 1201 	movw	r2, #257	; 0x101
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e008      	b.n	80073f0 <LL_GPIO_Init+0xc0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	3b08      	subs	r3, #8
 80073e2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ee:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d112      	bne.n	800741e <LL_GPIO_Init+0xee>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <LL_GPIO_Init+0xe0>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d003      	beq.n	8007410 <LL_GPIO_Init+0xe0>
 8007408:	21be      	movs	r1, #190	; 0xbe
 800740a:	483c      	ldr	r0, [pc, #240]	; (80074fc <LL_GPIO_Init+0x1cc>)
 800740c:	f7fb f95d 	bl	80026ca <assert_failed>

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	461a      	mov	r2, r3
 8007416:	69b9      	ldr	r1, [r7, #24]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ff67 	bl	80072ec <LL_GPIO_SetPinPull>
      }
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d013      	beq.n	800744e <LL_GPIO_Init+0x11e>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d00f      	beq.n	800744e <LL_GPIO_Init+0x11e>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b08      	cmp	r3, #8
 8007434:	d00b      	beq.n	800744e <LL_GPIO_Init+0x11e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d007      	beq.n	800744e <LL_GPIO_Init+0x11e>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b09      	cmp	r3, #9
 8007444:	d003      	beq.n	800744e <LL_GPIO_Init+0x11e>
 8007446:	21c5      	movs	r1, #197	; 0xc5
 8007448:	482c      	ldr	r0, [pc, #176]	; (80074fc <LL_GPIO_Init+0x1cc>)
 800744a:	f7fb f93e 	bl	80026ca <assert_failed>
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	461a      	mov	r2, r3
 8007454:	69b9      	ldr	r1, [r7, #24]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff feb2 	bl	80071c0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d003      	beq.n	800746c <LL_GPIO_Init+0x13c>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b09      	cmp	r3, #9
 800746a:	d129      	bne.n	80074c0 <LL_GPIO_Init+0x190>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d00b      	beq.n	800748c <LL_GPIO_Init+0x15c>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d007      	beq.n	800748c <LL_GPIO_Init+0x15c>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d003      	beq.n	800748c <LL_GPIO_Init+0x15c>
 8007484:	21cd      	movs	r1, #205	; 0xcd
 8007486:	481d      	ldr	r0, [pc, #116]	; (80074fc <LL_GPIO_Init+0x1cc>)
 8007488:	f7fb f91f 	bl	80026ca <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <LL_GPIO_Init+0x174>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d003      	beq.n	80074a4 <LL_GPIO_Init+0x174>
 800749c:	21ce      	movs	r1, #206	; 0xce
 800749e:	4817      	ldr	r0, [pc, #92]	; (80074fc <LL_GPIO_Init+0x1cc>)
 80074a0:	f7fb f913 	bl	80026ca <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	69b9      	ldr	r1, [r7, #24]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff feb9 	bl	8007224 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	461a      	mov	r2, r3
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fee4 	bl	8007288 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	3301      	adds	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	fa22 f303 	lsr.w	r3, r2, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f47f af74 	bne.w	80073bc <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40010800 	.word	0x40010800
 80074e4:	40010c00 	.word	0x40010c00
 80074e8:	40011000 	.word	0x40011000
 80074ec:	40011400 	.word	0x40011400
 80074f0:	40011800 	.word	0x40011800
 80074f4:	40011c00 	.word	0x40011c00
 80074f8:	40012000 	.word	0x40012000
 80074fc:	0800c368 	.word	0x0800c368

08007500 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <LL_RCC_GetSysClkSource+0x14>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 030c 	and.w	r3, r3, #12
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	40021000 	.word	0x40021000

08007518 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800751c:	4b03      	ldr	r3, [pc, #12]	; (800752c <LL_RCC_GetAHBPrescaler+0x14>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007524:	4618      	mov	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr
 800752c:	40021000 	.word	0x40021000

08007530 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800753c:	4618      	mov	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr
 8007544:	40021000 	.word	0x40021000

08007548 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <LL_RCC_GetAPB2Prescaler+0x14>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007554:	4618      	mov	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	40021000 	.word	0x40021000

08007560 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <LL_RCC_PLL_GetMainSource+0x14>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	40021000 	.word	0x40021000

08007578 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800757c:	4b03      	ldr	r3, [pc, #12]	; (800758c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8007584:	4618      	mov	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr
 800758c:	40021000 	.word	0x40021000

08007590 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <LL_RCC_PLL_GetPrediv+0x18>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	0c5b      	lsrs	r3, r3, #17
 800759a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800759e:	4618      	mov	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000

080075ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80075b4:	f000 f820 	bl	80075f8 <RCC_GetSystemClockFreq>
 80075b8:	4602      	mov	r2, r0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f83e 	bl	8007644 <RCC_GetHCLKClockFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f84c 	bl	8007670 <RCC_GetPCLK1ClockFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f858 	bl	8007698 <RCC_GetPCLK2ClockFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60da      	str	r2, [r3, #12]
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007602:	f7ff ff7d 	bl	8007500 <LL_RCC_GetSysClkSource>
 8007606:	4603      	mov	r3, r0
 8007608:	2b08      	cmp	r3, #8
 800760a:	d00c      	beq.n	8007626 <RCC_GetSystemClockFreq+0x2e>
 800760c:	2b08      	cmp	r3, #8
 800760e:	d80e      	bhi.n	800762e <RCC_GetSystemClockFreq+0x36>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <RCC_GetSystemClockFreq+0x22>
 8007614:	2b04      	cmp	r3, #4
 8007616:	d003      	beq.n	8007620 <RCC_GetSystemClockFreq+0x28>
 8007618:	e009      	b.n	800762e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <RCC_GetSystemClockFreq+0x48>)
 800761c:	607b      	str	r3, [r7, #4]
      break;
 800761e:	e009      	b.n	8007634 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <RCC_GetSystemClockFreq+0x48>)
 8007622:	607b      	str	r3, [r7, #4]
      break;
 8007624:	e006      	b.n	8007634 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8007626:	f000 f84b 	bl	80076c0 <RCC_PLL_GetFreqDomain_SYS>
 800762a:	6078      	str	r0, [r7, #4]
      break;
 800762c:	e002      	b.n	8007634 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <RCC_GetSystemClockFreq+0x48>)
 8007630:	607b      	str	r3, [r7, #4]
      break;
 8007632:	bf00      	nop
  }

  return frequency;
 8007634:	687b      	ldr	r3, [r7, #4]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	007a1200 	.word	0x007a1200

08007644 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800764c:	f7ff ff64 	bl	8007518 <LL_RCC_GetAHBPrescaler>
 8007650:	4603      	mov	r3, r0
 8007652:	091b      	lsrs	r3, r3, #4
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <RCC_GetHCLKClockFreq+0x28>)
 800765a:	5cd3      	ldrb	r3, [r2, r3]
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	40d3      	lsrs	r3, r2
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	0800c3dc 	.word	0x0800c3dc

08007670 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007678:	f7ff ff5a 	bl	8007530 <LL_RCC_GetAPB1Prescaler>
 800767c:	4603      	mov	r3, r0
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	4a04      	ldr	r2, [pc, #16]	; (8007694 <RCC_GetPCLK1ClockFreq+0x24>)
 8007682:	5cd3      	ldrb	r3, [r2, r3]
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	40d3      	lsrs	r3, r2
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	0800c3ec 	.word	0x0800c3ec

08007698 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80076a0:	f7ff ff52 	bl	8007548 <LL_RCC_GetAPB2Prescaler>
 80076a4:	4603      	mov	r3, r0
 80076a6:	0adb      	lsrs	r3, r3, #11
 80076a8:	4a04      	ldr	r2, [pc, #16]	; (80076bc <RCC_GetPCLK2ClockFreq+0x24>)
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	40d3      	lsrs	r3, r2
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	0800c3ec 	.word	0x0800c3ec

080076c0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80076ce:	f7ff ff47 	bl	8007560 <LL_RCC_PLL_GetMainSource>
 80076d2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e0:	d003      	beq.n	80076ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80076e2:	e00b      	b.n	80076fc <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80076e4:	4b0d      	ldr	r3, [pc, #52]	; (800771c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80076e6:	607b      	str	r3, [r7, #4]
      break;
 80076e8:	e00b      	b.n	8007702 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80076ea:	f7ff ff51 	bl	8007590 <LL_RCC_PLL_GetPrediv>
 80076ee:	4603      	mov	r3, r0
 80076f0:	3301      	adds	r3, #1
 80076f2:	4a0b      	ldr	r2, [pc, #44]	; (8007720 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	607b      	str	r3, [r7, #4]
      break;
 80076fa:	e002      	b.n	8007702 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80076fe:	607b      	str	r3, [r7, #4]
      break;
 8007700:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8007702:	f7ff ff39 	bl	8007578 <LL_RCC_PLL_GetMultiplicator>
 8007706:	4603      	mov	r3, r0
 8007708:	0c9b      	lsrs	r3, r3, #18
 800770a:	3302      	adds	r3, #2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	003d0900 	.word	0x003d0900
 8007720:	007a1200 	.word	0x007a1200

08007724 <LL_USART_IsEnabled>:
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <LL_USART_SetStopBitsLength>:
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	611a      	str	r2, [r3, #16]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <LL_USART_SetHWFlowCtrl>:
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	615a      	str	r2, [r3, #20]
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr
	...

08007794 <LL_USART_SetBaudRate>:
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009a      	lsls	r2, r3, #2
 80077aa:	441a      	add	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <LL_USART_SetBaudRate+0xb8>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	b29b      	uxth	r3, r3
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	b299      	uxth	r1, r3
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009a      	lsls	r2, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d6:	4b1d      	ldr	r3, [pc, #116]	; (800784c <LL_USART_SetBaudRate+0xb8>)
 80077d8:	fba3 0302 	umull	r0, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2064      	movs	r0, #100	; 0x64
 80077e0:	fb00 f303 	mul.w	r3, r0, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	3332      	adds	r3, #50	; 0x32
 80077ea:	4a18      	ldr	r2, [pc, #96]	; (800784c <LL_USART_SetBaudRate+0xb8>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	440b      	add	r3, r1
 80077fc:	b299      	uxth	r1, r3
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009a      	lsls	r2, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <LL_USART_SetBaudRate+0xb8>)
 8007814:	fba3 0302 	umull	r0, r3, r3, r2
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	2064      	movs	r0, #100	; 0x64
 800781c:	fb00 f303 	mul.w	r3, r0, r3
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	3332      	adds	r3, #50	; 0x32
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <LL_USART_SetBaudRate+0xb8>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	095b      	lsrs	r3, r3, #5
 800782e:	b29b      	uxth	r3, r3
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	b29b      	uxth	r3, r3
 8007836:	440b      	add	r3, r1
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	51eb851f 	.word	0x51eb851f

08007850 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a74      	ldr	r2, [pc, #464]	; (8007a38 <LL_USART_Init+0x1e8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <LL_USART_Init+0x42>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a73      	ldr	r2, [pc, #460]	; (8007a3c <LL_USART_Init+0x1ec>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <LL_USART_Init+0x42>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a72      	ldr	r2, [pc, #456]	; (8007a40 <LL_USART_Init+0x1f0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00b      	beq.n	8007892 <LL_USART_Init+0x42>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a71      	ldr	r2, [pc, #452]	; (8007a44 <LL_USART_Init+0x1f4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <LL_USART_Init+0x42>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a70      	ldr	r2, [pc, #448]	; (8007a48 <LL_USART_Init+0x1f8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <LL_USART_Init+0x42>
 800788a:	21cd      	movs	r1, #205	; 0xcd
 800788c:	486f      	ldr	r0, [pc, #444]	; (8007a4c <LL_USART_Init+0x1fc>)
 800788e:	f7fa ff1c 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6e      	ldr	r2, [pc, #440]	; (8007a50 <LL_USART_Init+0x200>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d903      	bls.n	80078a4 <LL_USART_Init+0x54>
 800789c:	21ce      	movs	r1, #206	; 0xce
 800789e:	486b      	ldr	r0, [pc, #428]	; (8007a4c <LL_USART_Init+0x1fc>)
 80078a0:	f7fa ff13 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <LL_USART_Init+0x6e>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b4:	d003      	beq.n	80078be <LL_USART_Init+0x6e>
 80078b6:	21cf      	movs	r1, #207	; 0xcf
 80078b8:	4864      	ldr	r0, [pc, #400]	; (8007a4c <LL_USART_Init+0x1fc>)
 80078ba:	f7fa ff06 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c6:	d011      	beq.n	80078ec <LL_USART_Init+0x9c>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <LL_USART_Init+0x9c>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d8:	d008      	beq.n	80078ec <LL_USART_Init+0x9c>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	d003      	beq.n	80078ec <LL_USART_Init+0x9c>
 80078e4:	21d0      	movs	r1, #208	; 0xd0
 80078e6:	4859      	ldr	r0, [pc, #356]	; (8007a4c <LL_USART_Init+0x1fc>)
 80078e8:	f7fa feef 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00d      	beq.n	8007910 <LL_USART_Init+0xc0>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fc:	d008      	beq.n	8007910 <LL_USART_Init+0xc0>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007906:	d003      	beq.n	8007910 <LL_USART_Init+0xc0>
 8007908:	21d1      	movs	r1, #209	; 0xd1
 800790a:	4850      	ldr	r0, [pc, #320]	; (8007a4c <LL_USART_Init+0x1fc>)
 800790c:	f7fa fedd 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00f      	beq.n	8007938 <LL_USART_Init+0xe8>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d00b      	beq.n	8007938 <LL_USART_Init+0xe8>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d007      	beq.n	8007938 <LL_USART_Init+0xe8>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	d003      	beq.n	8007938 <LL_USART_Init+0xe8>
 8007930:	21d2      	movs	r1, #210	; 0xd2
 8007932:	4846      	ldr	r0, [pc, #280]	; (8007a4c <LL_USART_Init+0x1fc>)
 8007934:	f7fa fec9 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d012      	beq.n	8007966 <LL_USART_Init+0x116>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007948:	d00d      	beq.n	8007966 <LL_USART_Init+0x116>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007952:	d008      	beq.n	8007966 <LL_USART_Init+0x116>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795c:	d003      	beq.n	8007966 <LL_USART_Init+0x116>
 800795e:	21d3      	movs	r1, #211	; 0xd3
 8007960:	483a      	ldr	r0, [pc, #232]	; (8007a4c <LL_USART_Init+0x1fc>)
 8007962:	f7fa feb2 	bl	80026ca <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fedc 	bl	8007724 <LL_USART_IsEnabled>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d15c      	bne.n	8007a2c <LL_USART_Init+0x1dc>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800797a:	f023 030c 	bic.w	r3, r3, #12
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	6851      	ldr	r1, [r2, #4]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	68d2      	ldr	r2, [r2, #12]
 8007986:	4311      	orrs	r1, r2
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	6912      	ldr	r2, [r2, #16]
 800798c:	430a      	orrs	r2, r1
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fed5 	bl	800774a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fee1 	bl	800776e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fdfb 	bl	80075ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <LL_USART_Init+0x1e8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d102      	bne.n	80079c4 <LL_USART_Init+0x174>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	e01a      	b.n	80079fa <LL_USART_Init+0x1aa>
    }
    else if (USARTx == USART2)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <LL_USART_Init+0x1ec>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d102      	bne.n	80079d2 <LL_USART_Init+0x182>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e013      	b.n	80079fa <LL_USART_Init+0x1aa>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <LL_USART_Init+0x1f0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d102      	bne.n	80079e0 <LL_USART_Init+0x190>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	e00c      	b.n	80079fa <LL_USART_Init+0x1aa>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <LL_USART_Init+0x1f4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d102      	bne.n	80079ee <LL_USART_Init+0x19e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e005      	b.n	80079fa <LL_USART_Init+0x1aa>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <LL_USART_Init+0x1f8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d101      	bne.n	80079fa <LL_USART_Init+0x1aa>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d015      	beq.n	8007a2c <LL_USART_Init+0x1dc>
        && (USART_InitStruct->BaudRate != 0U))
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d011      	beq.n	8007a2c <LL_USART_Init+0x1dc>
    {
      status = SUCCESS;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007a10:	461a      	mov	r2, r3
 8007a12:	69b9      	ldr	r1, [r7, #24]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff febd 	bl	8007794 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b0f      	cmp	r3, #15
 8007a20:	d804      	bhi.n	8007a2c <LL_USART_Init+0x1dc>
 8007a22:	f240 1135 	movw	r1, #309	; 0x135
 8007a26:	4809      	ldr	r0, [pc, #36]	; (8007a4c <LL_USART_Init+0x1fc>)
 8007a28:	f7fa fe4f 	bl	80026ca <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40013800 	.word	0x40013800
 8007a3c:	40004400 	.word	0x40004400
 8007a40:	40004800 	.word	0x40004800
 8007a44:	40004c00 	.word	0x40004c00
 8007a48:	40005000 	.word	0x40005000
 8007a4c:	0800c3a0 	.word	0x0800c3a0
 8007a50:	0044aa20 	.word	0x0044aa20

08007a54 <__cvt>:
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5a:	461f      	mov	r7, r3
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007a62:	461f      	movlt	r7, r3
 8007a64:	2300      	movge	r3, #0
 8007a66:	232d      	movlt	r3, #45	; 0x2d
 8007a68:	b088      	sub	sp, #32
 8007a6a:	4614      	mov	r4, r2
 8007a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007a70:	7013      	strb	r3, [r2, #0]
 8007a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007a78:	f023 0820 	bic.w	r8, r3, #32
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a80:	d005      	beq.n	8007a8e <__cvt+0x3a>
 8007a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a86:	d100      	bne.n	8007a8a <__cvt+0x36>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e000      	b.n	8007a90 <__cvt+0x3c>
 8007a8e:	2303      	movs	r3, #3
 8007a90:	aa07      	add	r2, sp, #28
 8007a92:	9204      	str	r2, [sp, #16]
 8007a94:	aa06      	add	r2, sp, #24
 8007a96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007a9a:	e9cd 3500 	strd	r3, r5, [sp]
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	f001 f899 	bl	8008bd8 <_dtoa_r>
 8007aa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aaa:	4606      	mov	r6, r0
 8007aac:	d102      	bne.n	8007ab4 <__cvt+0x60>
 8007aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ab0:	07db      	lsls	r3, r3, #31
 8007ab2:	d522      	bpl.n	8007afa <__cvt+0xa6>
 8007ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ab8:	eb06 0905 	add.w	r9, r6, r5
 8007abc:	d110      	bne.n	8007ae0 <__cvt+0x8c>
 8007abe:	7833      	ldrb	r3, [r6, #0]
 8007ac0:	2b30      	cmp	r3, #48	; 0x30
 8007ac2:	d10a      	bne.n	8007ada <__cvt+0x86>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7f8 ffd8 	bl	8000a80 <__aeabi_dcmpeq>
 8007ad0:	b918      	cbnz	r0, 8007ada <__cvt+0x86>
 8007ad2:	f1c5 0501 	rsb	r5, r5, #1
 8007ad6:	f8ca 5000 	str.w	r5, [sl]
 8007ada:	f8da 3000 	ldr.w	r3, [sl]
 8007ade:	4499      	add	r9, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f8 ffca 	bl	8000a80 <__aeabi_dcmpeq>
 8007aec:	b108      	cbz	r0, 8007af2 <__cvt+0x9e>
 8007aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8007af2:	2230      	movs	r2, #48	; 0x30
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	454b      	cmp	r3, r9
 8007af8:	d307      	bcc.n	8007b0a <__cvt+0xb6>
 8007afa:	4630      	mov	r0, r6
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	b008      	add	sp, #32
 8007b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0a:	1c59      	adds	r1, r3, #1
 8007b0c:	9107      	str	r1, [sp, #28]
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	e7f0      	b.n	8007af4 <__cvt+0xa0>

08007b12 <__exponent>:
 8007b12:	4603      	mov	r3, r0
 8007b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b16:	2900      	cmp	r1, #0
 8007b18:	f803 2b02 	strb.w	r2, [r3], #2
 8007b1c:	bfb6      	itet	lt
 8007b1e:	222d      	movlt	r2, #45	; 0x2d
 8007b20:	222b      	movge	r2, #43	; 0x2b
 8007b22:	4249      	neglt	r1, r1
 8007b24:	2909      	cmp	r1, #9
 8007b26:	7042      	strb	r2, [r0, #1]
 8007b28:	dd2a      	ble.n	8007b80 <__exponent+0x6e>
 8007b2a:	f10d 0207 	add.w	r2, sp, #7
 8007b2e:	4617      	mov	r7, r2
 8007b30:	260a      	movs	r6, #10
 8007b32:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b36:	4694      	mov	ip, r2
 8007b38:	fb06 1415 	mls	r4, r6, r5, r1
 8007b3c:	3430      	adds	r4, #48	; 0x30
 8007b3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b42:	460c      	mov	r4, r1
 8007b44:	2c63      	cmp	r4, #99	; 0x63
 8007b46:	4629      	mov	r1, r5
 8007b48:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b4c:	dcf1      	bgt.n	8007b32 <__exponent+0x20>
 8007b4e:	3130      	adds	r1, #48	; 0x30
 8007b50:	f1ac 0402 	sub.w	r4, ip, #2
 8007b54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b58:	4622      	mov	r2, r4
 8007b5a:	1c41      	adds	r1, r0, #1
 8007b5c:	42ba      	cmp	r2, r7
 8007b5e:	d30a      	bcc.n	8007b76 <__exponent+0x64>
 8007b60:	f10d 0209 	add.w	r2, sp, #9
 8007b64:	eba2 020c 	sub.w	r2, r2, ip
 8007b68:	42bc      	cmp	r4, r7
 8007b6a:	bf88      	it	hi
 8007b6c:	2200      	movhi	r2, #0
 8007b6e:	4413      	add	r3, r2
 8007b70:	1a18      	subs	r0, r3, r0
 8007b72:	b003      	add	sp, #12
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007b7e:	e7ed      	b.n	8007b5c <__exponent+0x4a>
 8007b80:	2330      	movs	r3, #48	; 0x30
 8007b82:	3130      	adds	r1, #48	; 0x30
 8007b84:	7083      	strb	r3, [r0, #2]
 8007b86:	70c1      	strb	r1, [r0, #3]
 8007b88:	1d03      	adds	r3, r0, #4
 8007b8a:	e7f1      	b.n	8007b70 <__exponent+0x5e>

08007b8c <_printf_float>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	b091      	sub	sp, #68	; 0x44
 8007b92:	460c      	mov	r4, r1
 8007b94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007b98:	4616      	mov	r6, r2
 8007b9a:	461f      	mov	r7, r3
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	f000 ff05 	bl	80089ac <_localeconv_r>
 8007ba2:	6803      	ldr	r3, [r0, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba8:	f7f8 fb3e 	bl	8000228 <strlen>
 8007bac:	2300      	movs	r3, #0
 8007bae:	930e      	str	r3, [sp, #56]	; 0x38
 8007bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	f023 0307 	bic.w	r3, r3, #7
 8007bbc:	f103 0208 	add.w	r2, r3, #8
 8007bc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8007bc8:	f8c8 2000 	str.w	r2, [r8]
 8007bcc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4643      	mov	r3, r8
 8007bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bd8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	4650      	mov	r0, sl
 8007be4:	4b9c      	ldr	r3, [pc, #624]	; (8007e58 <_printf_float+0x2cc>)
 8007be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007be8:	f7f8 ff7c 	bl	8000ae4 <__aeabi_dcmpun>
 8007bec:	bb70      	cbnz	r0, 8007c4c <_printf_float+0xc0>
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4b98      	ldr	r3, [pc, #608]	; (8007e58 <_printf_float+0x2cc>)
 8007bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bf8:	f7f8 ff56 	bl	8000aa8 <__aeabi_dcmple>
 8007bfc:	bb30      	cbnz	r0, 8007c4c <_printf_float+0xc0>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2300      	movs	r3, #0
 8007c02:	4650      	mov	r0, sl
 8007c04:	4641      	mov	r1, r8
 8007c06:	f7f8 ff45 	bl	8000a94 <__aeabi_dcmplt>
 8007c0a:	b110      	cbz	r0, 8007c12 <_printf_float+0x86>
 8007c0c:	232d      	movs	r3, #45	; 0x2d
 8007c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c12:	4a92      	ldr	r2, [pc, #584]	; (8007e5c <_printf_float+0x2d0>)
 8007c14:	4b92      	ldr	r3, [pc, #584]	; (8007e60 <_printf_float+0x2d4>)
 8007c16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007c1a:	bf94      	ite	ls
 8007c1c:	4690      	movls	r8, r2
 8007c1e:	4698      	movhi	r8, r3
 8007c20:	2303      	movs	r3, #3
 8007c22:	f04f 0a00 	mov.w	sl, #0
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	f02b 0304 	bic.w	r3, fp, #4
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	4633      	mov	r3, r6
 8007c30:	4621      	mov	r1, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	9700      	str	r7, [sp, #0]
 8007c36:	aa0f      	add	r2, sp, #60	; 0x3c
 8007c38:	f000 f9d6 	bl	8007fe8 <_printf_common>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f040 8090 	bne.w	8007d62 <_printf_float+0x1d6>
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	b011      	add	sp, #68	; 0x44
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4643      	mov	r3, r8
 8007c50:	4650      	mov	r0, sl
 8007c52:	4641      	mov	r1, r8
 8007c54:	f7f8 ff46 	bl	8000ae4 <__aeabi_dcmpun>
 8007c58:	b148      	cbz	r0, 8007c6e <_printf_float+0xe2>
 8007c5a:	f1b8 0f00 	cmp.w	r8, #0
 8007c5e:	bfb8      	it	lt
 8007c60:	232d      	movlt	r3, #45	; 0x2d
 8007c62:	4a80      	ldr	r2, [pc, #512]	; (8007e64 <_printf_float+0x2d8>)
 8007c64:	bfb8      	it	lt
 8007c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c6a:	4b7f      	ldr	r3, [pc, #508]	; (8007e68 <_printf_float+0x2dc>)
 8007c6c:	e7d3      	b.n	8007c16 <_printf_float+0x8a>
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	d142      	bne.n	8007cfe <_printf_float+0x172>
 8007c78:	2306      	movs	r3, #6
 8007c7a:	6063      	str	r3, [r4, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	9206      	str	r2, [sp, #24]
 8007c80:	aa0e      	add	r2, sp, #56	; 0x38
 8007c82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007c86:	aa0d      	add	r2, sp, #52	; 0x34
 8007c88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007c8c:	9203      	str	r2, [sp, #12]
 8007c8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007c92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	6863      	ldr	r3, [r4, #4]
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ca4:	f7ff fed6 	bl	8007a54 <__cvt>
 8007ca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007caa:	4680      	mov	r8, r0
 8007cac:	2947      	cmp	r1, #71	; 0x47
 8007cae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cb0:	d108      	bne.n	8007cc4 <_printf_float+0x138>
 8007cb2:	1cc8      	adds	r0, r1, #3
 8007cb4:	db02      	blt.n	8007cbc <_printf_float+0x130>
 8007cb6:	6863      	ldr	r3, [r4, #4]
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	dd40      	ble.n	8007d3e <_printf_float+0x1b2>
 8007cbc:	f1a9 0902 	sub.w	r9, r9, #2
 8007cc0:	fa5f f989 	uxtb.w	r9, r9
 8007cc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007cc8:	d81f      	bhi.n	8007d0a <_printf_float+0x17e>
 8007cca:	464a      	mov	r2, r9
 8007ccc:	3901      	subs	r1, #1
 8007cce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8007cd4:	f7ff ff1d 	bl	8007b12 <__exponent>
 8007cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cda:	4682      	mov	sl, r0
 8007cdc:	1813      	adds	r3, r2, r0
 8007cde:	2a01      	cmp	r2, #1
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	dc02      	bgt.n	8007cea <_printf_float+0x15e>
 8007ce4:	6822      	ldr	r2, [r4, #0]
 8007ce6:	07d2      	lsls	r2, r2, #31
 8007ce8:	d501      	bpl.n	8007cee <_printf_float+0x162>
 8007cea:	3301      	adds	r3, #1
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d09b      	beq.n	8007c2e <_printf_float+0xa2>
 8007cf6:	232d      	movs	r3, #45	; 0x2d
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfc:	e797      	b.n	8007c2e <_printf_float+0xa2>
 8007cfe:	2947      	cmp	r1, #71	; 0x47
 8007d00:	d1bc      	bne.n	8007c7c <_printf_float+0xf0>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1ba      	bne.n	8007c7c <_printf_float+0xf0>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7b7      	b.n	8007c7a <_printf_float+0xee>
 8007d0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007d0e:	d118      	bne.n	8007d42 <_printf_float+0x1b6>
 8007d10:	2900      	cmp	r1, #0
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	dd0b      	ble.n	8007d2e <_printf_float+0x1a2>
 8007d16:	6121      	str	r1, [r4, #16]
 8007d18:	b913      	cbnz	r3, 8007d20 <_printf_float+0x194>
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	07d0      	lsls	r0, r2, #31
 8007d1e:	d502      	bpl.n	8007d26 <_printf_float+0x19a>
 8007d20:	3301      	adds	r3, #1
 8007d22:	440b      	add	r3, r1
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	f04f 0a00 	mov.w	sl, #0
 8007d2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d2c:	e7df      	b.n	8007cee <_printf_float+0x162>
 8007d2e:	b913      	cbnz	r3, 8007d36 <_printf_float+0x1aa>
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	07d2      	lsls	r2, r2, #31
 8007d34:	d501      	bpl.n	8007d3a <_printf_float+0x1ae>
 8007d36:	3302      	adds	r3, #2
 8007d38:	e7f4      	b.n	8007d24 <_printf_float+0x198>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e7f2      	b.n	8007d24 <_printf_float+0x198>
 8007d3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d44:	4299      	cmp	r1, r3
 8007d46:	db05      	blt.n	8007d54 <_printf_float+0x1c8>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	6121      	str	r1, [r4, #16]
 8007d4c:	07d8      	lsls	r0, r3, #31
 8007d4e:	d5ea      	bpl.n	8007d26 <_printf_float+0x19a>
 8007d50:	1c4b      	adds	r3, r1, #1
 8007d52:	e7e7      	b.n	8007d24 <_printf_float+0x198>
 8007d54:	2900      	cmp	r1, #0
 8007d56:	bfcc      	ite	gt
 8007d58:	2201      	movgt	r2, #1
 8007d5a:	f1c1 0202 	rsble	r2, r1, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	e7e0      	b.n	8007d24 <_printf_float+0x198>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	055a      	lsls	r2, r3, #21
 8007d66:	d407      	bmi.n	8007d78 <_printf_float+0x1ec>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	d12b      	bne.n	8007dce <_printf_float+0x242>
 8007d76:	e764      	b.n	8007c42 <_printf_float+0xb6>
 8007d78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d7c:	f240 80dd 	bls.w	8007f3a <_printf_float+0x3ae>
 8007d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d84:	2200      	movs	r2, #0
 8007d86:	2300      	movs	r3, #0
 8007d88:	f7f8 fe7a 	bl	8000a80 <__aeabi_dcmpeq>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d033      	beq.n	8007df8 <_printf_float+0x26c>
 8007d90:	2301      	movs	r3, #1
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	4a35      	ldr	r2, [pc, #212]	; (8007e6c <_printf_float+0x2e0>)
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	f43f af51 	beq.w	8007c42 <_printf_float+0xb6>
 8007da0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db02      	blt.n	8007dae <_printf_float+0x222>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	07d8      	lsls	r0, r3, #31
 8007dac:	d50f      	bpl.n	8007dce <_printf_float+0x242>
 8007dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	f43f af42 	beq.w	8007c42 <_printf_float+0xb6>
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	f104 091a 	add.w	r9, r4, #26
 8007dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4543      	cmp	r3, r8
 8007dcc:	dc09      	bgt.n	8007de2 <_printf_float+0x256>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	079b      	lsls	r3, r3, #30
 8007dd2:	f100 8104 	bmi.w	8007fde <_printf_float+0x452>
 8007dd6:	68e0      	ldr	r0, [r4, #12]
 8007dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dda:	4298      	cmp	r0, r3
 8007ddc:	bfb8      	it	lt
 8007dde:	4618      	movlt	r0, r3
 8007de0:	e731      	b.n	8007c46 <_printf_float+0xba>
 8007de2:	2301      	movs	r3, #1
 8007de4:	464a      	mov	r2, r9
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	f43f af28 	beq.w	8007c42 <_printf_float+0xb6>
 8007df2:	f108 0801 	add.w	r8, r8, #1
 8007df6:	e7e6      	b.n	8007dc6 <_printf_float+0x23a>
 8007df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc38      	bgt.n	8007e70 <_printf_float+0x2e4>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <_printf_float+0x2e0>)
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f43f af1a 	beq.w	8007c42 <_printf_float+0xb6>
 8007e0e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d102      	bne.n	8007e1c <_printf_float+0x290>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	07d9      	lsls	r1, r3, #31
 8007e1a:	d5d8      	bpl.n	8007dce <_printf_float+0x242>
 8007e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e20:	4631      	mov	r1, r6
 8007e22:	4628      	mov	r0, r5
 8007e24:	47b8      	blx	r7
 8007e26:	3001      	adds	r0, #1
 8007e28:	f43f af0b 	beq.w	8007c42 <_printf_float+0xb6>
 8007e2c:	f04f 0900 	mov.w	r9, #0
 8007e30:	f104 0a1a 	add.w	sl, r4, #26
 8007e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e36:	425b      	negs	r3, r3
 8007e38:	454b      	cmp	r3, r9
 8007e3a:	dc01      	bgt.n	8007e40 <_printf_float+0x2b4>
 8007e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3e:	e794      	b.n	8007d6a <_printf_float+0x1de>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4652      	mov	r2, sl
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f aef9 	beq.w	8007c42 <_printf_float+0xb6>
 8007e50:	f109 0901 	add.w	r9, r9, #1
 8007e54:	e7ee      	b.n	8007e34 <_printf_float+0x2a8>
 8007e56:	bf00      	nop
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	0800c406 	.word	0x0800c406
 8007e60:	0800c40a 	.word	0x0800c40a
 8007e64:	0800c40e 	.word	0x0800c40e
 8007e68:	0800c412 	.word	0x0800c412
 8007e6c:	0800c416 	.word	0x0800c416
 8007e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bfa8      	it	ge
 8007e78:	461a      	movge	r2, r3
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	4691      	mov	r9, r2
 8007e7e:	dc37      	bgt.n	8007ef0 <_printf_float+0x364>
 8007e80:	f04f 0b00 	mov.w	fp, #0
 8007e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e88:	f104 021a 	add.w	r2, r4, #26
 8007e8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e90:	ebaa 0309 	sub.w	r3, sl, r9
 8007e94:	455b      	cmp	r3, fp
 8007e96:	dc33      	bgt.n	8007f00 <_printf_float+0x374>
 8007e98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	db3b      	blt.n	8007f18 <_printf_float+0x38c>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d438      	bmi.n	8007f18 <_printf_float+0x38c>
 8007ea6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007eaa:	eba2 0903 	sub.w	r9, r2, r3
 8007eae:	eba2 020a 	sub.w	r2, r2, sl
 8007eb2:	4591      	cmp	r9, r2
 8007eb4:	bfa8      	it	ge
 8007eb6:	4691      	movge	r9, r2
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	dc34      	bgt.n	8007f28 <_printf_float+0x39c>
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ec6:	f104 0a1a 	add.w	sl, r4, #26
 8007eca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	eba3 0309 	sub.w	r3, r3, r9
 8007ed4:	4543      	cmp	r3, r8
 8007ed6:	f77f af7a 	ble.w	8007dce <_printf_float+0x242>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4652      	mov	r2, sl
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b8      	blx	r7
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f43f aeac 	beq.w	8007c42 <_printf_float+0xb6>
 8007eea:	f108 0801 	add.w	r8, r8, #1
 8007eee:	e7ec      	b.n	8007eca <_printf_float+0x33e>
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	d1c0      	bne.n	8007e80 <_printf_float+0x2f4>
 8007efe:	e6a0      	b.n	8007c42 <_printf_float+0xb6>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f ae99 	beq.w	8007c42 <_printf_float+0xb6>
 8007f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f12:	f10b 0b01 	add.w	fp, fp, #1
 8007f16:	e7b9      	b.n	8007e8c <_printf_float+0x300>
 8007f18:	4631      	mov	r1, r6
 8007f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	d1bf      	bne.n	8007ea6 <_printf_float+0x31a>
 8007f26:	e68c      	b.n	8007c42 <_printf_float+0xb6>
 8007f28:	464b      	mov	r3, r9
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	eb08 020a 	add.w	r2, r8, sl
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1c2      	bne.n	8007ebe <_printf_float+0x332>
 8007f38:	e683      	b.n	8007c42 <_printf_float+0xb6>
 8007f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f3c:	2a01      	cmp	r2, #1
 8007f3e:	dc01      	bgt.n	8007f44 <_printf_float+0x3b8>
 8007f40:	07db      	lsls	r3, r3, #31
 8007f42:	d539      	bpl.n	8007fb8 <_printf_float+0x42c>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4642      	mov	r2, r8
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f ae77 	beq.w	8007c42 <_printf_float+0xb6>
 8007f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f ae6f 	beq.w	8007c42 <_printf_float+0xb6>
 8007f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007f70:	f7f8 fd86 	bl	8000a80 <__aeabi_dcmpeq>
 8007f74:	b9d8      	cbnz	r0, 8007fae <_printf_float+0x422>
 8007f76:	f109 33ff 	add.w	r3, r9, #4294967295
 8007f7a:	f108 0201 	add.w	r2, r8, #1
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	d10e      	bne.n	8007fa6 <_printf_float+0x41a>
 8007f88:	e65b      	b.n	8007c42 <_printf_float+0xb6>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	464a      	mov	r2, r9
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	f43f ae54 	beq.w	8007c42 <_printf_float+0xb6>
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	4543      	cmp	r3, r8
 8007fa4:	dcf1      	bgt.n	8007f8a <_printf_float+0x3fe>
 8007fa6:	4653      	mov	r3, sl
 8007fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fac:	e6de      	b.n	8007d6c <_printf_float+0x1e0>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	f104 091a 	add.w	r9, r4, #26
 8007fb6:	e7f2      	b.n	8007f9e <_printf_float+0x412>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4642      	mov	r2, r8
 8007fbc:	e7df      	b.n	8007f7e <_printf_float+0x3f2>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	464a      	mov	r2, r9
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f ae3a 	beq.w	8007c42 <_printf_float+0xb6>
 8007fce:	f108 0801 	add.w	r8, r8, #1
 8007fd2:	68e3      	ldr	r3, [r4, #12]
 8007fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fd6:	1a5b      	subs	r3, r3, r1
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	dcf0      	bgt.n	8007fbe <_printf_float+0x432>
 8007fdc:	e6fb      	b.n	8007dd6 <_printf_float+0x24a>
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	f104 0919 	add.w	r9, r4, #25
 8007fe6:	e7f4      	b.n	8007fd2 <_printf_float+0x446>

08007fe8 <_printf_common>:
 8007fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	4616      	mov	r6, r2
 8007fee:	4699      	mov	r9, r3
 8007ff0:	688a      	ldr	r2, [r1, #8]
 8007ff2:	690b      	ldr	r3, [r1, #16]
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	bfb8      	it	lt
 8007ffa:	4613      	movlt	r3, r2
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008002:	460c      	mov	r4, r1
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	b10a      	cbz	r2, 800800e <_printf_common+0x26>
 800800a:	3301      	adds	r3, #1
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	0699      	lsls	r1, r3, #26
 8008012:	bf42      	ittt	mi
 8008014:	6833      	ldrmi	r3, [r6, #0]
 8008016:	3302      	addmi	r3, #2
 8008018:	6033      	strmi	r3, [r6, #0]
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	f015 0506 	ands.w	r5, r5, #6
 8008020:	d106      	bne.n	8008030 <_printf_common+0x48>
 8008022:	f104 0a19 	add.w	sl, r4, #25
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	6832      	ldr	r2, [r6, #0]
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	42ab      	cmp	r3, r5
 800802e:	dc2b      	bgt.n	8008088 <_printf_common+0xa0>
 8008030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008034:	1e13      	subs	r3, r2, #0
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	bf18      	it	ne
 800803a:	2301      	movne	r3, #1
 800803c:	0692      	lsls	r2, r2, #26
 800803e:	d430      	bmi.n	80080a2 <_printf_common+0xba>
 8008040:	4649      	mov	r1, r9
 8008042:	4638      	mov	r0, r7
 8008044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d023      	beq.n	8008096 <_printf_common+0xae>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	f003 0306 	and.w	r3, r3, #6
 8008056:	2b04      	cmp	r3, #4
 8008058:	bf14      	ite	ne
 800805a:	2500      	movne	r5, #0
 800805c:	6833      	ldreq	r3, [r6, #0]
 800805e:	f04f 0600 	mov.w	r6, #0
 8008062:	bf08      	it	eq
 8008064:	68e5      	ldreq	r5, [r4, #12]
 8008066:	f104 041a 	add.w	r4, r4, #26
 800806a:	bf08      	it	eq
 800806c:	1aed      	subeq	r5, r5, r3
 800806e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008072:	bf08      	it	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	4293      	cmp	r3, r2
 800807a:	bfc4      	itt	gt
 800807c:	1a9b      	subgt	r3, r3, r2
 800807e:	18ed      	addgt	r5, r5, r3
 8008080:	42b5      	cmp	r5, r6
 8008082:	d11a      	bne.n	80080ba <_printf_common+0xd2>
 8008084:	2000      	movs	r0, #0
 8008086:	e008      	b.n	800809a <_printf_common+0xb2>
 8008088:	2301      	movs	r3, #1
 800808a:	4652      	mov	r2, sl
 800808c:	4649      	mov	r1, r9
 800808e:	4638      	mov	r0, r7
 8008090:	47c0      	blx	r8
 8008092:	3001      	adds	r0, #1
 8008094:	d103      	bne.n	800809e <_printf_common+0xb6>
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	3501      	adds	r5, #1
 80080a0:	e7c1      	b.n	8008026 <_printf_common+0x3e>
 80080a2:	2030      	movs	r0, #48	; 0x30
 80080a4:	18e1      	adds	r1, r4, r3
 80080a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b0:	4422      	add	r2, r4
 80080b2:	3302      	adds	r3, #2
 80080b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b8:	e7c2      	b.n	8008040 <_printf_common+0x58>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4622      	mov	r2, r4
 80080be:	4649      	mov	r1, r9
 80080c0:	4638      	mov	r0, r7
 80080c2:	47c0      	blx	r8
 80080c4:	3001      	adds	r0, #1
 80080c6:	d0e6      	beq.n	8008096 <_printf_common+0xae>
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7d9      	b.n	8008080 <_printf_common+0x98>

080080cc <_printf_i>:
 80080cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	7e0f      	ldrb	r7, [r1, #24]
 80080d2:	4691      	mov	r9, r2
 80080d4:	2f78      	cmp	r7, #120	; 0x78
 80080d6:	4680      	mov	r8, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	469a      	mov	sl, r3
 80080dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080e2:	d807      	bhi.n	80080f4 <_printf_i+0x28>
 80080e4:	2f62      	cmp	r7, #98	; 0x62
 80080e6:	d80a      	bhi.n	80080fe <_printf_i+0x32>
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	f000 80d5 	beq.w	8008298 <_printf_i+0x1cc>
 80080ee:	2f58      	cmp	r7, #88	; 0x58
 80080f0:	f000 80c1 	beq.w	8008276 <_printf_i+0x1aa>
 80080f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080fc:	e03a      	b.n	8008174 <_printf_i+0xa8>
 80080fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008102:	2b15      	cmp	r3, #21
 8008104:	d8f6      	bhi.n	80080f4 <_printf_i+0x28>
 8008106:	a101      	add	r1, pc, #4	; (adr r1, 800810c <_printf_i+0x40>)
 8008108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800810c:	08008165 	.word	0x08008165
 8008110:	08008179 	.word	0x08008179
 8008114:	080080f5 	.word	0x080080f5
 8008118:	080080f5 	.word	0x080080f5
 800811c:	080080f5 	.word	0x080080f5
 8008120:	080080f5 	.word	0x080080f5
 8008124:	08008179 	.word	0x08008179
 8008128:	080080f5 	.word	0x080080f5
 800812c:	080080f5 	.word	0x080080f5
 8008130:	080080f5 	.word	0x080080f5
 8008134:	080080f5 	.word	0x080080f5
 8008138:	0800827f 	.word	0x0800827f
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008239 	.word	0x08008239
 8008144:	080080f5 	.word	0x080080f5
 8008148:	080080f5 	.word	0x080080f5
 800814c:	080082a1 	.word	0x080082a1
 8008150:	080080f5 	.word	0x080080f5
 8008154:	080081a5 	.word	0x080081a5
 8008158:	080080f5 	.word	0x080080f5
 800815c:	080080f5 	.word	0x080080f5
 8008160:	08008241 	.word	0x08008241
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	602a      	str	r2, [r5, #0]
 800816c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008174:	2301      	movs	r3, #1
 8008176:	e0a0      	b.n	80082ba <_printf_i+0x1ee>
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	0607      	lsls	r7, r0, #24
 800817e:	f103 0104 	add.w	r1, r3, #4
 8008182:	6029      	str	r1, [r5, #0]
 8008184:	d501      	bpl.n	800818a <_printf_i+0xbe>
 8008186:	681e      	ldr	r6, [r3, #0]
 8008188:	e003      	b.n	8008192 <_printf_i+0xc6>
 800818a:	0646      	lsls	r6, r0, #25
 800818c:	d5fb      	bpl.n	8008186 <_printf_i+0xba>
 800818e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008192:	2e00      	cmp	r6, #0
 8008194:	da03      	bge.n	800819e <_printf_i+0xd2>
 8008196:	232d      	movs	r3, #45	; 0x2d
 8008198:	4276      	negs	r6, r6
 800819a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819e:	230a      	movs	r3, #10
 80081a0:	4859      	ldr	r0, [pc, #356]	; (8008308 <_printf_i+0x23c>)
 80081a2:	e012      	b.n	80081ca <_printf_i+0xfe>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	6029      	str	r1, [r5, #0]
 80081ac:	0605      	lsls	r5, r0, #24
 80081ae:	d501      	bpl.n	80081b4 <_printf_i+0xe8>
 80081b0:	681e      	ldr	r6, [r3, #0]
 80081b2:	e002      	b.n	80081ba <_printf_i+0xee>
 80081b4:	0641      	lsls	r1, r0, #25
 80081b6:	d5fb      	bpl.n	80081b0 <_printf_i+0xe4>
 80081b8:	881e      	ldrh	r6, [r3, #0]
 80081ba:	2f6f      	cmp	r7, #111	; 0x6f
 80081bc:	bf0c      	ite	eq
 80081be:	2308      	moveq	r3, #8
 80081c0:	230a      	movne	r3, #10
 80081c2:	4851      	ldr	r0, [pc, #324]	; (8008308 <_printf_i+0x23c>)
 80081c4:	2100      	movs	r1, #0
 80081c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081ca:	6865      	ldr	r5, [r4, #4]
 80081cc:	2d00      	cmp	r5, #0
 80081ce:	bfa8      	it	ge
 80081d0:	6821      	ldrge	r1, [r4, #0]
 80081d2:	60a5      	str	r5, [r4, #8]
 80081d4:	bfa4      	itt	ge
 80081d6:	f021 0104 	bicge.w	r1, r1, #4
 80081da:	6021      	strge	r1, [r4, #0]
 80081dc:	b90e      	cbnz	r6, 80081e2 <_printf_i+0x116>
 80081de:	2d00      	cmp	r5, #0
 80081e0:	d04b      	beq.n	800827a <_printf_i+0x1ae>
 80081e2:	4615      	mov	r5, r2
 80081e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80081e8:	fb03 6711 	mls	r7, r3, r1, r6
 80081ec:	5dc7      	ldrb	r7, [r0, r7]
 80081ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081f2:	4637      	mov	r7, r6
 80081f4:	42bb      	cmp	r3, r7
 80081f6:	460e      	mov	r6, r1
 80081f8:	d9f4      	bls.n	80081e4 <_printf_i+0x118>
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d10b      	bne.n	8008216 <_printf_i+0x14a>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	07de      	lsls	r6, r3, #31
 8008202:	d508      	bpl.n	8008216 <_printf_i+0x14a>
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	6861      	ldr	r1, [r4, #4]
 8008208:	4299      	cmp	r1, r3
 800820a:	bfde      	ittt	le
 800820c:	2330      	movle	r3, #48	; 0x30
 800820e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008216:	1b52      	subs	r2, r2, r5
 8008218:	6122      	str	r2, [r4, #16]
 800821a:	464b      	mov	r3, r9
 800821c:	4621      	mov	r1, r4
 800821e:	4640      	mov	r0, r8
 8008220:	f8cd a000 	str.w	sl, [sp]
 8008224:	aa03      	add	r2, sp, #12
 8008226:	f7ff fedf 	bl	8007fe8 <_printf_common>
 800822a:	3001      	adds	r0, #1
 800822c:	d14a      	bne.n	80082c4 <_printf_i+0x1f8>
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	b004      	add	sp, #16
 8008234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	f043 0320 	orr.w	r3, r3, #32
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	2778      	movs	r7, #120	; 0x78
 8008242:	4832      	ldr	r0, [pc, #200]	; (800830c <_printf_i+0x240>)
 8008244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	6829      	ldr	r1, [r5, #0]
 800824c:	061f      	lsls	r7, r3, #24
 800824e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008252:	d402      	bmi.n	800825a <_printf_i+0x18e>
 8008254:	065f      	lsls	r7, r3, #25
 8008256:	bf48      	it	mi
 8008258:	b2b6      	uxthmi	r6, r6
 800825a:	07df      	lsls	r7, r3, #31
 800825c:	bf48      	it	mi
 800825e:	f043 0320 	orrmi.w	r3, r3, #32
 8008262:	6029      	str	r1, [r5, #0]
 8008264:	bf48      	it	mi
 8008266:	6023      	strmi	r3, [r4, #0]
 8008268:	b91e      	cbnz	r6, 8008272 <_printf_i+0x1a6>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f023 0320 	bic.w	r3, r3, #32
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	2310      	movs	r3, #16
 8008274:	e7a6      	b.n	80081c4 <_printf_i+0xf8>
 8008276:	4824      	ldr	r0, [pc, #144]	; (8008308 <_printf_i+0x23c>)
 8008278:	e7e4      	b.n	8008244 <_printf_i+0x178>
 800827a:	4615      	mov	r5, r2
 800827c:	e7bd      	b.n	80081fa <_printf_i+0x12e>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	6826      	ldr	r6, [r4, #0]
 8008282:	1d18      	adds	r0, r3, #4
 8008284:	6961      	ldr	r1, [r4, #20]
 8008286:	6028      	str	r0, [r5, #0]
 8008288:	0635      	lsls	r5, r6, #24
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	d501      	bpl.n	8008292 <_printf_i+0x1c6>
 800828e:	6019      	str	r1, [r3, #0]
 8008290:	e002      	b.n	8008298 <_printf_i+0x1cc>
 8008292:	0670      	lsls	r0, r6, #25
 8008294:	d5fb      	bpl.n	800828e <_printf_i+0x1c2>
 8008296:	8019      	strh	r1, [r3, #0]
 8008298:	2300      	movs	r3, #0
 800829a:	4615      	mov	r5, r2
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	e7bc      	b.n	800821a <_printf_i+0x14e>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	2100      	movs	r1, #0
 80082a4:	1d1a      	adds	r2, r3, #4
 80082a6:	602a      	str	r2, [r5, #0]
 80082a8:	681d      	ldr	r5, [r3, #0]
 80082aa:	6862      	ldr	r2, [r4, #4]
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 fbf4 	bl	8008a9a <memchr>
 80082b2:	b108      	cbz	r0, 80082b8 <_printf_i+0x1ec>
 80082b4:	1b40      	subs	r0, r0, r5
 80082b6:	6060      	str	r0, [r4, #4]
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	2300      	movs	r3, #0
 80082be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c2:	e7aa      	b.n	800821a <_printf_i+0x14e>
 80082c4:	462a      	mov	r2, r5
 80082c6:	4649      	mov	r1, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	47d0      	blx	sl
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0ad      	beq.n	800822e <_printf_i+0x162>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	079b      	lsls	r3, r3, #30
 80082d6:	d413      	bmi.n	8008300 <_printf_i+0x234>
 80082d8:	68e0      	ldr	r0, [r4, #12]
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	4298      	cmp	r0, r3
 80082de:	bfb8      	it	lt
 80082e0:	4618      	movlt	r0, r3
 80082e2:	e7a6      	b.n	8008232 <_printf_i+0x166>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4632      	mov	r2, r6
 80082e8:	4649      	mov	r1, r9
 80082ea:	4640      	mov	r0, r8
 80082ec:	47d0      	blx	sl
 80082ee:	3001      	adds	r0, #1
 80082f0:	d09d      	beq.n	800822e <_printf_i+0x162>
 80082f2:	3501      	adds	r5, #1
 80082f4:	68e3      	ldr	r3, [r4, #12]
 80082f6:	9903      	ldr	r1, [sp, #12]
 80082f8:	1a5b      	subs	r3, r3, r1
 80082fa:	42ab      	cmp	r3, r5
 80082fc:	dcf2      	bgt.n	80082e4 <_printf_i+0x218>
 80082fe:	e7eb      	b.n	80082d8 <_printf_i+0x20c>
 8008300:	2500      	movs	r5, #0
 8008302:	f104 0619 	add.w	r6, r4, #25
 8008306:	e7f5      	b.n	80082f4 <_printf_i+0x228>
 8008308:	0800c418 	.word	0x0800c418
 800830c:	0800c429 	.word	0x0800c429

08008310 <_scanf_float>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	b087      	sub	sp, #28
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	688b      	ldr	r3, [r1, #8]
 800831a:	4617      	mov	r7, r2
 800831c:	1e5a      	subs	r2, r3, #1
 800831e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008322:	bf85      	ittet	hi
 8008324:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008328:	195b      	addhi	r3, r3, r5
 800832a:	2300      	movls	r3, #0
 800832c:	9302      	strhi	r3, [sp, #8]
 800832e:	bf88      	it	hi
 8008330:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008334:	468b      	mov	fp, r1
 8008336:	f04f 0500 	mov.w	r5, #0
 800833a:	bf8c      	ite	hi
 800833c:	608b      	strhi	r3, [r1, #8]
 800833e:	9302      	strls	r3, [sp, #8]
 8008340:	680b      	ldr	r3, [r1, #0]
 8008342:	4680      	mov	r8, r0
 8008344:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008348:	f84b 3b1c 	str.w	r3, [fp], #28
 800834c:	460c      	mov	r4, r1
 800834e:	465e      	mov	r6, fp
 8008350:	46aa      	mov	sl, r5
 8008352:	46a9      	mov	r9, r5
 8008354:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008358:	9501      	str	r5, [sp, #4]
 800835a:	68a2      	ldr	r2, [r4, #8]
 800835c:	b152      	cbz	r2, 8008374 <_scanf_float+0x64>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b4e      	cmp	r3, #78	; 0x4e
 8008364:	d864      	bhi.n	8008430 <_scanf_float+0x120>
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	d83c      	bhi.n	80083e4 <_scanf_float+0xd4>
 800836a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800836e:	b2c8      	uxtb	r0, r1
 8008370:	280e      	cmp	r0, #14
 8008372:	d93a      	bls.n	80083ea <_scanf_float+0xda>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	d003      	beq.n	8008382 <_scanf_float+0x72>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008386:	f1ba 0f01 	cmp.w	sl, #1
 800838a:	f200 8113 	bhi.w	80085b4 <_scanf_float+0x2a4>
 800838e:	455e      	cmp	r6, fp
 8008390:	f200 8105 	bhi.w	800859e <_scanf_float+0x28e>
 8008394:	2501      	movs	r5, #1
 8008396:	4628      	mov	r0, r5
 8008398:	b007      	add	sp, #28
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80083a2:	2a0d      	cmp	r2, #13
 80083a4:	d8e6      	bhi.n	8008374 <_scanf_float+0x64>
 80083a6:	a101      	add	r1, pc, #4	; (adr r1, 80083ac <_scanf_float+0x9c>)
 80083a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083ac:	080084eb 	.word	0x080084eb
 80083b0:	08008375 	.word	0x08008375
 80083b4:	08008375 	.word	0x08008375
 80083b8:	08008375 	.word	0x08008375
 80083bc:	0800854b 	.word	0x0800854b
 80083c0:	08008523 	.word	0x08008523
 80083c4:	08008375 	.word	0x08008375
 80083c8:	08008375 	.word	0x08008375
 80083cc:	080084f9 	.word	0x080084f9
 80083d0:	08008375 	.word	0x08008375
 80083d4:	08008375 	.word	0x08008375
 80083d8:	08008375 	.word	0x08008375
 80083dc:	08008375 	.word	0x08008375
 80083e0:	080084b1 	.word	0x080084b1
 80083e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083e8:	e7db      	b.n	80083a2 <_scanf_float+0x92>
 80083ea:	290e      	cmp	r1, #14
 80083ec:	d8c2      	bhi.n	8008374 <_scanf_float+0x64>
 80083ee:	a001      	add	r0, pc, #4	; (adr r0, 80083f4 <_scanf_float+0xe4>)
 80083f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083f4:	080084a3 	.word	0x080084a3
 80083f8:	08008375 	.word	0x08008375
 80083fc:	080084a3 	.word	0x080084a3
 8008400:	08008537 	.word	0x08008537
 8008404:	08008375 	.word	0x08008375
 8008408:	08008451 	.word	0x08008451
 800840c:	0800848d 	.word	0x0800848d
 8008410:	0800848d 	.word	0x0800848d
 8008414:	0800848d 	.word	0x0800848d
 8008418:	0800848d 	.word	0x0800848d
 800841c:	0800848d 	.word	0x0800848d
 8008420:	0800848d 	.word	0x0800848d
 8008424:	0800848d 	.word	0x0800848d
 8008428:	0800848d 	.word	0x0800848d
 800842c:	0800848d 	.word	0x0800848d
 8008430:	2b6e      	cmp	r3, #110	; 0x6e
 8008432:	d809      	bhi.n	8008448 <_scanf_float+0x138>
 8008434:	2b60      	cmp	r3, #96	; 0x60
 8008436:	d8b2      	bhi.n	800839e <_scanf_float+0x8e>
 8008438:	2b54      	cmp	r3, #84	; 0x54
 800843a:	d077      	beq.n	800852c <_scanf_float+0x21c>
 800843c:	2b59      	cmp	r3, #89	; 0x59
 800843e:	d199      	bne.n	8008374 <_scanf_float+0x64>
 8008440:	2d07      	cmp	r5, #7
 8008442:	d197      	bne.n	8008374 <_scanf_float+0x64>
 8008444:	2508      	movs	r5, #8
 8008446:	e029      	b.n	800849c <_scanf_float+0x18c>
 8008448:	2b74      	cmp	r3, #116	; 0x74
 800844a:	d06f      	beq.n	800852c <_scanf_float+0x21c>
 800844c:	2b79      	cmp	r3, #121	; 0x79
 800844e:	e7f6      	b.n	800843e <_scanf_float+0x12e>
 8008450:	6821      	ldr	r1, [r4, #0]
 8008452:	05c8      	lsls	r0, r1, #23
 8008454:	d51a      	bpl.n	800848c <_scanf_float+0x17c>
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800845c:	6021      	str	r1, [r4, #0]
 800845e:	f109 0901 	add.w	r9, r9, #1
 8008462:	b11b      	cbz	r3, 800846c <_scanf_float+0x15c>
 8008464:	3b01      	subs	r3, #1
 8008466:	3201      	adds	r2, #1
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	60a2      	str	r2, [r4, #8]
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	3b01      	subs	r3, #1
 8008470:	60a3      	str	r3, [r4, #8]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	3301      	adds	r3, #1
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3b01      	subs	r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	f340 8084 	ble.w	800858c <_scanf_float+0x27c>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	3301      	adds	r3, #1
 8008488:	603b      	str	r3, [r7, #0]
 800848a:	e766      	b.n	800835a <_scanf_float+0x4a>
 800848c:	eb1a 0f05 	cmn.w	sl, r5
 8008490:	f47f af70 	bne.w	8008374 <_scanf_float+0x64>
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800849a:	6022      	str	r2, [r4, #0]
 800849c:	f806 3b01 	strb.w	r3, [r6], #1
 80084a0:	e7e4      	b.n	800846c <_scanf_float+0x15c>
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	0610      	lsls	r0, r2, #24
 80084a6:	f57f af65 	bpl.w	8008374 <_scanf_float+0x64>
 80084aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ae:	e7f4      	b.n	800849a <_scanf_float+0x18a>
 80084b0:	f1ba 0f00 	cmp.w	sl, #0
 80084b4:	d10e      	bne.n	80084d4 <_scanf_float+0x1c4>
 80084b6:	f1b9 0f00 	cmp.w	r9, #0
 80084ba:	d10e      	bne.n	80084da <_scanf_float+0x1ca>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084c6:	d108      	bne.n	80084da <_scanf_float+0x1ca>
 80084c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084cc:	f04f 0a01 	mov.w	sl, #1
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	e7e3      	b.n	800849c <_scanf_float+0x18c>
 80084d4:	f1ba 0f02 	cmp.w	sl, #2
 80084d8:	d055      	beq.n	8008586 <_scanf_float+0x276>
 80084da:	2d01      	cmp	r5, #1
 80084dc:	d002      	beq.n	80084e4 <_scanf_float+0x1d4>
 80084de:	2d04      	cmp	r5, #4
 80084e0:	f47f af48 	bne.w	8008374 <_scanf_float+0x64>
 80084e4:	3501      	adds	r5, #1
 80084e6:	b2ed      	uxtb	r5, r5
 80084e8:	e7d8      	b.n	800849c <_scanf_float+0x18c>
 80084ea:	f1ba 0f01 	cmp.w	sl, #1
 80084ee:	f47f af41 	bne.w	8008374 <_scanf_float+0x64>
 80084f2:	f04f 0a02 	mov.w	sl, #2
 80084f6:	e7d1      	b.n	800849c <_scanf_float+0x18c>
 80084f8:	b97d      	cbnz	r5, 800851a <_scanf_float+0x20a>
 80084fa:	f1b9 0f00 	cmp.w	r9, #0
 80084fe:	f47f af3c 	bne.w	800837a <_scanf_float+0x6a>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008508:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800850c:	f47f af39 	bne.w	8008382 <_scanf_float+0x72>
 8008510:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008514:	2501      	movs	r5, #1
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	e7c0      	b.n	800849c <_scanf_float+0x18c>
 800851a:	2d03      	cmp	r5, #3
 800851c:	d0e2      	beq.n	80084e4 <_scanf_float+0x1d4>
 800851e:	2d05      	cmp	r5, #5
 8008520:	e7de      	b.n	80084e0 <_scanf_float+0x1d0>
 8008522:	2d02      	cmp	r5, #2
 8008524:	f47f af26 	bne.w	8008374 <_scanf_float+0x64>
 8008528:	2503      	movs	r5, #3
 800852a:	e7b7      	b.n	800849c <_scanf_float+0x18c>
 800852c:	2d06      	cmp	r5, #6
 800852e:	f47f af21 	bne.w	8008374 <_scanf_float+0x64>
 8008532:	2507      	movs	r5, #7
 8008534:	e7b2      	b.n	800849c <_scanf_float+0x18c>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	0591      	lsls	r1, r2, #22
 800853a:	f57f af1b 	bpl.w	8008374 <_scanf_float+0x64>
 800853e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	f8cd 9004 	str.w	r9, [sp, #4]
 8008548:	e7a8      	b.n	800849c <_scanf_float+0x18c>
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008550:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008554:	d006      	beq.n	8008564 <_scanf_float+0x254>
 8008556:	0550      	lsls	r0, r2, #21
 8008558:	f57f af0c 	bpl.w	8008374 <_scanf_float+0x64>
 800855c:	f1b9 0f00 	cmp.w	r9, #0
 8008560:	f43f af0f 	beq.w	8008382 <_scanf_float+0x72>
 8008564:	0591      	lsls	r1, r2, #22
 8008566:	bf58      	it	pl
 8008568:	9901      	ldrpl	r1, [sp, #4]
 800856a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800856e:	bf58      	it	pl
 8008570:	eba9 0101 	subpl.w	r1, r9, r1
 8008574:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008578:	f04f 0900 	mov.w	r9, #0
 800857c:	bf58      	it	pl
 800857e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	e78a      	b.n	800849c <_scanf_float+0x18c>
 8008586:	f04f 0a03 	mov.w	sl, #3
 800858a:	e787      	b.n	800849c <_scanf_float+0x18c>
 800858c:	4639      	mov	r1, r7
 800858e:	4640      	mov	r0, r8
 8008590:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008594:	4798      	blx	r3
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f aedf 	beq.w	800835a <_scanf_float+0x4a>
 800859c:	e6ea      	b.n	8008374 <_scanf_float+0x64>
 800859e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085a2:	463a      	mov	r2, r7
 80085a4:	4640      	mov	r0, r8
 80085a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085aa:	4798      	blx	r3
 80085ac:	6923      	ldr	r3, [r4, #16]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	e6ec      	b.n	800838e <_scanf_float+0x7e>
 80085b4:	1e6b      	subs	r3, r5, #1
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d825      	bhi.n	8008606 <_scanf_float+0x2f6>
 80085ba:	2d02      	cmp	r5, #2
 80085bc:	d836      	bhi.n	800862c <_scanf_float+0x31c>
 80085be:	455e      	cmp	r6, fp
 80085c0:	f67f aee8 	bls.w	8008394 <_scanf_float+0x84>
 80085c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085c8:	463a      	mov	r2, r7
 80085ca:	4640      	mov	r0, r8
 80085cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085d0:	4798      	blx	r3
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	e7f1      	b.n	80085be <_scanf_float+0x2ae>
 80085da:	9802      	ldr	r0, [sp, #8]
 80085dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085e4:	463a      	mov	r2, r7
 80085e6:	9002      	str	r0, [sp, #8]
 80085e8:	4640      	mov	r0, r8
 80085ea:	4798      	blx	r3
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f6:	fa5f fa8a 	uxtb.w	sl, sl
 80085fa:	f1ba 0f02 	cmp.w	sl, #2
 80085fe:	d1ec      	bne.n	80085da <_scanf_float+0x2ca>
 8008600:	3d03      	subs	r5, #3
 8008602:	b2ed      	uxtb	r5, r5
 8008604:	1b76      	subs	r6, r6, r5
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	05da      	lsls	r2, r3, #23
 800860a:	d52f      	bpl.n	800866c <_scanf_float+0x35c>
 800860c:	055b      	lsls	r3, r3, #21
 800860e:	d510      	bpl.n	8008632 <_scanf_float+0x322>
 8008610:	455e      	cmp	r6, fp
 8008612:	f67f aebf 	bls.w	8008394 <_scanf_float+0x84>
 8008616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800861a:	463a      	mov	r2, r7
 800861c:	4640      	mov	r0, r8
 800861e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008622:	4798      	blx	r3
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	3b01      	subs	r3, #1
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	e7f1      	b.n	8008610 <_scanf_float+0x300>
 800862c:	46aa      	mov	sl, r5
 800862e:	9602      	str	r6, [sp, #8]
 8008630:	e7df      	b.n	80085f2 <_scanf_float+0x2e2>
 8008632:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	2965      	cmp	r1, #101	; 0x65
 800863a:	f103 33ff 	add.w	r3, r3, #4294967295
 800863e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	d00c      	beq.n	8008660 <_scanf_float+0x350>
 8008646:	2945      	cmp	r1, #69	; 0x45
 8008648:	d00a      	beq.n	8008660 <_scanf_float+0x350>
 800864a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800864e:	463a      	mov	r2, r7
 8008650:	4640      	mov	r0, r8
 8008652:	4798      	blx	r3
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800865a:	3b01      	subs	r3, #1
 800865c:	1eb5      	subs	r5, r6, #2
 800865e:	6123      	str	r3, [r4, #16]
 8008660:	463a      	mov	r2, r7
 8008662:	4640      	mov	r0, r8
 8008664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008668:	4798      	blx	r3
 800866a:	462e      	mov	r6, r5
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	f015 0510 	ands.w	r5, r5, #16
 8008672:	d155      	bne.n	8008720 <_scanf_float+0x410>
 8008674:	7035      	strb	r5, [r6, #0]
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800867c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008680:	d11d      	bne.n	80086be <_scanf_float+0x3ae>
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	454b      	cmp	r3, r9
 8008686:	eba3 0209 	sub.w	r2, r3, r9
 800868a:	d125      	bne.n	80086d8 <_scanf_float+0x3c8>
 800868c:	2200      	movs	r2, #0
 800868e:	4659      	mov	r1, fp
 8008690:	4640      	mov	r0, r8
 8008692:	f002 fc35 	bl	800af00 <_strtod_r>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	f8d4 c000 	ldr.w	ip, [r4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f01c 0f02 	tst.w	ip, #2
 80086a2:	4606      	mov	r6, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	f103 0204 	add.w	r2, r3, #4
 80086aa:	d020      	beq.n	80086ee <_scanf_float+0x3de>
 80086ac:	9903      	ldr	r1, [sp, #12]
 80086ae:	600a      	str	r2, [r1, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	e9c3 6700 	strd	r6, r7, [r3]
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60e3      	str	r3, [r4, #12]
 80086bc:	e66b      	b.n	8008396 <_scanf_float+0x86>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0e3      	beq.n	800868c <_scanf_float+0x37c>
 80086c4:	9905      	ldr	r1, [sp, #20]
 80086c6:	230a      	movs	r3, #10
 80086c8:	462a      	mov	r2, r5
 80086ca:	4640      	mov	r0, r8
 80086cc:	3101      	adds	r1, #1
 80086ce:	f002 fc9b 	bl	800b008 <_strtol_r>
 80086d2:	9b04      	ldr	r3, [sp, #16]
 80086d4:	9e05      	ldr	r6, [sp, #20]
 80086d6:	1ac2      	subs	r2, r0, r3
 80086d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086dc:	429e      	cmp	r6, r3
 80086de:	bf28      	it	cs
 80086e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086e4:	4630      	mov	r0, r6
 80086e6:	490f      	ldr	r1, [pc, #60]	; (8008724 <_scanf_float+0x414>)
 80086e8:	f000 f8f4 	bl	80088d4 <siprintf>
 80086ec:	e7ce      	b.n	800868c <_scanf_float+0x37c>
 80086ee:	f01c 0f04 	tst.w	ip, #4
 80086f2:	d1db      	bne.n	80086ac <_scanf_float+0x39c>
 80086f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80086f8:	f8cc 2000 	str.w	r2, [ip]
 80086fc:	f8d3 8000 	ldr.w	r8, [r3]
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	f7f8 f9ee 	bl	8000ae4 <__aeabi_dcmpun>
 8008708:	b128      	cbz	r0, 8008716 <_scanf_float+0x406>
 800870a:	4807      	ldr	r0, [pc, #28]	; (8008728 <_scanf_float+0x418>)
 800870c:	f000 f9d4 	bl	8008ab8 <nanf>
 8008710:	f8c8 0000 	str.w	r0, [r8]
 8008714:	e7cf      	b.n	80086b6 <_scanf_float+0x3a6>
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 fa41 	bl	8000ba0 <__aeabi_d2f>
 800871e:	e7f7      	b.n	8008710 <_scanf_float+0x400>
 8008720:	2500      	movs	r5, #0
 8008722:	e638      	b.n	8008396 <_scanf_float+0x86>
 8008724:	0800c43a 	.word	0x0800c43a
 8008728:	0800c7cd 	.word	0x0800c7cd

0800872c <std>:
 800872c:	2300      	movs	r3, #0
 800872e:	b510      	push	{r4, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	e9c0 3300 	strd	r3, r3, [r0]
 8008736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800873a:	6083      	str	r3, [r0, #8]
 800873c:	8181      	strh	r1, [r0, #12]
 800873e:	6643      	str	r3, [r0, #100]	; 0x64
 8008740:	81c2      	strh	r2, [r0, #14]
 8008742:	6183      	str	r3, [r0, #24]
 8008744:	4619      	mov	r1, r3
 8008746:	2208      	movs	r2, #8
 8008748:	305c      	adds	r0, #92	; 0x5c
 800874a:	f000 f926 	bl	800899a <memset>
 800874e:	4b0d      	ldr	r3, [pc, #52]	; (8008784 <std+0x58>)
 8008750:	6224      	str	r4, [r4, #32]
 8008752:	6263      	str	r3, [r4, #36]	; 0x24
 8008754:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <std+0x5c>)
 8008756:	62a3      	str	r3, [r4, #40]	; 0x28
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <std+0x60>)
 800875a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <std+0x64>)
 800875e:	6323      	str	r3, [r4, #48]	; 0x30
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <std+0x68>)
 8008762:	429c      	cmp	r4, r3
 8008764:	d006      	beq.n	8008774 <std+0x48>
 8008766:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800876a:	4294      	cmp	r4, r2
 800876c:	d002      	beq.n	8008774 <std+0x48>
 800876e:	33d0      	adds	r3, #208	; 0xd0
 8008770:	429c      	cmp	r4, r3
 8008772:	d105      	bne.n	8008780 <std+0x54>
 8008774:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877c:	f000 b98a 	b.w	8008a94 <__retarget_lock_init_recursive>
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop
 8008784:	08008915 	.word	0x08008915
 8008788:	08008937 	.word	0x08008937
 800878c:	0800896f 	.word	0x0800896f
 8008790:	08008993 	.word	0x08008993
 8008794:	200005dc 	.word	0x200005dc

08008798 <stdio_exit_handler>:
 8008798:	4a02      	ldr	r2, [pc, #8]	; (80087a4 <stdio_exit_handler+0xc>)
 800879a:	4903      	ldr	r1, [pc, #12]	; (80087a8 <stdio_exit_handler+0x10>)
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <stdio_exit_handler+0x14>)
 800879e:	f000 b869 	b.w	8008874 <_fwalk_sglue>
 80087a2:	bf00      	nop
 80087a4:	20000028 	.word	0x20000028
 80087a8:	0800b645 	.word	0x0800b645
 80087ac:	20000034 	.word	0x20000034

080087b0 <cleanup_stdio>:
 80087b0:	6841      	ldr	r1, [r0, #4]
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <cleanup_stdio+0x34>)
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4299      	cmp	r1, r3
 80087b8:	4604      	mov	r4, r0
 80087ba:	d001      	beq.n	80087c0 <cleanup_stdio+0x10>
 80087bc:	f002 ff42 	bl	800b644 <_fflush_r>
 80087c0:	68a1      	ldr	r1, [r4, #8]
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <cleanup_stdio+0x38>)
 80087c4:	4299      	cmp	r1, r3
 80087c6:	d002      	beq.n	80087ce <cleanup_stdio+0x1e>
 80087c8:	4620      	mov	r0, r4
 80087ca:	f002 ff3b 	bl	800b644 <_fflush_r>
 80087ce:	68e1      	ldr	r1, [r4, #12]
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <cleanup_stdio+0x3c>)
 80087d2:	4299      	cmp	r1, r3
 80087d4:	d004      	beq.n	80087e0 <cleanup_stdio+0x30>
 80087d6:	4620      	mov	r0, r4
 80087d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087dc:	f002 bf32 	b.w	800b644 <_fflush_r>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	200005dc 	.word	0x200005dc
 80087e8:	20000644 	.word	0x20000644
 80087ec:	200006ac 	.word	0x200006ac

080087f0 <global_stdio_init.part.0>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <global_stdio_init.part.0+0x30>)
 80087f4:	4c0b      	ldr	r4, [pc, #44]	; (8008824 <global_stdio_init.part.0+0x34>)
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <global_stdio_init.part.0+0x38>)
 80087f8:	4620      	mov	r0, r4
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	2104      	movs	r1, #4
 80087fe:	2200      	movs	r2, #0
 8008800:	f7ff ff94 	bl	800872c <std>
 8008804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008808:	2201      	movs	r2, #1
 800880a:	2109      	movs	r1, #9
 800880c:	f7ff ff8e 	bl	800872c <std>
 8008810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008814:	2202      	movs	r2, #2
 8008816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881a:	2112      	movs	r1, #18
 800881c:	f7ff bf86 	b.w	800872c <std>
 8008820:	20000714 	.word	0x20000714
 8008824:	200005dc 	.word	0x200005dc
 8008828:	08008799 	.word	0x08008799

0800882c <__sfp_lock_acquire>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sfp_lock_acquire+0x8>)
 800882e:	f000 b932 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 8008832:	bf00      	nop
 8008834:	2000071d 	.word	0x2000071d

08008838 <__sfp_lock_release>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_release+0x8>)
 800883a:	f000 b92d 	b.w	8008a98 <__retarget_lock_release_recursive>
 800883e:	bf00      	nop
 8008840:	2000071d 	.word	0x2000071d

08008844 <__sinit>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4604      	mov	r4, r0
 8008848:	f7ff fff0 	bl	800882c <__sfp_lock_acquire>
 800884c:	6a23      	ldr	r3, [r4, #32]
 800884e:	b11b      	cbz	r3, 8008858 <__sinit+0x14>
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	f7ff bff0 	b.w	8008838 <__sfp_lock_release>
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <__sinit+0x28>)
 800885a:	6223      	str	r3, [r4, #32]
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <__sinit+0x2c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f5      	bne.n	8008850 <__sinit+0xc>
 8008864:	f7ff ffc4 	bl	80087f0 <global_stdio_init.part.0>
 8008868:	e7f2      	b.n	8008850 <__sinit+0xc>
 800886a:	bf00      	nop
 800886c:	080087b1 	.word	0x080087b1
 8008870:	20000714 	.word	0x20000714

08008874 <_fwalk_sglue>:
 8008874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008878:	4607      	mov	r7, r0
 800887a:	4688      	mov	r8, r1
 800887c:	4614      	mov	r4, r2
 800887e:	2600      	movs	r6, #0
 8008880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008884:	f1b9 0901 	subs.w	r9, r9, #1
 8008888:	d505      	bpl.n	8008896 <_fwalk_sglue+0x22>
 800888a:	6824      	ldr	r4, [r4, #0]
 800888c:	2c00      	cmp	r4, #0
 800888e:	d1f7      	bne.n	8008880 <_fwalk_sglue+0xc>
 8008890:	4630      	mov	r0, r6
 8008892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d907      	bls.n	80088ac <_fwalk_sglue+0x38>
 800889c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a0:	3301      	adds	r3, #1
 80088a2:	d003      	beq.n	80088ac <_fwalk_sglue+0x38>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4638      	mov	r0, r7
 80088a8:	47c0      	blx	r8
 80088aa:	4306      	orrs	r6, r0
 80088ac:	3568      	adds	r5, #104	; 0x68
 80088ae:	e7e9      	b.n	8008884 <_fwalk_sglue+0x10>

080088b0 <iprintf>:
 80088b0:	b40f      	push	{r0, r1, r2, r3}
 80088b2:	b507      	push	{r0, r1, r2, lr}
 80088b4:	4906      	ldr	r1, [pc, #24]	; (80088d0 <iprintf+0x20>)
 80088b6:	ab04      	add	r3, sp, #16
 80088b8:	6808      	ldr	r0, [r1, #0]
 80088ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80088be:	6881      	ldr	r1, [r0, #8]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	f002 fd23 	bl	800b30c <_vfiprintf_r>
 80088c6:	b003      	add	sp, #12
 80088c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088cc:	b004      	add	sp, #16
 80088ce:	4770      	bx	lr
 80088d0:	20000080 	.word	0x20000080

080088d4 <siprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088da:	b500      	push	{lr}
 80088dc:	b09c      	sub	sp, #112	; 0x70
 80088de:	ab1d      	add	r3, sp, #116	; 0x74
 80088e0:	9002      	str	r0, [sp, #8]
 80088e2:	9006      	str	r0, [sp, #24]
 80088e4:	9107      	str	r1, [sp, #28]
 80088e6:	9104      	str	r1, [sp, #16]
 80088e8:	4808      	ldr	r0, [pc, #32]	; (800890c <siprintf+0x38>)
 80088ea:	4909      	ldr	r1, [pc, #36]	; (8008910 <siprintf+0x3c>)
 80088ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	6800      	ldr	r0, [r0, #0]
 80088f4:	a902      	add	r1, sp, #8
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	f002 fbe2 	bl	800b0c0 <_svfiprintf_r>
 80088fc:	2200      	movs	r2, #0
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	b01c      	add	sp, #112	; 0x70
 8008904:	f85d eb04 	ldr.w	lr, [sp], #4
 8008908:	b003      	add	sp, #12
 800890a:	4770      	bx	lr
 800890c:	20000080 	.word	0x20000080
 8008910:	ffff0208 	.word	0xffff0208

08008914 <__sread>:
 8008914:	b510      	push	{r4, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	f000 f86c 	bl	80089f8 <_read_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	bfab      	itete	ge
 8008924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008926:	89a3      	ldrhlt	r3, [r4, #12]
 8008928:	181b      	addge	r3, r3, r0
 800892a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800892e:	bfac      	ite	ge
 8008930:	6563      	strge	r3, [r4, #84]	; 0x54
 8008932:	81a3      	strhlt	r3, [r4, #12]
 8008934:	bd10      	pop	{r4, pc}

08008936 <__swrite>:
 8008936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	461f      	mov	r7, r3
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	4605      	mov	r5, r0
 8008940:	05db      	lsls	r3, r3, #23
 8008942:	460c      	mov	r4, r1
 8008944:	4616      	mov	r6, r2
 8008946:	d505      	bpl.n	8008954 <__swrite+0x1e>
 8008948:	2302      	movs	r3, #2
 800894a:	2200      	movs	r2, #0
 800894c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008950:	f000 f840 	bl	80089d4 <_lseek_r>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	4632      	mov	r2, r6
 8008958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	4628      	mov	r0, r5
 8008960:	463b      	mov	r3, r7
 8008962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	f000 b857 	b.w	8008a1c <_write_r>

0800896e <__sseek>:
 800896e:	b510      	push	{r4, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008976:	f000 f82d 	bl	80089d4 <_lseek_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	bf15      	itete	ne
 8008980:	6560      	strne	r0, [r4, #84]	; 0x54
 8008982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800898a:	81a3      	strheq	r3, [r4, #12]
 800898c:	bf18      	it	ne
 800898e:	81a3      	strhne	r3, [r4, #12]
 8008990:	bd10      	pop	{r4, pc}

08008992 <__sclose>:
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 b80d 	b.w	80089b4 <_close_r>

0800899a <memset>:
 800899a:	4603      	mov	r3, r0
 800899c:	4402      	add	r2, r0
 800899e:	4293      	cmp	r3, r2
 80089a0:	d100      	bne.n	80089a4 <memset+0xa>
 80089a2:	4770      	bx	lr
 80089a4:	f803 1b01 	strb.w	r1, [r3], #1
 80089a8:	e7f9      	b.n	800899e <memset+0x4>
	...

080089ac <_localeconv_r>:
 80089ac:	4800      	ldr	r0, [pc, #0]	; (80089b0 <_localeconv_r+0x4>)
 80089ae:	4770      	bx	lr
 80089b0:	20000174 	.word	0x20000174

080089b4 <_close_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	2300      	movs	r3, #0
 80089b8:	4d05      	ldr	r5, [pc, #20]	; (80089d0 <_close_r+0x1c>)
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	f7f9 ff4e 	bl	8002860 <_close>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_close_r+0x1a>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_close_r+0x1a>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	20000718 	.word	0x20000718

080089d4 <_lseek_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	2200      	movs	r2, #0
 80089de:	4d05      	ldr	r5, [pc, #20]	; (80089f4 <_lseek_r+0x20>)
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7f9 ff60 	bl	80028a8 <_lseek>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_lseek_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_lseek_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000718 	.word	0x20000718

080089f8 <_read_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	4d05      	ldr	r5, [pc, #20]	; (8008a18 <_read_r+0x20>)
 8008a04:	602a      	str	r2, [r5, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7f9 fef1 	bl	80027ee <_read>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_read_r+0x1e>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_read_r+0x1e>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	20000718 	.word	0x20000718

08008a1c <_write_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	4d05      	ldr	r5, [pc, #20]	; (8008a3c <_write_r+0x20>)
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f9 fefc 	bl	8002828 <_write>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_write_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_write_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	20000718 	.word	0x20000718

08008a40 <__errno>:
 8008a40:	4b01      	ldr	r3, [pc, #4]	; (8008a48 <__errno+0x8>)
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20000080 	.word	0x20000080

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	2600      	movs	r6, #0
 8008a50:	4d0c      	ldr	r5, [pc, #48]	; (8008a84 <__libc_init_array+0x38>)
 8008a52:	4c0d      	ldr	r4, [pc, #52]	; (8008a88 <__libc_init_array+0x3c>)
 8008a54:	1b64      	subs	r4, r4, r5
 8008a56:	10a4      	asrs	r4, r4, #2
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	f003 fbc4 	bl	800c1e8 <_init>
 8008a60:	2600      	movs	r6, #0
 8008a62:	4d0a      	ldr	r5, [pc, #40]	; (8008a8c <__libc_init_array+0x40>)
 8008a64:	4c0a      	ldr	r4, [pc, #40]	; (8008a90 <__libc_init_array+0x44>)
 8008a66:	1b64      	subs	r4, r4, r5
 8008a68:	10a4      	asrs	r4, r4, #2
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	0800c830 	.word	0x0800c830
 8008a88:	0800c830 	.word	0x0800c830
 8008a8c:	0800c830 	.word	0x0800c830
 8008a90:	0800c834 	.word	0x0800c834

08008a94 <__retarget_lock_init_recursive>:
 8008a94:	4770      	bx	lr

08008a96 <__retarget_lock_acquire_recursive>:
 8008a96:	4770      	bx	lr

08008a98 <__retarget_lock_release_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <memchr>:
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	b2c9      	uxtb	r1, r1
 8008aa0:	4402      	add	r2, r0
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	d101      	bne.n	8008aac <memchr+0x12>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e003      	b.n	8008ab4 <memchr+0x1a>
 8008aac:	7804      	ldrb	r4, [r0, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	428c      	cmp	r4, r1
 8008ab2:	d1f6      	bne.n	8008aa2 <memchr+0x8>
 8008ab4:	bd10      	pop	{r4, pc}
	...

08008ab8 <nanf>:
 8008ab8:	4800      	ldr	r0, [pc, #0]	; (8008abc <nanf+0x4>)
 8008aba:	4770      	bx	lr
 8008abc:	7fc00000 	.word	0x7fc00000

08008ac0 <quorem>:
 8008ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	6903      	ldr	r3, [r0, #16]
 8008ac6:	690c      	ldr	r4, [r1, #16]
 8008ac8:	4607      	mov	r7, r0
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	db7f      	blt.n	8008bce <quorem+0x10e>
 8008ace:	3c01      	subs	r4, #1
 8008ad0:	f100 0514 	add.w	r5, r0, #20
 8008ad4:	f101 0814 	add.w	r8, r1, #20
 8008ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008af2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008af6:	d331      	bcc.n	8008b5c <quorem+0x9c>
 8008af8:	f04f 0e00 	mov.w	lr, #0
 8008afc:	4640      	mov	r0, r8
 8008afe:	46ac      	mov	ip, r5
 8008b00:	46f2      	mov	sl, lr
 8008b02:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b06:	b293      	uxth	r3, r2
 8008b08:	fb06 e303 	mla	r3, r6, r3, lr
 8008b0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b10:	0c1a      	lsrs	r2, r3, #16
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	fb06 220e 	mla	r2, r6, lr, r2
 8008b18:	ebaa 0303 	sub.w	r3, sl, r3
 8008b1c:	f8dc a000 	ldr.w	sl, [ip]
 8008b20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b24:	fa1f fa8a 	uxth.w	sl, sl
 8008b28:	4453      	add	r3, sl
 8008b2a:	f8dc a000 	ldr.w	sl, [ip]
 8008b2e:	b292      	uxth	r2, r2
 8008b30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3e:	4581      	cmp	r9, r0
 8008b40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b44:	f84c 3b04 	str.w	r3, [ip], #4
 8008b48:	d2db      	bcs.n	8008b02 <quorem+0x42>
 8008b4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b4e:	b92b      	cbnz	r3, 8008b5c <quorem+0x9c>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	3b04      	subs	r3, #4
 8008b54:	429d      	cmp	r5, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	d32d      	bcc.n	8008bb6 <quorem+0xf6>
 8008b5a:	613c      	str	r4, [r7, #16]
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f001 f9df 	bl	8009f20 <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	db23      	blt.n	8008bae <quorem+0xee>
 8008b66:	4629      	mov	r1, r5
 8008b68:	2000      	movs	r0, #0
 8008b6a:	3601      	adds	r6, #1
 8008b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b70:	f8d1 c000 	ldr.w	ip, [r1]
 8008b74:	b293      	uxth	r3, r2
 8008b76:	1ac3      	subs	r3, r0, r3
 8008b78:	0c12      	lsrs	r2, r2, #16
 8008b7a:	fa1f f08c 	uxth.w	r0, ip
 8008b7e:	4403      	add	r3, r0
 8008b80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8e:	45c1      	cmp	r9, r8
 8008b90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b94:	f841 3b04 	str.w	r3, [r1], #4
 8008b98:	d2e8      	bcs.n	8008b6c <quorem+0xac>
 8008b9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ba2:	b922      	cbnz	r2, 8008bae <quorem+0xee>
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	d30a      	bcc.n	8008bc2 <quorem+0x102>
 8008bac:	613c      	str	r4, [r7, #16]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	b003      	add	sp, #12
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	d1cd      	bne.n	8008b5a <quorem+0x9a>
 8008bbe:	3c01      	subs	r4, #1
 8008bc0:	e7c8      	b.n	8008b54 <quorem+0x94>
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d1f0      	bne.n	8008bac <quorem+0xec>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	e7eb      	b.n	8008ba6 <quorem+0xe6>
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e7ee      	b.n	8008bb0 <quorem+0xf0>
 8008bd2:	0000      	movs	r0, r0
 8008bd4:	0000      	movs	r0, r0
	...

08008bd8 <_dtoa_r>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4616      	mov	r6, r2
 8008bde:	461f      	mov	r7, r3
 8008be0:	69c4      	ldr	r4, [r0, #28]
 8008be2:	b099      	sub	sp, #100	; 0x64
 8008be4:	4605      	mov	r5, r0
 8008be6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008bea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008bee:	b974      	cbnz	r4, 8008c0e <_dtoa_r+0x36>
 8008bf0:	2010      	movs	r0, #16
 8008bf2:	f000 fe1d 	bl	8009830 <malloc>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	61e8      	str	r0, [r5, #28]
 8008bfa:	b920      	cbnz	r0, 8008c06 <_dtoa_r+0x2e>
 8008bfc:	21ef      	movs	r1, #239	; 0xef
 8008bfe:	4bac      	ldr	r3, [pc, #688]	; (8008eb0 <_dtoa_r+0x2d8>)
 8008c00:	48ac      	ldr	r0, [pc, #688]	; (8008eb4 <_dtoa_r+0x2dc>)
 8008c02:	f002 fe2d 	bl	800b860 <__assert_func>
 8008c06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c0a:	6004      	str	r4, [r0, #0]
 8008c0c:	60c4      	str	r4, [r0, #12]
 8008c0e:	69eb      	ldr	r3, [r5, #28]
 8008c10:	6819      	ldr	r1, [r3, #0]
 8008c12:	b151      	cbz	r1, 8008c2a <_dtoa_r+0x52>
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	4093      	lsls	r3, r2
 8008c1a:	604a      	str	r2, [r1, #4]
 8008c1c:	608b      	str	r3, [r1, #8]
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fefa 	bl	8009a18 <_Bfree>
 8008c24:	2200      	movs	r2, #0
 8008c26:	69eb      	ldr	r3, [r5, #28]
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	1e3b      	subs	r3, r7, #0
 8008c2c:	bfaf      	iteee	ge
 8008c2e:	2300      	movge	r3, #0
 8008c30:	2201      	movlt	r2, #1
 8008c32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c36:	9305      	strlt	r3, [sp, #20]
 8008c38:	bfa8      	it	ge
 8008c3a:	f8c8 3000 	strge.w	r3, [r8]
 8008c3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008c42:	4b9d      	ldr	r3, [pc, #628]	; (8008eb8 <_dtoa_r+0x2e0>)
 8008c44:	bfb8      	it	lt
 8008c46:	f8c8 2000 	strlt.w	r2, [r8]
 8008c4a:	ea33 0309 	bics.w	r3, r3, r9
 8008c4e:	d119      	bne.n	8008c84 <_dtoa_r+0xac>
 8008c50:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c5c:	4333      	orrs	r3, r6
 8008c5e:	f000 8589 	beq.w	8009774 <_dtoa_r+0xb9c>
 8008c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c64:	b953      	cbnz	r3, 8008c7c <_dtoa_r+0xa4>
 8008c66:	4b95      	ldr	r3, [pc, #596]	; (8008ebc <_dtoa_r+0x2e4>)
 8008c68:	e023      	b.n	8008cb2 <_dtoa_r+0xda>
 8008c6a:	4b95      	ldr	r3, [pc, #596]	; (8008ec0 <_dtoa_r+0x2e8>)
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	9803      	ldr	r0, [sp, #12]
 8008c76:	b019      	add	sp, #100	; 0x64
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4b8f      	ldr	r3, [pc, #572]	; (8008ebc <_dtoa_r+0x2e4>)
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	3303      	adds	r3, #3
 8008c82:	e7f5      	b.n	8008c70 <_dtoa_r+0x98>
 8008c84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c90:	2200      	movs	r2, #0
 8008c92:	2300      	movs	r3, #0
 8008c94:	f7f7 fef4 	bl	8000a80 <__aeabi_dcmpeq>
 8008c98:	4680      	mov	r8, r0
 8008c9a:	b160      	cbz	r0, 8008cb6 <_dtoa_r+0xde>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8562 	beq.w	800976e <_dtoa_r+0xb96>
 8008caa:	4b86      	ldr	r3, [pc, #536]	; (8008ec4 <_dtoa_r+0x2ec>)
 8008cac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	9303      	str	r3, [sp, #12]
 8008cb4:	e7de      	b.n	8008c74 <_dtoa_r+0x9c>
 8008cb6:	ab16      	add	r3, sp, #88	; 0x58
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	ab17      	add	r3, sp, #92	; 0x5c
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cc4:	f001 fa3c 	bl	800a140 <__d2b>
 8008cc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008ccc:	4682      	mov	sl, r0
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	d07e      	beq.n	8008dd0 <_dtoa_r+0x1f8>
 8008cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cd8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ce8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008cec:	4619      	mov	r1, r3
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4b75      	ldr	r3, [pc, #468]	; (8008ec8 <_dtoa_r+0x2f0>)
 8008cf2:	f7f7 faa5 	bl	8000240 <__aeabi_dsub>
 8008cf6:	a368      	add	r3, pc, #416	; (adr r3, 8008e98 <_dtoa_r+0x2c0>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fc58 	bl	80005b0 <__aeabi_dmul>
 8008d00:	a367      	add	r3, pc, #412	; (adr r3, 8008ea0 <_dtoa_r+0x2c8>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fa9d 	bl	8000244 <__adddf3>
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	460f      	mov	r7, r1
 8008d10:	f7f7 fbe4 	bl	80004dc <__aeabi_i2d>
 8008d14:	a364      	add	r3, pc, #400	; (adr r3, 8008ea8 <_dtoa_r+0x2d0>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f7f7 fc49 	bl	80005b0 <__aeabi_dmul>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 fa8d 	bl	8000244 <__adddf3>
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	f7f7 feef 	bl	8000b10 <__aeabi_d2iz>
 8008d32:	2200      	movs	r2, #0
 8008d34:	4683      	mov	fp, r0
 8008d36:	2300      	movs	r3, #0
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 feaa 	bl	8000a94 <__aeabi_dcmplt>
 8008d40:	b148      	cbz	r0, 8008d56 <_dtoa_r+0x17e>
 8008d42:	4658      	mov	r0, fp
 8008d44:	f7f7 fbca 	bl	80004dc <__aeabi_i2d>
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	f7f7 fe98 	bl	8000a80 <__aeabi_dcmpeq>
 8008d50:	b908      	cbnz	r0, 8008d56 <_dtoa_r+0x17e>
 8008d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d56:	f1bb 0f16 	cmp.w	fp, #22
 8008d5a:	d857      	bhi.n	8008e0c <_dtoa_r+0x234>
 8008d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d60:	4b5a      	ldr	r3, [pc, #360]	; (8008ecc <_dtoa_r+0x2f4>)
 8008d62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 fe93 	bl	8000a94 <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d04e      	beq.n	8008e10 <_dtoa_r+0x238>
 8008d72:	2300      	movs	r3, #0
 8008d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d7c:	1b1b      	subs	r3, r3, r4
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	bf46      	itte	mi
 8008d82:	f1c3 0901 	rsbmi	r9, r3, #1
 8008d86:	2300      	movmi	r3, #0
 8008d88:	f04f 0900 	movpl.w	r9, #0
 8008d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d8e:	bf48      	it	mi
 8008d90:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008d92:	f1bb 0f00 	cmp.w	fp, #0
 8008d96:	db3d      	blt.n	8008e14 <_dtoa_r+0x23c>
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008d9e:	445b      	add	r3, fp
 8008da0:	9309      	str	r3, [sp, #36]	; 0x24
 8008da2:	2300      	movs	r3, #0
 8008da4:	930a      	str	r3, [sp, #40]	; 0x28
 8008da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008da8:	2b09      	cmp	r3, #9
 8008daa:	d867      	bhi.n	8008e7c <_dtoa_r+0x2a4>
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	bfc4      	itt	gt
 8008db0:	3b04      	subgt	r3, #4
 8008db2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008db6:	bfc8      	it	gt
 8008db8:	2400      	movgt	r4, #0
 8008dba:	f1a3 0302 	sub.w	r3, r3, #2
 8008dbe:	bfd8      	it	le
 8008dc0:	2401      	movle	r4, #1
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f200 8086 	bhi.w	8008ed4 <_dtoa_r+0x2fc>
 8008dc8:	e8df f003 	tbb	[pc, r3]
 8008dcc:	5637392c 	.word	0x5637392c
 8008dd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008dd4:	441c      	add	r4, r3
 8008dd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	bfc1      	itttt	gt
 8008dde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008de2:	fa09 f903 	lslgt.w	r9, r9, r3
 8008de6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008dea:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008dee:	bfd6      	itet	le
 8008df0:	f1c3 0320 	rsble	r3, r3, #32
 8008df4:	ea49 0003 	orrgt.w	r0, r9, r3
 8008df8:	fa06 f003 	lslle.w	r0, r6, r3
 8008dfc:	f7f7 fb5e 	bl	80004bc <__aeabi_ui2d>
 8008e00:	2201      	movs	r2, #1
 8008e02:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e06:	3c01      	subs	r4, #1
 8008e08:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e0a:	e76f      	b.n	8008cec <_dtoa_r+0x114>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e7b3      	b.n	8008d78 <_dtoa_r+0x1a0>
 8008e10:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e12:	e7b2      	b.n	8008d7a <_dtoa_r+0x1a2>
 8008e14:	f1cb 0300 	rsb	r3, fp, #0
 8008e18:	930a      	str	r3, [sp, #40]	; 0x28
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	eba9 090b 	sub.w	r9, r9, fp
 8008e20:	930e      	str	r3, [sp, #56]	; 0x38
 8008e22:	e7c0      	b.n	8008da6 <_dtoa_r+0x1ce>
 8008e24:	2300      	movs	r3, #0
 8008e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dc55      	bgt.n	8008eda <_dtoa_r+0x302>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	461a      	mov	r2, r3
 8008e32:	9306      	str	r3, [sp, #24]
 8008e34:	9308      	str	r3, [sp, #32]
 8008e36:	9223      	str	r2, [sp, #140]	; 0x8c
 8008e38:	e00b      	b.n	8008e52 <_dtoa_r+0x27a>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7f3      	b.n	8008e26 <_dtoa_r+0x24e>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e44:	445b      	add	r3, fp
 8008e46:	9306      	str	r3, [sp, #24]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	9308      	str	r3, [sp, #32]
 8008e4e:	bfb8      	it	lt
 8008e50:	2301      	movlt	r3, #1
 8008e52:	2100      	movs	r1, #0
 8008e54:	2204      	movs	r2, #4
 8008e56:	69e8      	ldr	r0, [r5, #28]
 8008e58:	f102 0614 	add.w	r6, r2, #20
 8008e5c:	429e      	cmp	r6, r3
 8008e5e:	d940      	bls.n	8008ee2 <_dtoa_r+0x30a>
 8008e60:	6041      	str	r1, [r0, #4]
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 fd98 	bl	8009998 <_Balloc>
 8008e68:	9003      	str	r0, [sp, #12]
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d13c      	bne.n	8008ee8 <_dtoa_r+0x310>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f240 11af 	movw	r1, #431	; 0x1af
 8008e74:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <_dtoa_r+0x2f8>)
 8008e76:	e6c3      	b.n	8008c00 <_dtoa_r+0x28>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7e1      	b.n	8008e40 <_dtoa_r+0x268>
 8008e7c:	2401      	movs	r4, #1
 8008e7e:	2300      	movs	r3, #0
 8008e80:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e82:	9322      	str	r3, [sp, #136]	; 0x88
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295
 8008e88:	2200      	movs	r2, #0
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	9308      	str	r3, [sp, #32]
 8008e8e:	2312      	movs	r3, #18
 8008e90:	e7d1      	b.n	8008e36 <_dtoa_r+0x25e>
 8008e92:	bf00      	nop
 8008e94:	f3af 8000 	nop.w
 8008e98:	636f4361 	.word	0x636f4361
 8008e9c:	3fd287a7 	.word	0x3fd287a7
 8008ea0:	8b60c8b3 	.word	0x8b60c8b3
 8008ea4:	3fc68a28 	.word	0x3fc68a28
 8008ea8:	509f79fb 	.word	0x509f79fb
 8008eac:	3fd34413 	.word	0x3fd34413
 8008eb0:	0800c44c 	.word	0x0800c44c
 8008eb4:	0800c463 	.word	0x0800c463
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	0800c448 	.word	0x0800c448
 8008ec0:	0800c43f 	.word	0x0800c43f
 8008ec4:	0800c417 	.word	0x0800c417
 8008ec8:	3ff80000 	.word	0x3ff80000
 8008ecc:	0800c550 	.word	0x0800c550
 8008ed0:	0800c4bb 	.word	0x0800c4bb
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed8:	e7d4      	b.n	8008e84 <_dtoa_r+0x2ac>
 8008eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008edc:	9306      	str	r3, [sp, #24]
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	e7b7      	b.n	8008e52 <_dtoa_r+0x27a>
 8008ee2:	3101      	adds	r1, #1
 8008ee4:	0052      	lsls	r2, r2, #1
 8008ee6:	e7b7      	b.n	8008e58 <_dtoa_r+0x280>
 8008ee8:	69eb      	ldr	r3, [r5, #28]
 8008eea:	9a03      	ldr	r2, [sp, #12]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	9b08      	ldr	r3, [sp, #32]
 8008ef0:	2b0e      	cmp	r3, #14
 8008ef2:	f200 80a8 	bhi.w	8009046 <_dtoa_r+0x46e>
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	f000 80a5 	beq.w	8009046 <_dtoa_r+0x46e>
 8008efc:	f1bb 0f00 	cmp.w	fp, #0
 8008f00:	dd34      	ble.n	8008f6c <_dtoa_r+0x394>
 8008f02:	4b9a      	ldr	r3, [pc, #616]	; (800916c <_dtoa_r+0x594>)
 8008f04:	f00b 020f 	and.w	r2, fp, #15
 8008f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f18:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008f1c:	d016      	beq.n	8008f4c <_dtoa_r+0x374>
 8008f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f22:	4b93      	ldr	r3, [pc, #588]	; (8009170 <_dtoa_r+0x598>)
 8008f24:	2703      	movs	r7, #3
 8008f26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f2a:	f7f7 fc6b 	bl	8000804 <__aeabi_ddiv>
 8008f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f32:	f004 040f 	and.w	r4, r4, #15
 8008f36:	4e8e      	ldr	r6, [pc, #568]	; (8009170 <_dtoa_r+0x598>)
 8008f38:	b954      	cbnz	r4, 8008f50 <_dtoa_r+0x378>
 8008f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f42:	f7f7 fc5f 	bl	8000804 <__aeabi_ddiv>
 8008f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f4a:	e029      	b.n	8008fa0 <_dtoa_r+0x3c8>
 8008f4c:	2702      	movs	r7, #2
 8008f4e:	e7f2      	b.n	8008f36 <_dtoa_r+0x35e>
 8008f50:	07e1      	lsls	r1, r4, #31
 8008f52:	d508      	bpl.n	8008f66 <_dtoa_r+0x38e>
 8008f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f5c:	f7f7 fb28 	bl	80005b0 <__aeabi_dmul>
 8008f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f64:	3701      	adds	r7, #1
 8008f66:	1064      	asrs	r4, r4, #1
 8008f68:	3608      	adds	r6, #8
 8008f6a:	e7e5      	b.n	8008f38 <_dtoa_r+0x360>
 8008f6c:	f000 80a5 	beq.w	80090ba <_dtoa_r+0x4e2>
 8008f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f74:	f1cb 0400 	rsb	r4, fp, #0
 8008f78:	4b7c      	ldr	r3, [pc, #496]	; (800916c <_dtoa_r+0x594>)
 8008f7a:	f004 020f 	and.w	r2, r4, #15
 8008f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f7f7 fb13 	bl	80005b0 <__aeabi_dmul>
 8008f8a:	2702      	movs	r7, #2
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f92:	4e77      	ldr	r6, [pc, #476]	; (8009170 <_dtoa_r+0x598>)
 8008f94:	1124      	asrs	r4, r4, #4
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	f040 8084 	bne.w	80090a4 <_dtoa_r+0x4cc>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1d2      	bne.n	8008f46 <_dtoa_r+0x36e>
 8008fa0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008fa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 8087 	beq.w	80090be <_dtoa_r+0x4e6>
 8008fb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4b6f      	ldr	r3, [pc, #444]	; (8009174 <_dtoa_r+0x59c>)
 8008fb8:	f7f7 fd6c 	bl	8000a94 <__aeabi_dcmplt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d07e      	beq.n	80090be <_dtoa_r+0x4e6>
 8008fc0:	9b08      	ldr	r3, [sp, #32]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d07b      	beq.n	80090be <_dtoa_r+0x4e6>
 8008fc6:	9b06      	ldr	r3, [sp, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dd38      	ble.n	800903e <_dtoa_r+0x466>
 8008fcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4b69      	ldr	r3, [pc, #420]	; (8009178 <_dtoa_r+0x5a0>)
 8008fd4:	f7f7 faec 	bl	80005b0 <__aeabi_dmul>
 8008fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fdc:	9c06      	ldr	r4, [sp, #24]
 8008fde:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008fe2:	3701      	adds	r7, #1
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7f7 fa79 	bl	80004dc <__aeabi_i2d>
 8008fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fee:	f7f7 fadf 	bl	80005b0 <__aeabi_dmul>
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4b61      	ldr	r3, [pc, #388]	; (800917c <_dtoa_r+0x5a4>)
 8008ff6:	f7f7 f925 	bl	8000244 <__adddf3>
 8008ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009002:	9611      	str	r6, [sp, #68]	; 0x44
 8009004:	2c00      	cmp	r4, #0
 8009006:	d15d      	bne.n	80090c4 <_dtoa_r+0x4ec>
 8009008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800900c:	2200      	movs	r2, #0
 800900e:	4b5c      	ldr	r3, [pc, #368]	; (8009180 <_dtoa_r+0x5a8>)
 8009010:	f7f7 f916 	bl	8000240 <__aeabi_dsub>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800901c:	4633      	mov	r3, r6
 800901e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009020:	f7f7 fd56 	bl	8000ad0 <__aeabi_dcmpgt>
 8009024:	2800      	cmp	r0, #0
 8009026:	f040 8295 	bne.w	8009554 <_dtoa_r+0x97c>
 800902a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800902e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009030:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009034:	f7f7 fd2e 	bl	8000a94 <__aeabi_dcmplt>
 8009038:	2800      	cmp	r0, #0
 800903a:	f040 8289 	bne.w	8009550 <_dtoa_r+0x978>
 800903e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009042:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009048:	2b00      	cmp	r3, #0
 800904a:	f2c0 8151 	blt.w	80092f0 <_dtoa_r+0x718>
 800904e:	f1bb 0f0e 	cmp.w	fp, #14
 8009052:	f300 814d 	bgt.w	80092f0 <_dtoa_r+0x718>
 8009056:	4b45      	ldr	r3, [pc, #276]	; (800916c <_dtoa_r+0x594>)
 8009058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800905c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009060:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009066:	2b00      	cmp	r3, #0
 8009068:	f280 80da 	bge.w	8009220 <_dtoa_r+0x648>
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f300 80d6 	bgt.w	8009220 <_dtoa_r+0x648>
 8009074:	f040 826b 	bne.w	800954e <_dtoa_r+0x976>
 8009078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800907c:	2200      	movs	r2, #0
 800907e:	4b40      	ldr	r3, [pc, #256]	; (8009180 <_dtoa_r+0x5a8>)
 8009080:	f7f7 fa96 	bl	80005b0 <__aeabi_dmul>
 8009084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009088:	f7f7 fd18 	bl	8000abc <__aeabi_dcmpge>
 800908c:	9c08      	ldr	r4, [sp, #32]
 800908e:	4626      	mov	r6, r4
 8009090:	2800      	cmp	r0, #0
 8009092:	f040 8241 	bne.w	8009518 <_dtoa_r+0x940>
 8009096:	2331      	movs	r3, #49	; 0x31
 8009098:	9f03      	ldr	r7, [sp, #12]
 800909a:	f10b 0b01 	add.w	fp, fp, #1
 800909e:	f807 3b01 	strb.w	r3, [r7], #1
 80090a2:	e23d      	b.n	8009520 <_dtoa_r+0x948>
 80090a4:	07e2      	lsls	r2, r4, #31
 80090a6:	d505      	bpl.n	80090b4 <_dtoa_r+0x4dc>
 80090a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090ac:	f7f7 fa80 	bl	80005b0 <__aeabi_dmul>
 80090b0:	2301      	movs	r3, #1
 80090b2:	3701      	adds	r7, #1
 80090b4:	1064      	asrs	r4, r4, #1
 80090b6:	3608      	adds	r6, #8
 80090b8:	e76d      	b.n	8008f96 <_dtoa_r+0x3be>
 80090ba:	2702      	movs	r7, #2
 80090bc:	e770      	b.n	8008fa0 <_dtoa_r+0x3c8>
 80090be:	46d8      	mov	r8, fp
 80090c0:	9c08      	ldr	r4, [sp, #32]
 80090c2:	e78f      	b.n	8008fe4 <_dtoa_r+0x40c>
 80090c4:	9903      	ldr	r1, [sp, #12]
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <_dtoa_r+0x594>)
 80090c8:	4421      	add	r1, r4
 80090ca:	9112      	str	r1, [sp, #72]	; 0x48
 80090cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80090d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090da:	2900      	cmp	r1, #0
 80090dc:	d054      	beq.n	8009188 <_dtoa_r+0x5b0>
 80090de:	2000      	movs	r0, #0
 80090e0:	4928      	ldr	r1, [pc, #160]	; (8009184 <_dtoa_r+0x5ac>)
 80090e2:	f7f7 fb8f 	bl	8000804 <__aeabi_ddiv>
 80090e6:	463b      	mov	r3, r7
 80090e8:	4632      	mov	r2, r6
 80090ea:	f7f7 f8a9 	bl	8000240 <__aeabi_dsub>
 80090ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090f2:	9f03      	ldr	r7, [sp, #12]
 80090f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f8:	f7f7 fd0a 	bl	8000b10 <__aeabi_d2iz>
 80090fc:	4604      	mov	r4, r0
 80090fe:	f7f7 f9ed 	bl	80004dc <__aeabi_i2d>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800910a:	f7f7 f899 	bl	8000240 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	3430      	adds	r4, #48	; 0x30
 8009114:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800911c:	f807 4b01 	strb.w	r4, [r7], #1
 8009120:	f7f7 fcb8 	bl	8000a94 <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d173      	bne.n	8009210 <_dtoa_r+0x638>
 8009128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912c:	2000      	movs	r0, #0
 800912e:	4911      	ldr	r1, [pc, #68]	; (8009174 <_dtoa_r+0x59c>)
 8009130:	f7f7 f886 	bl	8000240 <__aeabi_dsub>
 8009134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009138:	f7f7 fcac 	bl	8000a94 <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 80b6 	bne.w	80092ae <_dtoa_r+0x6d6>
 8009142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009144:	429f      	cmp	r7, r3
 8009146:	f43f af7a 	beq.w	800903e <_dtoa_r+0x466>
 800914a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800914e:	2200      	movs	r2, #0
 8009150:	4b09      	ldr	r3, [pc, #36]	; (8009178 <_dtoa_r+0x5a0>)
 8009152:	f7f7 fa2d 	bl	80005b0 <__aeabi_dmul>
 8009156:	2200      	movs	r2, #0
 8009158:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800915c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009160:	4b05      	ldr	r3, [pc, #20]	; (8009178 <_dtoa_r+0x5a0>)
 8009162:	f7f7 fa25 	bl	80005b0 <__aeabi_dmul>
 8009166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800916a:	e7c3      	b.n	80090f4 <_dtoa_r+0x51c>
 800916c:	0800c550 	.word	0x0800c550
 8009170:	0800c528 	.word	0x0800c528
 8009174:	3ff00000 	.word	0x3ff00000
 8009178:	40240000 	.word	0x40240000
 800917c:	401c0000 	.word	0x401c0000
 8009180:	40140000 	.word	0x40140000
 8009184:	3fe00000 	.word	0x3fe00000
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 fa10 	bl	80005b0 <__aeabi_dmul>
 8009190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009192:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009196:	9c03      	ldr	r4, [sp, #12]
 8009198:	9314      	str	r3, [sp, #80]	; 0x50
 800919a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800919e:	f7f7 fcb7 	bl	8000b10 <__aeabi_d2iz>
 80091a2:	9015      	str	r0, [sp, #84]	; 0x54
 80091a4:	f7f7 f99a 	bl	80004dc <__aeabi_i2d>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091b0:	f7f7 f846 	bl	8000240 <__aeabi_dsub>
 80091b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b6:	4606      	mov	r6, r0
 80091b8:	3330      	adds	r3, #48	; 0x30
 80091ba:	f804 3b01 	strb.w	r3, [r4], #1
 80091be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091c0:	460f      	mov	r7, r1
 80091c2:	429c      	cmp	r4, r3
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	d124      	bne.n	8009214 <_dtoa_r+0x63c>
 80091ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091ce:	4baf      	ldr	r3, [pc, #700]	; (800948c <_dtoa_r+0x8b4>)
 80091d0:	f7f7 f838 	bl	8000244 <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 fc78 	bl	8000ad0 <__aeabi_dcmpgt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d163      	bne.n	80092ac <_dtoa_r+0x6d4>
 80091e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091e8:	2000      	movs	r0, #0
 80091ea:	49a8      	ldr	r1, [pc, #672]	; (800948c <_dtoa_r+0x8b4>)
 80091ec:	f7f7 f828 	bl	8000240 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 fc4c 	bl	8000a94 <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f af1e 	beq.w	800903e <_dtoa_r+0x466>
 8009202:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009204:	1e7b      	subs	r3, r7, #1
 8009206:	9314      	str	r3, [sp, #80]	; 0x50
 8009208:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800920c:	2b30      	cmp	r3, #48	; 0x30
 800920e:	d0f8      	beq.n	8009202 <_dtoa_r+0x62a>
 8009210:	46c3      	mov	fp, r8
 8009212:	e03b      	b.n	800928c <_dtoa_r+0x6b4>
 8009214:	4b9e      	ldr	r3, [pc, #632]	; (8009490 <_dtoa_r+0x8b8>)
 8009216:	f7f7 f9cb 	bl	80005b0 <__aeabi_dmul>
 800921a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800921e:	e7bc      	b.n	800919a <_dtoa_r+0x5c2>
 8009220:	9f03      	ldr	r7, [sp, #12]
 8009222:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	f7f7 fae9 	bl	8000804 <__aeabi_ddiv>
 8009232:	f7f7 fc6d 	bl	8000b10 <__aeabi_d2iz>
 8009236:	4604      	mov	r4, r0
 8009238:	f7f7 f950 	bl	80004dc <__aeabi_i2d>
 800923c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009240:	f7f7 f9b6 	bl	80005b0 <__aeabi_dmul>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4640      	mov	r0, r8
 800924a:	4649      	mov	r1, r9
 800924c:	f7f6 fff8 	bl	8000240 <__aeabi_dsub>
 8009250:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009254:	f807 6b01 	strb.w	r6, [r7], #1
 8009258:	9e03      	ldr	r6, [sp, #12]
 800925a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800925e:	1bbe      	subs	r6, r7, r6
 8009260:	45b4      	cmp	ip, r6
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	d136      	bne.n	80092d6 <_dtoa_r+0x6fe>
 8009268:	f7f6 ffec 	bl	8000244 <__adddf3>
 800926c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009270:	4680      	mov	r8, r0
 8009272:	4689      	mov	r9, r1
 8009274:	f7f7 fc2c 	bl	8000ad0 <__aeabi_dcmpgt>
 8009278:	bb58      	cbnz	r0, 80092d2 <_dtoa_r+0x6fa>
 800927a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f7 fbfd 	bl	8000a80 <__aeabi_dcmpeq>
 8009286:	b108      	cbz	r0, 800928c <_dtoa_r+0x6b4>
 8009288:	07e3      	lsls	r3, r4, #31
 800928a:	d422      	bmi.n	80092d2 <_dtoa_r+0x6fa>
 800928c:	4651      	mov	r1, sl
 800928e:	4628      	mov	r0, r5
 8009290:	f000 fbc2 	bl	8009a18 <_Bfree>
 8009294:	2300      	movs	r3, #0
 8009296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009298:	703b      	strb	r3, [r7, #0]
 800929a:	f10b 0301 	add.w	r3, fp, #1
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f43f ace6 	beq.w	8008c74 <_dtoa_r+0x9c>
 80092a8:	601f      	str	r7, [r3, #0]
 80092aa:	e4e3      	b.n	8008c74 <_dtoa_r+0x9c>
 80092ac:	4627      	mov	r7, r4
 80092ae:	463b      	mov	r3, r7
 80092b0:	461f      	mov	r7, r3
 80092b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092b6:	2a39      	cmp	r2, #57	; 0x39
 80092b8:	d107      	bne.n	80092ca <_dtoa_r+0x6f2>
 80092ba:	9a03      	ldr	r2, [sp, #12]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d1f7      	bne.n	80092b0 <_dtoa_r+0x6d8>
 80092c0:	2230      	movs	r2, #48	; 0x30
 80092c2:	9903      	ldr	r1, [sp, #12]
 80092c4:	f108 0801 	add.w	r8, r8, #1
 80092c8:	700a      	strb	r2, [r1, #0]
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	3201      	adds	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]
 80092d0:	e79e      	b.n	8009210 <_dtoa_r+0x638>
 80092d2:	46d8      	mov	r8, fp
 80092d4:	e7eb      	b.n	80092ae <_dtoa_r+0x6d6>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b6d      	ldr	r3, [pc, #436]	; (8009490 <_dtoa_r+0x8b8>)
 80092da:	f7f7 f969 	bl	80005b0 <__aeabi_dmul>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4680      	mov	r8, r0
 80092e4:	4689      	mov	r9, r1
 80092e6:	f7f7 fbcb 	bl	8000a80 <__aeabi_dcmpeq>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d09b      	beq.n	8009226 <_dtoa_r+0x64e>
 80092ee:	e7cd      	b.n	800928c <_dtoa_r+0x6b4>
 80092f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	f000 80c4 	beq.w	8009480 <_dtoa_r+0x8a8>
 80092f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092fa:	2a01      	cmp	r2, #1
 80092fc:	f300 80a8 	bgt.w	8009450 <_dtoa_r+0x878>
 8009300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009302:	2a00      	cmp	r2, #0
 8009304:	f000 80a0 	beq.w	8009448 <_dtoa_r+0x870>
 8009308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800930c:	464f      	mov	r7, r9
 800930e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009312:	2101      	movs	r1, #1
 8009314:	441a      	add	r2, r3
 8009316:	4628      	mov	r0, r5
 8009318:	4499      	add	r9, r3
 800931a:	9209      	str	r2, [sp, #36]	; 0x24
 800931c:	f000 fc7c 	bl	8009c18 <__i2b>
 8009320:	4606      	mov	r6, r0
 8009322:	b15f      	cbz	r7, 800933c <_dtoa_r+0x764>
 8009324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	dd08      	ble.n	800933c <_dtoa_r+0x764>
 800932a:	42bb      	cmp	r3, r7
 800932c:	bfa8      	it	ge
 800932e:	463b      	movge	r3, r7
 8009330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009332:	eba9 0903 	sub.w	r9, r9, r3
 8009336:	1aff      	subs	r7, r7, r3
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	9309      	str	r3, [sp, #36]	; 0x24
 800933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933e:	b1f3      	cbz	r3, 800937e <_dtoa_r+0x7a6>
 8009340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80a0 	beq.w	8009488 <_dtoa_r+0x8b0>
 8009348:	2c00      	cmp	r4, #0
 800934a:	dd10      	ble.n	800936e <_dtoa_r+0x796>
 800934c:	4631      	mov	r1, r6
 800934e:	4622      	mov	r2, r4
 8009350:	4628      	mov	r0, r5
 8009352:	f000 fd1f 	bl	8009d94 <__pow5mult>
 8009356:	4652      	mov	r2, sl
 8009358:	4601      	mov	r1, r0
 800935a:	4606      	mov	r6, r0
 800935c:	4628      	mov	r0, r5
 800935e:	f000 fc71 	bl	8009c44 <__multiply>
 8009362:	4680      	mov	r8, r0
 8009364:	4651      	mov	r1, sl
 8009366:	4628      	mov	r0, r5
 8009368:	f000 fb56 	bl	8009a18 <_Bfree>
 800936c:	46c2      	mov	sl, r8
 800936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009370:	1b1a      	subs	r2, r3, r4
 8009372:	d004      	beq.n	800937e <_dtoa_r+0x7a6>
 8009374:	4651      	mov	r1, sl
 8009376:	4628      	mov	r0, r5
 8009378:	f000 fd0c 	bl	8009d94 <__pow5mult>
 800937c:	4682      	mov	sl, r0
 800937e:	2101      	movs	r1, #1
 8009380:	4628      	mov	r0, r5
 8009382:	f000 fc49 	bl	8009c18 <__i2b>
 8009386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009388:	4604      	mov	r4, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	f340 8082 	ble.w	8009494 <_dtoa_r+0x8bc>
 8009390:	461a      	mov	r2, r3
 8009392:	4601      	mov	r1, r0
 8009394:	4628      	mov	r0, r5
 8009396:	f000 fcfd 	bl	8009d94 <__pow5mult>
 800939a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800939c:	4604      	mov	r4, r0
 800939e:	2b01      	cmp	r3, #1
 80093a0:	dd7b      	ble.n	800949a <_dtoa_r+0x8c2>
 80093a2:	f04f 0800 	mov.w	r8, #0
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093ac:	6918      	ldr	r0, [r3, #16]
 80093ae:	f000 fbe5 	bl	8009b7c <__hi0bits>
 80093b2:	f1c0 0020 	rsb	r0, r0, #32
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	4418      	add	r0, r3
 80093ba:	f010 001f 	ands.w	r0, r0, #31
 80093be:	f000 8092 	beq.w	80094e6 <_dtoa_r+0x90e>
 80093c2:	f1c0 0320 	rsb	r3, r0, #32
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	f340 8085 	ble.w	80094d6 <_dtoa_r+0x8fe>
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	f1c0 001c 	rsb	r0, r0, #28
 80093d2:	4403      	add	r3, r0
 80093d4:	4481      	add	r9, r0
 80093d6:	4407      	add	r7, r0
 80093d8:	9309      	str	r3, [sp, #36]	; 0x24
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	dd05      	ble.n	80093ec <_dtoa_r+0x814>
 80093e0:	4651      	mov	r1, sl
 80093e2:	464a      	mov	r2, r9
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 fd2f 	bl	8009e48 <__lshift>
 80093ea:	4682      	mov	sl, r0
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dd05      	ble.n	80093fe <_dtoa_r+0x826>
 80093f2:	4621      	mov	r1, r4
 80093f4:	461a      	mov	r2, r3
 80093f6:	4628      	mov	r0, r5
 80093f8:	f000 fd26 	bl	8009e48 <__lshift>
 80093fc:	4604      	mov	r4, r0
 80093fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d072      	beq.n	80094ea <_dtoa_r+0x912>
 8009404:	4621      	mov	r1, r4
 8009406:	4650      	mov	r0, sl
 8009408:	f000 fd8a 	bl	8009f20 <__mcmp>
 800940c:	2800      	cmp	r0, #0
 800940e:	da6c      	bge.n	80094ea <_dtoa_r+0x912>
 8009410:	2300      	movs	r3, #0
 8009412:	4651      	mov	r1, sl
 8009414:	220a      	movs	r2, #10
 8009416:	4628      	mov	r0, r5
 8009418:	f000 fb20 	bl	8009a5c <__multadd>
 800941c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941e:	4682      	mov	sl, r0
 8009420:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 81ac 	beq.w	8009782 <_dtoa_r+0xbaa>
 800942a:	2300      	movs	r3, #0
 800942c:	4631      	mov	r1, r6
 800942e:	220a      	movs	r2, #10
 8009430:	4628      	mov	r0, r5
 8009432:	f000 fb13 	bl	8009a5c <__multadd>
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	4606      	mov	r6, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	f300 8093 	bgt.w	8009566 <_dtoa_r+0x98e>
 8009440:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009442:	2b02      	cmp	r3, #2
 8009444:	dc59      	bgt.n	80094fa <_dtoa_r+0x922>
 8009446:	e08e      	b.n	8009566 <_dtoa_r+0x98e>
 8009448:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800944a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800944e:	e75d      	b.n	800930c <_dtoa_r+0x734>
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	1e5c      	subs	r4, r3, #1
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	42a3      	cmp	r3, r4
 8009458:	bfbf      	itttt	lt
 800945a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800945c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800945e:	1ae3      	sublt	r3, r4, r3
 8009460:	18d2      	addlt	r2, r2, r3
 8009462:	bfa8      	it	ge
 8009464:	1b1c      	subge	r4, r3, r4
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	bfbe      	ittt	lt
 800946a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800946c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800946e:	2400      	movlt	r4, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfb5      	itete	lt
 8009474:	eba9 0703 	sublt.w	r7, r9, r3
 8009478:	464f      	movge	r7, r9
 800947a:	2300      	movlt	r3, #0
 800947c:	9b08      	ldrge	r3, [sp, #32]
 800947e:	e747      	b.n	8009310 <_dtoa_r+0x738>
 8009480:	464f      	mov	r7, r9
 8009482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009486:	e74c      	b.n	8009322 <_dtoa_r+0x74a>
 8009488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948a:	e773      	b.n	8009374 <_dtoa_r+0x79c>
 800948c:	3fe00000 	.word	0x3fe00000
 8009490:	40240000 	.word	0x40240000
 8009494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009496:	2b01      	cmp	r3, #1
 8009498:	dc18      	bgt.n	80094cc <_dtoa_r+0x8f4>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	b9b3      	cbnz	r3, 80094cc <_dtoa_r+0x8f4>
 800949e:	9b05      	ldr	r3, [sp, #20]
 80094a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a4:	b993      	cbnz	r3, 80094cc <_dtoa_r+0x8f4>
 80094a6:	9b05      	ldr	r3, [sp, #20]
 80094a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094ac:	0d1b      	lsrs	r3, r3, #20
 80094ae:	051b      	lsls	r3, r3, #20
 80094b0:	b17b      	cbz	r3, 80094d2 <_dtoa_r+0x8fa>
 80094b2:	f04f 0801 	mov.w	r8, #1
 80094b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b8:	f109 0901 	add.w	r9, r9, #1
 80094bc:	3301      	adds	r3, #1
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f47f af6f 	bne.w	80093a6 <_dtoa_r+0x7ce>
 80094c8:	2001      	movs	r0, #1
 80094ca:	e774      	b.n	80093b6 <_dtoa_r+0x7de>
 80094cc:	f04f 0800 	mov.w	r8, #0
 80094d0:	e7f6      	b.n	80094c0 <_dtoa_r+0x8e8>
 80094d2:	4698      	mov	r8, r3
 80094d4:	e7f4      	b.n	80094c0 <_dtoa_r+0x8e8>
 80094d6:	d080      	beq.n	80093da <_dtoa_r+0x802>
 80094d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094da:	331c      	adds	r3, #28
 80094dc:	441a      	add	r2, r3
 80094de:	4499      	add	r9, r3
 80094e0:	441f      	add	r7, r3
 80094e2:	9209      	str	r2, [sp, #36]	; 0x24
 80094e4:	e779      	b.n	80093da <_dtoa_r+0x802>
 80094e6:	4603      	mov	r3, r0
 80094e8:	e7f6      	b.n	80094d8 <_dtoa_r+0x900>
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dc34      	bgt.n	800955a <_dtoa_r+0x982>
 80094f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	dd31      	ble.n	800955a <_dtoa_r+0x982>
 80094f6:	9b08      	ldr	r3, [sp, #32]
 80094f8:	9306      	str	r3, [sp, #24]
 80094fa:	9b06      	ldr	r3, [sp, #24]
 80094fc:	b963      	cbnz	r3, 8009518 <_dtoa_r+0x940>
 80094fe:	4621      	mov	r1, r4
 8009500:	2205      	movs	r2, #5
 8009502:	4628      	mov	r0, r5
 8009504:	f000 faaa 	bl	8009a5c <__multadd>
 8009508:	4601      	mov	r1, r0
 800950a:	4604      	mov	r4, r0
 800950c:	4650      	mov	r0, sl
 800950e:	f000 fd07 	bl	8009f20 <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	f73f adbf 	bgt.w	8009096 <_dtoa_r+0x4be>
 8009518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800951a:	9f03      	ldr	r7, [sp, #12]
 800951c:	ea6f 0b03 	mvn.w	fp, r3
 8009520:	f04f 0800 	mov.w	r8, #0
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 fa76 	bl	8009a18 <_Bfree>
 800952c:	2e00      	cmp	r6, #0
 800952e:	f43f aead 	beq.w	800928c <_dtoa_r+0x6b4>
 8009532:	f1b8 0f00 	cmp.w	r8, #0
 8009536:	d005      	beq.n	8009544 <_dtoa_r+0x96c>
 8009538:	45b0      	cmp	r8, r6
 800953a:	d003      	beq.n	8009544 <_dtoa_r+0x96c>
 800953c:	4641      	mov	r1, r8
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fa6a 	bl	8009a18 <_Bfree>
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	f000 fa66 	bl	8009a18 <_Bfree>
 800954c:	e69e      	b.n	800928c <_dtoa_r+0x6b4>
 800954e:	2400      	movs	r4, #0
 8009550:	4626      	mov	r6, r4
 8009552:	e7e1      	b.n	8009518 <_dtoa_r+0x940>
 8009554:	46c3      	mov	fp, r8
 8009556:	4626      	mov	r6, r4
 8009558:	e59d      	b.n	8009096 <_dtoa_r+0x4be>
 800955a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 80c8 	beq.w	80096f2 <_dtoa_r+0xb1a>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	2f00      	cmp	r7, #0
 8009568:	dd05      	ble.n	8009576 <_dtoa_r+0x99e>
 800956a:	4631      	mov	r1, r6
 800956c:	463a      	mov	r2, r7
 800956e:	4628      	mov	r0, r5
 8009570:	f000 fc6a 	bl	8009e48 <__lshift>
 8009574:	4606      	mov	r6, r0
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	d05b      	beq.n	8009634 <_dtoa_r+0xa5c>
 800957c:	4628      	mov	r0, r5
 800957e:	6871      	ldr	r1, [r6, #4]
 8009580:	f000 fa0a 	bl	8009998 <_Balloc>
 8009584:	4607      	mov	r7, r0
 8009586:	b928      	cbnz	r0, 8009594 <_dtoa_r+0x9bc>
 8009588:	4602      	mov	r2, r0
 800958a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800958e:	4b81      	ldr	r3, [pc, #516]	; (8009794 <_dtoa_r+0xbbc>)
 8009590:	f7ff bb36 	b.w	8008c00 <_dtoa_r+0x28>
 8009594:	6932      	ldr	r2, [r6, #16]
 8009596:	f106 010c 	add.w	r1, r6, #12
 800959a:	3202      	adds	r2, #2
 800959c:	0092      	lsls	r2, r2, #2
 800959e:	300c      	adds	r0, #12
 80095a0:	f002 f94a 	bl	800b838 <memcpy>
 80095a4:	2201      	movs	r2, #1
 80095a6:	4639      	mov	r1, r7
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 fc4d 	bl	8009e48 <__lshift>
 80095ae:	46b0      	mov	r8, r6
 80095b0:	4606      	mov	r6, r0
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	9a03      	ldr	r2, [sp, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	9308      	str	r3, [sp, #32]
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	4413      	add	r3, r2
 80095be:	930b      	str	r3, [sp, #44]	; 0x2c
 80095c0:	9b04      	ldr	r3, [sp, #16]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	4621      	mov	r1, r4
 80095cc:	3b01      	subs	r3, #1
 80095ce:	4650      	mov	r0, sl
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	f7ff fa75 	bl	8008ac0 <quorem>
 80095d6:	4641      	mov	r1, r8
 80095d8:	9006      	str	r0, [sp, #24]
 80095da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095de:	4650      	mov	r0, sl
 80095e0:	f000 fc9e 	bl	8009f20 <__mcmp>
 80095e4:	4632      	mov	r2, r6
 80095e6:	9009      	str	r0, [sp, #36]	; 0x24
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 fcb4 	bl	8009f58 <__mdiff>
 80095f0:	68c2      	ldr	r2, [r0, #12]
 80095f2:	4607      	mov	r7, r0
 80095f4:	bb02      	cbnz	r2, 8009638 <_dtoa_r+0xa60>
 80095f6:	4601      	mov	r1, r0
 80095f8:	4650      	mov	r0, sl
 80095fa:	f000 fc91 	bl	8009f20 <__mcmp>
 80095fe:	4602      	mov	r2, r0
 8009600:	4639      	mov	r1, r7
 8009602:	4628      	mov	r0, r5
 8009604:	920c      	str	r2, [sp, #48]	; 0x30
 8009606:	f000 fa07 	bl	8009a18 <_Bfree>
 800960a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800960c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800960e:	9f08      	ldr	r7, [sp, #32]
 8009610:	ea43 0102 	orr.w	r1, r3, r2
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	4319      	orrs	r1, r3
 8009618:	d110      	bne.n	800963c <_dtoa_r+0xa64>
 800961a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800961e:	d029      	beq.n	8009674 <_dtoa_r+0xa9c>
 8009620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	dd02      	ble.n	800962c <_dtoa_r+0xa54>
 8009626:	9b06      	ldr	r3, [sp, #24]
 8009628:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	f883 9000 	strb.w	r9, [r3]
 8009632:	e777      	b.n	8009524 <_dtoa_r+0x94c>
 8009634:	4630      	mov	r0, r6
 8009636:	e7ba      	b.n	80095ae <_dtoa_r+0x9d6>
 8009638:	2201      	movs	r2, #1
 800963a:	e7e1      	b.n	8009600 <_dtoa_r+0xa28>
 800963c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	db04      	blt.n	800964c <_dtoa_r+0xa74>
 8009642:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009644:	430b      	orrs	r3, r1
 8009646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009648:	430b      	orrs	r3, r1
 800964a:	d120      	bne.n	800968e <_dtoa_r+0xab6>
 800964c:	2a00      	cmp	r2, #0
 800964e:	dded      	ble.n	800962c <_dtoa_r+0xa54>
 8009650:	4651      	mov	r1, sl
 8009652:	2201      	movs	r2, #1
 8009654:	4628      	mov	r0, r5
 8009656:	f000 fbf7 	bl	8009e48 <__lshift>
 800965a:	4621      	mov	r1, r4
 800965c:	4682      	mov	sl, r0
 800965e:	f000 fc5f 	bl	8009f20 <__mcmp>
 8009662:	2800      	cmp	r0, #0
 8009664:	dc03      	bgt.n	800966e <_dtoa_r+0xa96>
 8009666:	d1e1      	bne.n	800962c <_dtoa_r+0xa54>
 8009668:	f019 0f01 	tst.w	r9, #1
 800966c:	d0de      	beq.n	800962c <_dtoa_r+0xa54>
 800966e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009672:	d1d8      	bne.n	8009626 <_dtoa_r+0xa4e>
 8009674:	2339      	movs	r3, #57	; 0x39
 8009676:	9a04      	ldr	r2, [sp, #16]
 8009678:	7013      	strb	r3, [r2, #0]
 800967a:	463b      	mov	r3, r7
 800967c:	461f      	mov	r7, r3
 800967e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009682:	3b01      	subs	r3, #1
 8009684:	2a39      	cmp	r2, #57	; 0x39
 8009686:	d06b      	beq.n	8009760 <_dtoa_r+0xb88>
 8009688:	3201      	adds	r2, #1
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	e74a      	b.n	8009524 <_dtoa_r+0x94c>
 800968e:	2a00      	cmp	r2, #0
 8009690:	dd07      	ble.n	80096a2 <_dtoa_r+0xaca>
 8009692:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009696:	d0ed      	beq.n	8009674 <_dtoa_r+0xa9c>
 8009698:	9a04      	ldr	r2, [sp, #16]
 800969a:	f109 0301 	add.w	r3, r9, #1
 800969e:	7013      	strb	r3, [r2, #0]
 80096a0:	e740      	b.n	8009524 <_dtoa_r+0x94c>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d042      	beq.n	8009734 <_dtoa_r+0xb5c>
 80096ae:	4651      	mov	r1, sl
 80096b0:	2300      	movs	r3, #0
 80096b2:	220a      	movs	r2, #10
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f9d1 	bl	8009a5c <__multadd>
 80096ba:	45b0      	cmp	r8, r6
 80096bc:	4682      	mov	sl, r0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	f04f 020a 	mov.w	r2, #10
 80096c6:	4641      	mov	r1, r8
 80096c8:	4628      	mov	r0, r5
 80096ca:	d107      	bne.n	80096dc <_dtoa_r+0xb04>
 80096cc:	f000 f9c6 	bl	8009a5c <__multadd>
 80096d0:	4680      	mov	r8, r0
 80096d2:	4606      	mov	r6, r0
 80096d4:	9b08      	ldr	r3, [sp, #32]
 80096d6:	3301      	adds	r3, #1
 80096d8:	9308      	str	r3, [sp, #32]
 80096da:	e775      	b.n	80095c8 <_dtoa_r+0x9f0>
 80096dc:	f000 f9be 	bl	8009a5c <__multadd>
 80096e0:	4631      	mov	r1, r6
 80096e2:	4680      	mov	r8, r0
 80096e4:	2300      	movs	r3, #0
 80096e6:	220a      	movs	r2, #10
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 f9b7 	bl	8009a5c <__multadd>
 80096ee:	4606      	mov	r6, r0
 80096f0:	e7f0      	b.n	80096d4 <_dtoa_r+0xafc>
 80096f2:	9b08      	ldr	r3, [sp, #32]
 80096f4:	9306      	str	r3, [sp, #24]
 80096f6:	9f03      	ldr	r7, [sp, #12]
 80096f8:	4621      	mov	r1, r4
 80096fa:	4650      	mov	r0, sl
 80096fc:	f7ff f9e0 	bl	8008ac0 <quorem>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009706:	f807 9b01 	strb.w	r9, [r7], #1
 800970a:	1afa      	subs	r2, r7, r3
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	4293      	cmp	r3, r2
 8009710:	dd07      	ble.n	8009722 <_dtoa_r+0xb4a>
 8009712:	4651      	mov	r1, sl
 8009714:	2300      	movs	r3, #0
 8009716:	220a      	movs	r2, #10
 8009718:	4628      	mov	r0, r5
 800971a:	f000 f99f 	bl	8009a5c <__multadd>
 800971e:	4682      	mov	sl, r0
 8009720:	e7ea      	b.n	80096f8 <_dtoa_r+0xb20>
 8009722:	9b06      	ldr	r3, [sp, #24]
 8009724:	f04f 0800 	mov.w	r8, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfcc      	ite	gt
 800972c:	461f      	movgt	r7, r3
 800972e:	2701      	movle	r7, #1
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	441f      	add	r7, r3
 8009734:	4651      	mov	r1, sl
 8009736:	2201      	movs	r2, #1
 8009738:	4628      	mov	r0, r5
 800973a:	f000 fb85 	bl	8009e48 <__lshift>
 800973e:	4621      	mov	r1, r4
 8009740:	4682      	mov	sl, r0
 8009742:	f000 fbed 	bl	8009f20 <__mcmp>
 8009746:	2800      	cmp	r0, #0
 8009748:	dc97      	bgt.n	800967a <_dtoa_r+0xaa2>
 800974a:	d102      	bne.n	8009752 <_dtoa_r+0xb7a>
 800974c:	f019 0f01 	tst.w	r9, #1
 8009750:	d193      	bne.n	800967a <_dtoa_r+0xaa2>
 8009752:	463b      	mov	r3, r7
 8009754:	461f      	mov	r7, r3
 8009756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800975a:	2a30      	cmp	r2, #48	; 0x30
 800975c:	d0fa      	beq.n	8009754 <_dtoa_r+0xb7c>
 800975e:	e6e1      	b.n	8009524 <_dtoa_r+0x94c>
 8009760:	9a03      	ldr	r2, [sp, #12]
 8009762:	429a      	cmp	r2, r3
 8009764:	d18a      	bne.n	800967c <_dtoa_r+0xaa4>
 8009766:	2331      	movs	r3, #49	; 0x31
 8009768:	f10b 0b01 	add.w	fp, fp, #1
 800976c:	e797      	b.n	800969e <_dtoa_r+0xac6>
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <_dtoa_r+0xbc0>)
 8009770:	f7ff ba9f 	b.w	8008cb2 <_dtoa_r+0xda>
 8009774:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009776:	2b00      	cmp	r3, #0
 8009778:	f47f aa77 	bne.w	8008c6a <_dtoa_r+0x92>
 800977c:	4b07      	ldr	r3, [pc, #28]	; (800979c <_dtoa_r+0xbc4>)
 800977e:	f7ff ba98 	b.w	8008cb2 <_dtoa_r+0xda>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	dcb6      	bgt.n	80096f6 <_dtoa_r+0xb1e>
 8009788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800978a:	2b02      	cmp	r3, #2
 800978c:	f73f aeb5 	bgt.w	80094fa <_dtoa_r+0x922>
 8009790:	e7b1      	b.n	80096f6 <_dtoa_r+0xb1e>
 8009792:	bf00      	nop
 8009794:	0800c4bb 	.word	0x0800c4bb
 8009798:	0800c416 	.word	0x0800c416
 800979c:	0800c43f 	.word	0x0800c43f

080097a0 <_free_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	2900      	cmp	r1, #0
 80097a6:	d040      	beq.n	800982a <_free_r+0x8a>
 80097a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ac:	1f0c      	subs	r4, r1, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfb8      	it	lt
 80097b2:	18e4      	addlt	r4, r4, r3
 80097b4:	f000 f8e4 	bl	8009980 <__malloc_lock>
 80097b8:	4a1c      	ldr	r2, [pc, #112]	; (800982c <_free_r+0x8c>)
 80097ba:	6813      	ldr	r3, [r2, #0]
 80097bc:	b933      	cbnz	r3, 80097cc <_free_r+0x2c>
 80097be:	6063      	str	r3, [r4, #4]
 80097c0:	6014      	str	r4, [r2, #0]
 80097c2:	4628      	mov	r0, r5
 80097c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c8:	f000 b8e0 	b.w	800998c <__malloc_unlock>
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	d908      	bls.n	80097e2 <_free_r+0x42>
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	1821      	adds	r1, r4, r0
 80097d4:	428b      	cmp	r3, r1
 80097d6:	bf01      	itttt	eq
 80097d8:	6819      	ldreq	r1, [r3, #0]
 80097da:	685b      	ldreq	r3, [r3, #4]
 80097dc:	1809      	addeq	r1, r1, r0
 80097de:	6021      	streq	r1, [r4, #0]
 80097e0:	e7ed      	b.n	80097be <_free_r+0x1e>
 80097e2:	461a      	mov	r2, r3
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	b10b      	cbz	r3, 80097ec <_free_r+0x4c>
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	d9fa      	bls.n	80097e2 <_free_r+0x42>
 80097ec:	6811      	ldr	r1, [r2, #0]
 80097ee:	1850      	adds	r0, r2, r1
 80097f0:	42a0      	cmp	r0, r4
 80097f2:	d10b      	bne.n	800980c <_free_r+0x6c>
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	4401      	add	r1, r0
 80097f8:	1850      	adds	r0, r2, r1
 80097fa:	4283      	cmp	r3, r0
 80097fc:	6011      	str	r1, [r2, #0]
 80097fe:	d1e0      	bne.n	80097c2 <_free_r+0x22>
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4408      	add	r0, r1
 8009806:	6010      	str	r0, [r2, #0]
 8009808:	6053      	str	r3, [r2, #4]
 800980a:	e7da      	b.n	80097c2 <_free_r+0x22>
 800980c:	d902      	bls.n	8009814 <_free_r+0x74>
 800980e:	230c      	movs	r3, #12
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	e7d6      	b.n	80097c2 <_free_r+0x22>
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	1821      	adds	r1, r4, r0
 8009818:	428b      	cmp	r3, r1
 800981a:	bf01      	itttt	eq
 800981c:	6819      	ldreq	r1, [r3, #0]
 800981e:	685b      	ldreq	r3, [r3, #4]
 8009820:	1809      	addeq	r1, r1, r0
 8009822:	6021      	streq	r1, [r4, #0]
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	6054      	str	r4, [r2, #4]
 8009828:	e7cb      	b.n	80097c2 <_free_r+0x22>
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000720 	.word	0x20000720

08009830 <malloc>:
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <malloc+0xc>)
 8009832:	4601      	mov	r1, r0
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	f000 b823 	b.w	8009880 <_malloc_r>
 800983a:	bf00      	nop
 800983c:	20000080 	.word	0x20000080

08009840 <sbrk_aligned>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0e      	ldr	r6, [pc, #56]	; (800987c <sbrk_aligned+0x3c>)
 8009844:	460c      	mov	r4, r1
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	4605      	mov	r5, r0
 800984a:	b911      	cbnz	r1, 8009852 <sbrk_aligned+0x12>
 800984c:	f001 ffe4 	bl	800b818 <_sbrk_r>
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f001 ffdf 	bl	800b818 <_sbrk_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d00a      	beq.n	8009874 <sbrk_aligned+0x34>
 800985e:	1cc4      	adds	r4, r0, #3
 8009860:	f024 0403 	bic.w	r4, r4, #3
 8009864:	42a0      	cmp	r0, r4
 8009866:	d007      	beq.n	8009878 <sbrk_aligned+0x38>
 8009868:	1a21      	subs	r1, r4, r0
 800986a:	4628      	mov	r0, r5
 800986c:	f001 ffd4 	bl	800b818 <_sbrk_r>
 8009870:	3001      	adds	r0, #1
 8009872:	d101      	bne.n	8009878 <sbrk_aligned+0x38>
 8009874:	f04f 34ff 	mov.w	r4, #4294967295
 8009878:	4620      	mov	r0, r4
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	20000724 	.word	0x20000724

08009880 <_malloc_r>:
 8009880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009884:	1ccd      	adds	r5, r1, #3
 8009886:	f025 0503 	bic.w	r5, r5, #3
 800988a:	3508      	adds	r5, #8
 800988c:	2d0c      	cmp	r5, #12
 800988e:	bf38      	it	cc
 8009890:	250c      	movcc	r5, #12
 8009892:	2d00      	cmp	r5, #0
 8009894:	4607      	mov	r7, r0
 8009896:	db01      	blt.n	800989c <_malloc_r+0x1c>
 8009898:	42a9      	cmp	r1, r5
 800989a:	d905      	bls.n	80098a8 <_malloc_r+0x28>
 800989c:	230c      	movs	r3, #12
 800989e:	2600      	movs	r6, #0
 80098a0:	603b      	str	r3, [r7, #0]
 80098a2:	4630      	mov	r0, r6
 80098a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800997c <_malloc_r+0xfc>
 80098ac:	f000 f868 	bl	8009980 <__malloc_lock>
 80098b0:	f8d8 3000 	ldr.w	r3, [r8]
 80098b4:	461c      	mov	r4, r3
 80098b6:	bb5c      	cbnz	r4, 8009910 <_malloc_r+0x90>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7ff ffc0 	bl	8009840 <sbrk_aligned>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	4604      	mov	r4, r0
 80098c4:	d155      	bne.n	8009972 <_malloc_r+0xf2>
 80098c6:	f8d8 4000 	ldr.w	r4, [r8]
 80098ca:	4626      	mov	r6, r4
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	d145      	bne.n	800995c <_malloc_r+0xdc>
 80098d0:	2c00      	cmp	r4, #0
 80098d2:	d048      	beq.n	8009966 <_malloc_r+0xe6>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	4631      	mov	r1, r6
 80098d8:	4638      	mov	r0, r7
 80098da:	eb04 0903 	add.w	r9, r4, r3
 80098de:	f001 ff9b 	bl	800b818 <_sbrk_r>
 80098e2:	4581      	cmp	r9, r0
 80098e4:	d13f      	bne.n	8009966 <_malloc_r+0xe6>
 80098e6:	6821      	ldr	r1, [r4, #0]
 80098e8:	4638      	mov	r0, r7
 80098ea:	1a6d      	subs	r5, r5, r1
 80098ec:	4629      	mov	r1, r5
 80098ee:	f7ff ffa7 	bl	8009840 <sbrk_aligned>
 80098f2:	3001      	adds	r0, #1
 80098f4:	d037      	beq.n	8009966 <_malloc_r+0xe6>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	442b      	add	r3, r5
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d038      	beq.n	8009976 <_malloc_r+0xf6>
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	42a2      	cmp	r2, r4
 8009908:	d12b      	bne.n	8009962 <_malloc_r+0xe2>
 800990a:	2200      	movs	r2, #0
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	e00f      	b.n	8009930 <_malloc_r+0xb0>
 8009910:	6822      	ldr	r2, [r4, #0]
 8009912:	1b52      	subs	r2, r2, r5
 8009914:	d41f      	bmi.n	8009956 <_malloc_r+0xd6>
 8009916:	2a0b      	cmp	r2, #11
 8009918:	d917      	bls.n	800994a <_malloc_r+0xca>
 800991a:	1961      	adds	r1, r4, r5
 800991c:	42a3      	cmp	r3, r4
 800991e:	6025      	str	r5, [r4, #0]
 8009920:	bf18      	it	ne
 8009922:	6059      	strne	r1, [r3, #4]
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	bf08      	it	eq
 8009928:	f8c8 1000 	streq.w	r1, [r8]
 800992c:	5162      	str	r2, [r4, r5]
 800992e:	604b      	str	r3, [r1, #4]
 8009930:	4638      	mov	r0, r7
 8009932:	f104 060b 	add.w	r6, r4, #11
 8009936:	f000 f829 	bl	800998c <__malloc_unlock>
 800993a:	f026 0607 	bic.w	r6, r6, #7
 800993e:	1d23      	adds	r3, r4, #4
 8009940:	1af2      	subs	r2, r6, r3
 8009942:	d0ae      	beq.n	80098a2 <_malloc_r+0x22>
 8009944:	1b9b      	subs	r3, r3, r6
 8009946:	50a3      	str	r3, [r4, r2]
 8009948:	e7ab      	b.n	80098a2 <_malloc_r+0x22>
 800994a:	42a3      	cmp	r3, r4
 800994c:	6862      	ldr	r2, [r4, #4]
 800994e:	d1dd      	bne.n	800990c <_malloc_r+0x8c>
 8009950:	f8c8 2000 	str.w	r2, [r8]
 8009954:	e7ec      	b.n	8009930 <_malloc_r+0xb0>
 8009956:	4623      	mov	r3, r4
 8009958:	6864      	ldr	r4, [r4, #4]
 800995a:	e7ac      	b.n	80098b6 <_malloc_r+0x36>
 800995c:	4634      	mov	r4, r6
 800995e:	6876      	ldr	r6, [r6, #4]
 8009960:	e7b4      	b.n	80098cc <_malloc_r+0x4c>
 8009962:	4613      	mov	r3, r2
 8009964:	e7cc      	b.n	8009900 <_malloc_r+0x80>
 8009966:	230c      	movs	r3, #12
 8009968:	4638      	mov	r0, r7
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	f000 f80e 	bl	800998c <__malloc_unlock>
 8009970:	e797      	b.n	80098a2 <_malloc_r+0x22>
 8009972:	6025      	str	r5, [r4, #0]
 8009974:	e7dc      	b.n	8009930 <_malloc_r+0xb0>
 8009976:	605b      	str	r3, [r3, #4]
 8009978:	deff      	udf	#255	; 0xff
 800997a:	bf00      	nop
 800997c:	20000720 	.word	0x20000720

08009980 <__malloc_lock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_lock+0x8>)
 8009982:	f7ff b888 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	2000071c 	.word	0x2000071c

0800998c <__malloc_unlock>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__malloc_unlock+0x8>)
 800998e:	f7ff b883 	b.w	8008a98 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	2000071c 	.word	0x2000071c

08009998 <_Balloc>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	69c6      	ldr	r6, [r0, #28]
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Balloc+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff ff44 	bl	8009830 <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	61e0      	str	r0, [r4, #28]
 80099ac:	b920      	cbnz	r0, 80099b8 <_Balloc+0x20>
 80099ae:	216b      	movs	r1, #107	; 0x6b
 80099b0:	4b17      	ldr	r3, [pc, #92]	; (8009a10 <_Balloc+0x78>)
 80099b2:	4818      	ldr	r0, [pc, #96]	; (8009a14 <_Balloc+0x7c>)
 80099b4:	f001 ff54 	bl	800b860 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	69e6      	ldr	r6, [r4, #28]
 80099c2:	68f3      	ldr	r3, [r6, #12]
 80099c4:	b183      	cbz	r3, 80099e8 <_Balloc+0x50>
 80099c6:	69e3      	ldr	r3, [r4, #28]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ce:	b9b8      	cbnz	r0, 8009a00 <_Balloc+0x68>
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f605 	lsl.w	r6, r1, r5
 80099d6:	1d72      	adds	r2, r6, #5
 80099d8:	4620      	mov	r0, r4
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	f001 ff5e 	bl	800b89c <_calloc_r>
 80099e0:	b160      	cbz	r0, 80099fc <_Balloc+0x64>
 80099e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099e6:	e00e      	b.n	8009a06 <_Balloc+0x6e>
 80099e8:	2221      	movs	r2, #33	; 0x21
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f001 ff55 	bl	800b89c <_calloc_r>
 80099f2:	69e3      	ldr	r3, [r4, #28]
 80099f4:	60f0      	str	r0, [r6, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <_Balloc+0x2e>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a06:	2300      	movs	r3, #0
 8009a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a0c:	e7f7      	b.n	80099fe <_Balloc+0x66>
 8009a0e:	bf00      	nop
 8009a10:	0800c44c 	.word	0x0800c44c
 8009a14:	0800c4cc 	.word	0x0800c4cc

08009a18 <_Bfree>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	69c6      	ldr	r6, [r0, #28]
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b976      	cbnz	r6, 8009a40 <_Bfree+0x28>
 8009a22:	2010      	movs	r0, #16
 8009a24:	f7ff ff04 	bl	8009830 <malloc>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	61e8      	str	r0, [r5, #28]
 8009a2c:	b920      	cbnz	r0, 8009a38 <_Bfree+0x20>
 8009a2e:	218f      	movs	r1, #143	; 0x8f
 8009a30:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <_Bfree+0x3c>)
 8009a32:	4809      	ldr	r0, [pc, #36]	; (8009a58 <_Bfree+0x40>)
 8009a34:	f001 ff14 	bl	800b860 <__assert_func>
 8009a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a3c:	6006      	str	r6, [r0, #0]
 8009a3e:	60c6      	str	r6, [r0, #12]
 8009a40:	b13c      	cbz	r4, 8009a52 <_Bfree+0x3a>
 8009a42:	69eb      	ldr	r3, [r5, #28]
 8009a44:	6862      	ldr	r2, [r4, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a4c:	6021      	str	r1, [r4, #0]
 8009a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	0800c44c 	.word	0x0800c44c
 8009a58:	0800c4cc 	.word	0x0800c4cc

08009a5c <__multadd>:
 8009a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	4607      	mov	r7, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	461e      	mov	r6, r3
 8009a66:	2000      	movs	r0, #0
 8009a68:	690d      	ldr	r5, [r1, #16]
 8009a6a:	f101 0c14 	add.w	ip, r1, #20
 8009a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a72:	3001      	adds	r0, #1
 8009a74:	b299      	uxth	r1, r3
 8009a76:	fb02 6101 	mla	r1, r2, r1, r6
 8009a7a:	0c1e      	lsrs	r6, r3, #16
 8009a7c:	0c0b      	lsrs	r3, r1, #16
 8009a7e:	fb02 3306 	mla	r3, r2, r6, r3
 8009a82:	b289      	uxth	r1, r1
 8009a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a88:	4285      	cmp	r5, r0
 8009a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a92:	dcec      	bgt.n	8009a6e <__multadd+0x12>
 8009a94:	b30e      	cbz	r6, 8009ada <__multadd+0x7e>
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	dc19      	bgt.n	8009ad0 <__multadd+0x74>
 8009a9c:	6861      	ldr	r1, [r4, #4]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	3101      	adds	r1, #1
 8009aa2:	f7ff ff79 	bl	8009998 <_Balloc>
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	b928      	cbnz	r0, 8009ab6 <__multadd+0x5a>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	21ba      	movs	r1, #186	; 0xba
 8009aae:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <__multadd+0x84>)
 8009ab0:	480c      	ldr	r0, [pc, #48]	; (8009ae4 <__multadd+0x88>)
 8009ab2:	f001 fed5 	bl	800b860 <__assert_func>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	f104 010c 	add.w	r1, r4, #12
 8009abc:	3202      	adds	r2, #2
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f001 feb9 	bl	800b838 <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ffa5 	bl	8009a18 <_Bfree>
 8009ace:	4644      	mov	r4, r8
 8009ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	615e      	str	r6, [r3, #20]
 8009ad8:	6125      	str	r5, [r4, #16]
 8009ada:	4620      	mov	r0, r4
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	0800c4bb 	.word	0x0800c4bb
 8009ae4:	0800c4cc 	.word	0x0800c4cc

08009ae8 <__s2b>:
 8009ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4615      	mov	r5, r2
 8009aee:	2209      	movs	r2, #9
 8009af0:	461f      	mov	r7, r3
 8009af2:	3308      	adds	r3, #8
 8009af4:	460c      	mov	r4, r1
 8009af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009afa:	4606      	mov	r6, r0
 8009afc:	2201      	movs	r2, #1
 8009afe:	2100      	movs	r1, #0
 8009b00:	429a      	cmp	r2, r3
 8009b02:	db09      	blt.n	8009b18 <__s2b+0x30>
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff ff47 	bl	8009998 <_Balloc>
 8009b0a:	b940      	cbnz	r0, 8009b1e <__s2b+0x36>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	21d3      	movs	r1, #211	; 0xd3
 8009b10:	4b18      	ldr	r3, [pc, #96]	; (8009b74 <__s2b+0x8c>)
 8009b12:	4819      	ldr	r0, [pc, #100]	; (8009b78 <__s2b+0x90>)
 8009b14:	f001 fea4 	bl	800b860 <__assert_func>
 8009b18:	0052      	lsls	r2, r2, #1
 8009b1a:	3101      	adds	r1, #1
 8009b1c:	e7f0      	b.n	8009b00 <__s2b+0x18>
 8009b1e:	9b08      	ldr	r3, [sp, #32]
 8009b20:	2d09      	cmp	r5, #9
 8009b22:	6143      	str	r3, [r0, #20]
 8009b24:	f04f 0301 	mov.w	r3, #1
 8009b28:	6103      	str	r3, [r0, #16]
 8009b2a:	dd16      	ble.n	8009b5a <__s2b+0x72>
 8009b2c:	f104 0909 	add.w	r9, r4, #9
 8009b30:	46c8      	mov	r8, r9
 8009b32:	442c      	add	r4, r5
 8009b34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b38:	4601      	mov	r1, r0
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	3b30      	subs	r3, #48	; 0x30
 8009b40:	f7ff ff8c 	bl	8009a5c <__multadd>
 8009b44:	45a0      	cmp	r8, r4
 8009b46:	d1f5      	bne.n	8009b34 <__s2b+0x4c>
 8009b48:	f1a5 0408 	sub.w	r4, r5, #8
 8009b4c:	444c      	add	r4, r9
 8009b4e:	1b2d      	subs	r5, r5, r4
 8009b50:	1963      	adds	r3, r4, r5
 8009b52:	42bb      	cmp	r3, r7
 8009b54:	db04      	blt.n	8009b60 <__s2b+0x78>
 8009b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5a:	2509      	movs	r5, #9
 8009b5c:	340a      	adds	r4, #10
 8009b5e:	e7f6      	b.n	8009b4e <__s2b+0x66>
 8009b60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b64:	4601      	mov	r1, r0
 8009b66:	220a      	movs	r2, #10
 8009b68:	4630      	mov	r0, r6
 8009b6a:	3b30      	subs	r3, #48	; 0x30
 8009b6c:	f7ff ff76 	bl	8009a5c <__multadd>
 8009b70:	e7ee      	b.n	8009b50 <__s2b+0x68>
 8009b72:	bf00      	nop
 8009b74:	0800c4bb 	.word	0x0800c4bb
 8009b78:	0800c4cc 	.word	0x0800c4cc

08009b7c <__hi0bits>:
 8009b7c:	0c02      	lsrs	r2, r0, #16
 8009b7e:	0412      	lsls	r2, r2, #16
 8009b80:	4603      	mov	r3, r0
 8009b82:	b9ca      	cbnz	r2, 8009bb8 <__hi0bits+0x3c>
 8009b84:	0403      	lsls	r3, r0, #16
 8009b86:	2010      	movs	r0, #16
 8009b88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b8c:	bf04      	itt	eq
 8009b8e:	021b      	lsleq	r3, r3, #8
 8009b90:	3008      	addeq	r0, #8
 8009b92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b96:	bf04      	itt	eq
 8009b98:	011b      	lsleq	r3, r3, #4
 8009b9a:	3004      	addeq	r0, #4
 8009b9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ba0:	bf04      	itt	eq
 8009ba2:	009b      	lsleq	r3, r3, #2
 8009ba4:	3002      	addeq	r0, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	db05      	blt.n	8009bb6 <__hi0bits+0x3a>
 8009baa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009bae:	f100 0001 	add.w	r0, r0, #1
 8009bb2:	bf08      	it	eq
 8009bb4:	2020      	moveq	r0, #32
 8009bb6:	4770      	bx	lr
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e7e5      	b.n	8009b88 <__hi0bits+0xc>

08009bbc <__lo0bits>:
 8009bbc:	6803      	ldr	r3, [r0, #0]
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	f013 0007 	ands.w	r0, r3, #7
 8009bc4:	d00b      	beq.n	8009bde <__lo0bits+0x22>
 8009bc6:	07d9      	lsls	r1, r3, #31
 8009bc8:	d421      	bmi.n	8009c0e <__lo0bits+0x52>
 8009bca:	0798      	lsls	r0, r3, #30
 8009bcc:	bf49      	itett	mi
 8009bce:	085b      	lsrmi	r3, r3, #1
 8009bd0:	089b      	lsrpl	r3, r3, #2
 8009bd2:	2001      	movmi	r0, #1
 8009bd4:	6013      	strmi	r3, [r2, #0]
 8009bd6:	bf5c      	itt	pl
 8009bd8:	2002      	movpl	r0, #2
 8009bda:	6013      	strpl	r3, [r2, #0]
 8009bdc:	4770      	bx	lr
 8009bde:	b299      	uxth	r1, r3
 8009be0:	b909      	cbnz	r1, 8009be6 <__lo0bits+0x2a>
 8009be2:	2010      	movs	r0, #16
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	b2d9      	uxtb	r1, r3
 8009be8:	b909      	cbnz	r1, 8009bee <__lo0bits+0x32>
 8009bea:	3008      	adds	r0, #8
 8009bec:	0a1b      	lsrs	r3, r3, #8
 8009bee:	0719      	lsls	r1, r3, #28
 8009bf0:	bf04      	itt	eq
 8009bf2:	091b      	lsreq	r3, r3, #4
 8009bf4:	3004      	addeq	r0, #4
 8009bf6:	0799      	lsls	r1, r3, #30
 8009bf8:	bf04      	itt	eq
 8009bfa:	089b      	lsreq	r3, r3, #2
 8009bfc:	3002      	addeq	r0, #2
 8009bfe:	07d9      	lsls	r1, r3, #31
 8009c00:	d403      	bmi.n	8009c0a <__lo0bits+0x4e>
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	f100 0001 	add.w	r0, r0, #1
 8009c08:	d003      	beq.n	8009c12 <__lo0bits+0x56>
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	4770      	bx	lr
 8009c0e:	2000      	movs	r0, #0
 8009c10:	4770      	bx	lr
 8009c12:	2020      	movs	r0, #32
 8009c14:	4770      	bx	lr
	...

08009c18 <__i2b>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f7ff febb 	bl	8009998 <_Balloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__i2b+0x1a>
 8009c26:	f240 1145 	movw	r1, #325	; 0x145
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <__i2b+0x24>)
 8009c2c:	4804      	ldr	r0, [pc, #16]	; (8009c40 <__i2b+0x28>)
 8009c2e:	f001 fe17 	bl	800b860 <__assert_func>
 8009c32:	2301      	movs	r3, #1
 8009c34:	6144      	str	r4, [r0, #20]
 8009c36:	6103      	str	r3, [r0, #16]
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0800c4bb 	.word	0x0800c4bb
 8009c40:	0800c4cc 	.word	0x0800c4cc

08009c44 <__multiply>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	4691      	mov	r9, r2
 8009c4a:	690a      	ldr	r2, [r1, #16]
 8009c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c50:	460c      	mov	r4, r1
 8009c52:	429a      	cmp	r2, r3
 8009c54:	bfbe      	ittt	lt
 8009c56:	460b      	movlt	r3, r1
 8009c58:	464c      	movlt	r4, r9
 8009c5a:	4699      	movlt	r9, r3
 8009c5c:	6927      	ldr	r7, [r4, #16]
 8009c5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	6861      	ldr	r1, [r4, #4]
 8009c66:	eb07 060a 	add.w	r6, r7, sl
 8009c6a:	42b3      	cmp	r3, r6
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	bfb8      	it	lt
 8009c70:	3101      	addlt	r1, #1
 8009c72:	f7ff fe91 	bl	8009998 <_Balloc>
 8009c76:	b930      	cbnz	r0, 8009c86 <__multiply+0x42>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c7e:	4b43      	ldr	r3, [pc, #268]	; (8009d8c <__multiply+0x148>)
 8009c80:	4843      	ldr	r0, [pc, #268]	; (8009d90 <__multiply+0x14c>)
 8009c82:	f001 fded 	bl	800b860 <__assert_func>
 8009c86:	f100 0514 	add.w	r5, r0, #20
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c92:	4543      	cmp	r3, r8
 8009c94:	d321      	bcc.n	8009cda <__multiply+0x96>
 8009c96:	f104 0314 	add.w	r3, r4, #20
 8009c9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c9e:	f109 0314 	add.w	r3, r9, #20
 8009ca2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ca6:	9202      	str	r2, [sp, #8]
 8009ca8:	1b3a      	subs	r2, r7, r4
 8009caa:	3a15      	subs	r2, #21
 8009cac:	f022 0203 	bic.w	r2, r2, #3
 8009cb0:	3204      	adds	r2, #4
 8009cb2:	f104 0115 	add.w	r1, r4, #21
 8009cb6:	428f      	cmp	r7, r1
 8009cb8:	bf38      	it	cc
 8009cba:	2204      	movcc	r2, #4
 8009cbc:	9201      	str	r2, [sp, #4]
 8009cbe:	9a02      	ldr	r2, [sp, #8]
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d80c      	bhi.n	8009ce0 <__multiply+0x9c>
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	dd03      	ble.n	8009cd2 <__multiply+0x8e>
 8009cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d05a      	beq.n	8009d88 <__multiply+0x144>
 8009cd2:	6106      	str	r6, [r0, #16]
 8009cd4:	b005      	add	sp, #20
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cda:	f843 2b04 	str.w	r2, [r3], #4
 8009cde:	e7d8      	b.n	8009c92 <__multiply+0x4e>
 8009ce0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ce4:	f1ba 0f00 	cmp.w	sl, #0
 8009ce8:	d023      	beq.n	8009d32 <__multiply+0xee>
 8009cea:	46a9      	mov	r9, r5
 8009cec:	f04f 0c00 	mov.w	ip, #0
 8009cf0:	f104 0e14 	add.w	lr, r4, #20
 8009cf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cf8:	f8d9 1000 	ldr.w	r1, [r9]
 8009cfc:	fa1f fb82 	uxth.w	fp, r2
 8009d00:	b289      	uxth	r1, r1
 8009d02:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d06:	4461      	add	r1, ip
 8009d08:	f8d9 c000 	ldr.w	ip, [r9]
 8009d0c:	0c12      	lsrs	r2, r2, #16
 8009d0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d12:	fb0a c202 	mla	r2, sl, r2, ip
 8009d16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d1a:	b289      	uxth	r1, r1
 8009d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d20:	4577      	cmp	r7, lr
 8009d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d26:	f849 1b04 	str.w	r1, [r9], #4
 8009d2a:	d8e3      	bhi.n	8009cf4 <__multiply+0xb0>
 8009d2c:	9a01      	ldr	r2, [sp, #4]
 8009d2e:	f845 c002 	str.w	ip, [r5, r2]
 8009d32:	9a03      	ldr	r2, [sp, #12]
 8009d34:	3304      	adds	r3, #4
 8009d36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d3a:	f1b9 0f00 	cmp.w	r9, #0
 8009d3e:	d021      	beq.n	8009d84 <__multiply+0x140>
 8009d40:	46ae      	mov	lr, r5
 8009d42:	f04f 0a00 	mov.w	sl, #0
 8009d46:	6829      	ldr	r1, [r5, #0]
 8009d48:	f104 0c14 	add.w	ip, r4, #20
 8009d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d54:	b289      	uxth	r1, r1
 8009d56:	fb09 220b 	mla	r2, r9, fp, r2
 8009d5a:	4452      	add	r2, sl
 8009d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d60:	f84e 1b04 	str.w	r1, [lr], #4
 8009d64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8009d70:	4567      	cmp	r7, ip
 8009d72:	fb09 110a 	mla	r1, r9, sl, r1
 8009d76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d7e:	d8e5      	bhi.n	8009d4c <__multiply+0x108>
 8009d80:	9a01      	ldr	r2, [sp, #4]
 8009d82:	50a9      	str	r1, [r5, r2]
 8009d84:	3504      	adds	r5, #4
 8009d86:	e79a      	b.n	8009cbe <__multiply+0x7a>
 8009d88:	3e01      	subs	r6, #1
 8009d8a:	e79c      	b.n	8009cc6 <__multiply+0x82>
 8009d8c:	0800c4bb 	.word	0x0800c4bb
 8009d90:	0800c4cc 	.word	0x0800c4cc

08009d94 <__pow5mult>:
 8009d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d98:	4615      	mov	r5, r2
 8009d9a:	f012 0203 	ands.w	r2, r2, #3
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460f      	mov	r7, r1
 8009da2:	d007      	beq.n	8009db4 <__pow5mult+0x20>
 8009da4:	4c25      	ldr	r4, [pc, #148]	; (8009e3c <__pow5mult+0xa8>)
 8009da6:	3a01      	subs	r2, #1
 8009da8:	2300      	movs	r3, #0
 8009daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dae:	f7ff fe55 	bl	8009a5c <__multadd>
 8009db2:	4607      	mov	r7, r0
 8009db4:	10ad      	asrs	r5, r5, #2
 8009db6:	d03d      	beq.n	8009e34 <__pow5mult+0xa0>
 8009db8:	69f4      	ldr	r4, [r6, #28]
 8009dba:	b97c      	cbnz	r4, 8009ddc <__pow5mult+0x48>
 8009dbc:	2010      	movs	r0, #16
 8009dbe:	f7ff fd37 	bl	8009830 <malloc>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	61f0      	str	r0, [r6, #28]
 8009dc6:	b928      	cbnz	r0, 8009dd4 <__pow5mult+0x40>
 8009dc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009dcc:	4b1c      	ldr	r3, [pc, #112]	; (8009e40 <__pow5mult+0xac>)
 8009dce:	481d      	ldr	r0, [pc, #116]	; (8009e44 <__pow5mult+0xb0>)
 8009dd0:	f001 fd46 	bl	800b860 <__assert_func>
 8009dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dd8:	6004      	str	r4, [r0, #0]
 8009dda:	60c4      	str	r4, [r0, #12]
 8009ddc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009de4:	b94c      	cbnz	r4, 8009dfa <__pow5mult+0x66>
 8009de6:	f240 2171 	movw	r1, #625	; 0x271
 8009dea:	4630      	mov	r0, r6
 8009dec:	f7ff ff14 	bl	8009c18 <__i2b>
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	f04f 0900 	mov.w	r9, #0
 8009dfe:	07eb      	lsls	r3, r5, #31
 8009e00:	d50a      	bpl.n	8009e18 <__pow5mult+0x84>
 8009e02:	4639      	mov	r1, r7
 8009e04:	4622      	mov	r2, r4
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7ff ff1c 	bl	8009c44 <__multiply>
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff fe01 	bl	8009a18 <_Bfree>
 8009e16:	4647      	mov	r7, r8
 8009e18:	106d      	asrs	r5, r5, #1
 8009e1a:	d00b      	beq.n	8009e34 <__pow5mult+0xa0>
 8009e1c:	6820      	ldr	r0, [r4, #0]
 8009e1e:	b938      	cbnz	r0, 8009e30 <__pow5mult+0x9c>
 8009e20:	4622      	mov	r2, r4
 8009e22:	4621      	mov	r1, r4
 8009e24:	4630      	mov	r0, r6
 8009e26:	f7ff ff0d 	bl	8009c44 <__multiply>
 8009e2a:	6020      	str	r0, [r4, #0]
 8009e2c:	f8c0 9000 	str.w	r9, [r0]
 8009e30:	4604      	mov	r4, r0
 8009e32:	e7e4      	b.n	8009dfe <__pow5mult+0x6a>
 8009e34:	4638      	mov	r0, r7
 8009e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3a:	bf00      	nop
 8009e3c:	0800c618 	.word	0x0800c618
 8009e40:	0800c44c 	.word	0x0800c44c
 8009e44:	0800c4cc 	.word	0x0800c4cc

08009e48 <__lshift>:
 8009e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	4607      	mov	r7, r0
 8009e50:	4691      	mov	r9, r2
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	6849      	ldr	r1, [r1, #4]
 8009e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e5a:	68a3      	ldr	r3, [r4, #8]
 8009e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e60:	f108 0601 	add.w	r6, r8, #1
 8009e64:	42b3      	cmp	r3, r6
 8009e66:	db0b      	blt.n	8009e80 <__lshift+0x38>
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f7ff fd95 	bl	8009998 <_Balloc>
 8009e6e:	4605      	mov	r5, r0
 8009e70:	b948      	cbnz	r0, 8009e86 <__lshift+0x3e>
 8009e72:	4602      	mov	r2, r0
 8009e74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e78:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <__lshift+0xd0>)
 8009e7a:	4828      	ldr	r0, [pc, #160]	; (8009f1c <__lshift+0xd4>)
 8009e7c:	f001 fcf0 	bl	800b860 <__assert_func>
 8009e80:	3101      	adds	r1, #1
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	e7ee      	b.n	8009e64 <__lshift+0x1c>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f100 0114 	add.w	r1, r0, #20
 8009e8c:	f100 0210 	add.w	r2, r0, #16
 8009e90:	4618      	mov	r0, r3
 8009e92:	4553      	cmp	r3, sl
 8009e94:	db33      	blt.n	8009efe <__lshift+0xb6>
 8009e96:	6920      	ldr	r0, [r4, #16]
 8009e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e9c:	f104 0314 	add.w	r3, r4, #20
 8009ea0:	f019 091f 	ands.w	r9, r9, #31
 8009ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009eac:	d02b      	beq.n	8009f06 <__lshift+0xbe>
 8009eae:	468a      	mov	sl, r1
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8009ebc:	4310      	orrs	r0, r2
 8009ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8009ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec6:	459c      	cmp	ip, r3
 8009ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ecc:	d8f3      	bhi.n	8009eb6 <__lshift+0x6e>
 8009ece:	ebac 0304 	sub.w	r3, ip, r4
 8009ed2:	3b15      	subs	r3, #21
 8009ed4:	f023 0303 	bic.w	r3, r3, #3
 8009ed8:	3304      	adds	r3, #4
 8009eda:	f104 0015 	add.w	r0, r4, #21
 8009ede:	4584      	cmp	ip, r0
 8009ee0:	bf38      	it	cc
 8009ee2:	2304      	movcc	r3, #4
 8009ee4:	50ca      	str	r2, [r1, r3]
 8009ee6:	b10a      	cbz	r2, 8009eec <__lshift+0xa4>
 8009ee8:	f108 0602 	add.w	r6, r8, #2
 8009eec:	3e01      	subs	r6, #1
 8009eee:	4638      	mov	r0, r7
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	612e      	str	r6, [r5, #16]
 8009ef4:	f7ff fd90 	bl	8009a18 <_Bfree>
 8009ef8:	4628      	mov	r0, r5
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f02:	3301      	adds	r3, #1
 8009f04:	e7c5      	b.n	8009e92 <__lshift+0x4a>
 8009f06:	3904      	subs	r1, #4
 8009f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0c:	459c      	cmp	ip, r3
 8009f0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f12:	d8f9      	bhi.n	8009f08 <__lshift+0xc0>
 8009f14:	e7ea      	b.n	8009eec <__lshift+0xa4>
 8009f16:	bf00      	nop
 8009f18:	0800c4bb 	.word	0x0800c4bb
 8009f1c:	0800c4cc 	.word	0x0800c4cc

08009f20 <__mcmp>:
 8009f20:	4603      	mov	r3, r0
 8009f22:	690a      	ldr	r2, [r1, #16]
 8009f24:	6900      	ldr	r0, [r0, #16]
 8009f26:	b530      	push	{r4, r5, lr}
 8009f28:	1a80      	subs	r0, r0, r2
 8009f2a:	d10d      	bne.n	8009f48 <__mcmp+0x28>
 8009f2c:	3314      	adds	r3, #20
 8009f2e:	3114      	adds	r1, #20
 8009f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f40:	4295      	cmp	r5, r2
 8009f42:	d002      	beq.n	8009f4a <__mcmp+0x2a>
 8009f44:	d304      	bcc.n	8009f50 <__mcmp+0x30>
 8009f46:	2001      	movs	r0, #1
 8009f48:	bd30      	pop	{r4, r5, pc}
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	d3f4      	bcc.n	8009f38 <__mcmp+0x18>
 8009f4e:	e7fb      	b.n	8009f48 <__mcmp+0x28>
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e7f8      	b.n	8009f48 <__mcmp+0x28>
	...

08009f58 <__mdiff>:
 8009f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	4607      	mov	r7, r0
 8009f60:	4611      	mov	r1, r2
 8009f62:	4628      	mov	r0, r5
 8009f64:	4614      	mov	r4, r2
 8009f66:	f7ff ffdb 	bl	8009f20 <__mcmp>
 8009f6a:	1e06      	subs	r6, r0, #0
 8009f6c:	d111      	bne.n	8009f92 <__mdiff+0x3a>
 8009f6e:	4631      	mov	r1, r6
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7ff fd11 	bl	8009998 <_Balloc>
 8009f76:	4602      	mov	r2, r0
 8009f78:	b928      	cbnz	r0, 8009f86 <__mdiff+0x2e>
 8009f7a:	f240 2137 	movw	r1, #567	; 0x237
 8009f7e:	4b3a      	ldr	r3, [pc, #232]	; (800a068 <__mdiff+0x110>)
 8009f80:	483a      	ldr	r0, [pc, #232]	; (800a06c <__mdiff+0x114>)
 8009f82:	f001 fc6d 	bl	800b860 <__assert_func>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f92:	bfa4      	itt	ge
 8009f94:	4623      	movge	r3, r4
 8009f96:	462c      	movge	r4, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	6861      	ldr	r1, [r4, #4]
 8009f9c:	bfa6      	itte	ge
 8009f9e:	461d      	movge	r5, r3
 8009fa0:	2600      	movge	r6, #0
 8009fa2:	2601      	movlt	r6, #1
 8009fa4:	f7ff fcf8 	bl	8009998 <_Balloc>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	b918      	cbnz	r0, 8009fb4 <__mdiff+0x5c>
 8009fac:	f240 2145 	movw	r1, #581	; 0x245
 8009fb0:	4b2d      	ldr	r3, [pc, #180]	; (800a068 <__mdiff+0x110>)
 8009fb2:	e7e5      	b.n	8009f80 <__mdiff+0x28>
 8009fb4:	f102 0814 	add.w	r8, r2, #20
 8009fb8:	46c2      	mov	sl, r8
 8009fba:	f04f 0c00 	mov.w	ip, #0
 8009fbe:	6927      	ldr	r7, [r4, #16]
 8009fc0:	60c6      	str	r6, [r0, #12]
 8009fc2:	692e      	ldr	r6, [r5, #16]
 8009fc4:	f104 0014 	add.w	r0, r4, #20
 8009fc8:	f105 0914 	add.w	r9, r5, #20
 8009fcc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009fd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fd4:	3410      	adds	r4, #16
 8009fd6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009fda:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fde:	fa1f f18b 	uxth.w	r1, fp
 8009fe2:	4461      	add	r1, ip
 8009fe4:	fa1f fc83 	uxth.w	ip, r3
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	eba1 010c 	sub.w	r1, r1, ip
 8009fee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ff2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ff6:	b289      	uxth	r1, r1
 8009ff8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009ffc:	454e      	cmp	r6, r9
 8009ffe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a002:	f84a 1b04 	str.w	r1, [sl], #4
 800a006:	d8e6      	bhi.n	8009fd6 <__mdiff+0x7e>
 800a008:	1b73      	subs	r3, r6, r5
 800a00a:	3b15      	subs	r3, #21
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	3515      	adds	r5, #21
 800a012:	3304      	adds	r3, #4
 800a014:	42ae      	cmp	r6, r5
 800a016:	bf38      	it	cc
 800a018:	2304      	movcc	r3, #4
 800a01a:	4418      	add	r0, r3
 800a01c:	4443      	add	r3, r8
 800a01e:	461e      	mov	r6, r3
 800a020:	4605      	mov	r5, r0
 800a022:	4575      	cmp	r5, lr
 800a024:	d30e      	bcc.n	800a044 <__mdiff+0xec>
 800a026:	f10e 0103 	add.w	r1, lr, #3
 800a02a:	1a09      	subs	r1, r1, r0
 800a02c:	f021 0103 	bic.w	r1, r1, #3
 800a030:	3803      	subs	r0, #3
 800a032:	4586      	cmp	lr, r0
 800a034:	bf38      	it	cc
 800a036:	2100      	movcc	r1, #0
 800a038:	440b      	add	r3, r1
 800a03a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a03e:	b189      	cbz	r1, 800a064 <__mdiff+0x10c>
 800a040:	6117      	str	r7, [r2, #16]
 800a042:	e7a3      	b.n	8009f8c <__mdiff+0x34>
 800a044:	f855 8b04 	ldr.w	r8, [r5], #4
 800a048:	fa1f f188 	uxth.w	r1, r8
 800a04c:	4461      	add	r1, ip
 800a04e:	140c      	asrs	r4, r1, #16
 800a050:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a054:	b289      	uxth	r1, r1
 800a056:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a05a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a05e:	f846 1b04 	str.w	r1, [r6], #4
 800a062:	e7de      	b.n	800a022 <__mdiff+0xca>
 800a064:	3f01      	subs	r7, #1
 800a066:	e7e8      	b.n	800a03a <__mdiff+0xe2>
 800a068:	0800c4bb 	.word	0x0800c4bb
 800a06c:	0800c4cc 	.word	0x0800c4cc

0800a070 <__ulp>:
 800a070:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <__ulp+0x3c>)
 800a072:	400b      	ands	r3, r1
 800a074:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc08      	bgt.n	800a08e <__ulp+0x1e>
 800a07c:	425b      	negs	r3, r3
 800a07e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a082:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a086:	da04      	bge.n	800a092 <__ulp+0x22>
 800a088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a08c:	4113      	asrs	r3, r2
 800a08e:	2200      	movs	r2, #0
 800a090:	e008      	b.n	800a0a4 <__ulp+0x34>
 800a092:	f1a2 0314 	sub.w	r3, r2, #20
 800a096:	2b1e      	cmp	r3, #30
 800a098:	bfd6      	itet	le
 800a09a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a09e:	2201      	movgt	r2, #1
 800a0a0:	40da      	lsrle	r2, r3
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	7ff00000 	.word	0x7ff00000

0800a0b0 <__b2d>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	6905      	ldr	r5, [r0, #16]
 800a0b4:	f100 0714 	add.w	r7, r0, #20
 800a0b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0bc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0c0:	1f2e      	subs	r6, r5, #4
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff fd5a 	bl	8009b7c <__hi0bits>
 800a0c8:	f1c0 0220 	rsb	r2, r0, #32
 800a0cc:	280a      	cmp	r0, #10
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a13c <__b2d+0x8c>
 800a0d4:	600a      	str	r2, [r1, #0]
 800a0d6:	dc12      	bgt.n	800a0fe <__b2d+0x4e>
 800a0d8:	f1c0 0e0b 	rsb	lr, r0, #11
 800a0dc:	fa24 f20e 	lsr.w	r2, r4, lr
 800a0e0:	42b7      	cmp	r7, r6
 800a0e2:	ea42 010c 	orr.w	r1, r2, ip
 800a0e6:	bf2c      	ite	cs
 800a0e8:	2200      	movcs	r2, #0
 800a0ea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a0ee:	3315      	adds	r3, #21
 800a0f0:	fa04 f303 	lsl.w	r3, r4, r3
 800a0f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fe:	42b7      	cmp	r7, r6
 800a100:	bf2e      	itee	cs
 800a102:	2200      	movcs	r2, #0
 800a104:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a108:	f1a5 0608 	subcc.w	r6, r5, #8
 800a10c:	3b0b      	subs	r3, #11
 800a10e:	d012      	beq.n	800a136 <__b2d+0x86>
 800a110:	f1c3 0520 	rsb	r5, r3, #32
 800a114:	fa22 f105 	lsr.w	r1, r2, r5
 800a118:	409c      	lsls	r4, r3
 800a11a:	430c      	orrs	r4, r1
 800a11c:	42be      	cmp	r6, r7
 800a11e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a122:	bf94      	ite	ls
 800a124:	2400      	movls	r4, #0
 800a126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a12a:	409a      	lsls	r2, r3
 800a12c:	40ec      	lsrs	r4, r5
 800a12e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a132:	4322      	orrs	r2, r4
 800a134:	e7e1      	b.n	800a0fa <__b2d+0x4a>
 800a136:	ea44 010c 	orr.w	r1, r4, ip
 800a13a:	e7de      	b.n	800a0fa <__b2d+0x4a>
 800a13c:	3ff00000 	.word	0x3ff00000

0800a140 <__d2b>:
 800a140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a142:	2101      	movs	r1, #1
 800a144:	4617      	mov	r7, r2
 800a146:	461c      	mov	r4, r3
 800a148:	9e08      	ldr	r6, [sp, #32]
 800a14a:	f7ff fc25 	bl	8009998 <_Balloc>
 800a14e:	4605      	mov	r5, r0
 800a150:	b930      	cbnz	r0, 800a160 <__d2b+0x20>
 800a152:	4602      	mov	r2, r0
 800a154:	f240 310f 	movw	r1, #783	; 0x30f
 800a158:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <__d2b+0xa4>)
 800a15a:	4823      	ldr	r0, [pc, #140]	; (800a1e8 <__d2b+0xa8>)
 800a15c:	f001 fb80 	bl	800b860 <__assert_func>
 800a160:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a164:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a168:	bb24      	cbnz	r4, 800a1b4 <__d2b+0x74>
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	d026      	beq.n	800a1be <__d2b+0x7e>
 800a170:	4668      	mov	r0, sp
 800a172:	9700      	str	r7, [sp, #0]
 800a174:	f7ff fd22 	bl	8009bbc <__lo0bits>
 800a178:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a17c:	b1e8      	cbz	r0, 800a1ba <__d2b+0x7a>
 800a17e:	f1c0 0320 	rsb	r3, r0, #32
 800a182:	fa02 f303 	lsl.w	r3, r2, r3
 800a186:	430b      	orrs	r3, r1
 800a188:	40c2      	lsrs	r2, r0
 800a18a:	616b      	str	r3, [r5, #20]
 800a18c:	9201      	str	r2, [sp, #4]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bf14      	ite	ne
 800a194:	2102      	movne	r1, #2
 800a196:	2101      	moveq	r1, #1
 800a198:	61ab      	str	r3, [r5, #24]
 800a19a:	6129      	str	r1, [r5, #16]
 800a19c:	b1bc      	cbz	r4, 800a1ce <__d2b+0x8e>
 800a19e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1a2:	4404      	add	r4, r0
 800a1a4:	6034      	str	r4, [r6, #0]
 800a1a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	6018      	str	r0, [r3, #0]
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	b003      	add	sp, #12
 800a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b8:	e7d7      	b.n	800a16a <__d2b+0x2a>
 800a1ba:	6169      	str	r1, [r5, #20]
 800a1bc:	e7e7      	b.n	800a18e <__d2b+0x4e>
 800a1be:	a801      	add	r0, sp, #4
 800a1c0:	f7ff fcfc 	bl	8009bbc <__lo0bits>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	616b      	str	r3, [r5, #20]
 800a1ca:	3020      	adds	r0, #32
 800a1cc:	e7e5      	b.n	800a19a <__d2b+0x5a>
 800a1ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1d2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a1d6:	6030      	str	r0, [r6, #0]
 800a1d8:	6918      	ldr	r0, [r3, #16]
 800a1da:	f7ff fccf 	bl	8009b7c <__hi0bits>
 800a1de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1e2:	e7e2      	b.n	800a1aa <__d2b+0x6a>
 800a1e4:	0800c4bb 	.word	0x0800c4bb
 800a1e8:	0800c4cc 	.word	0x0800c4cc

0800a1ec <__ratio>:
 800a1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	4688      	mov	r8, r1
 800a1f2:	4669      	mov	r1, sp
 800a1f4:	4681      	mov	r9, r0
 800a1f6:	f7ff ff5b 	bl	800a0b0 <__b2d>
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	4640      	mov	r0, r8
 800a202:	a901      	add	r1, sp, #4
 800a204:	f7ff ff54 	bl	800a0b0 <__b2d>
 800a208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a20c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a210:	468b      	mov	fp, r1
 800a212:	eba3 0c02 	sub.w	ip, r3, r2
 800a216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a220:	2b00      	cmp	r3, #0
 800a222:	bfd5      	itete	le
 800a224:	460a      	movle	r2, r1
 800a226:	462a      	movgt	r2, r5
 800a228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a22c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a230:	bfd8      	it	le
 800a232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a236:	465b      	mov	r3, fp
 800a238:	4602      	mov	r2, r0
 800a23a:	4639      	mov	r1, r7
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7f6 fae1 	bl	8000804 <__aeabi_ddiv>
 800a242:	b003      	add	sp, #12
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a248 <__copybits>:
 800a248:	3901      	subs	r1, #1
 800a24a:	b570      	push	{r4, r5, r6, lr}
 800a24c:	1149      	asrs	r1, r1, #5
 800a24e:	6914      	ldr	r4, [r2, #16]
 800a250:	3101      	adds	r1, #1
 800a252:	f102 0314 	add.w	r3, r2, #20
 800a256:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a25a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a25e:	1f05      	subs	r5, r0, #4
 800a260:	42a3      	cmp	r3, r4
 800a262:	d30c      	bcc.n	800a27e <__copybits+0x36>
 800a264:	1aa3      	subs	r3, r4, r2
 800a266:	3b11      	subs	r3, #17
 800a268:	f023 0303 	bic.w	r3, r3, #3
 800a26c:	3211      	adds	r2, #17
 800a26e:	42a2      	cmp	r2, r4
 800a270:	bf88      	it	hi
 800a272:	2300      	movhi	r3, #0
 800a274:	4418      	add	r0, r3
 800a276:	2300      	movs	r3, #0
 800a278:	4288      	cmp	r0, r1
 800a27a:	d305      	bcc.n	800a288 <__copybits+0x40>
 800a27c:	bd70      	pop	{r4, r5, r6, pc}
 800a27e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a282:	f845 6f04 	str.w	r6, [r5, #4]!
 800a286:	e7eb      	b.n	800a260 <__copybits+0x18>
 800a288:	f840 3b04 	str.w	r3, [r0], #4
 800a28c:	e7f4      	b.n	800a278 <__copybits+0x30>

0800a28e <__any_on>:
 800a28e:	f100 0214 	add.w	r2, r0, #20
 800a292:	6900      	ldr	r0, [r0, #16]
 800a294:	114b      	asrs	r3, r1, #5
 800a296:	4298      	cmp	r0, r3
 800a298:	b510      	push	{r4, lr}
 800a29a:	db11      	blt.n	800a2c0 <__any_on+0x32>
 800a29c:	dd0a      	ble.n	800a2b4 <__any_on+0x26>
 800a29e:	f011 011f 	ands.w	r1, r1, #31
 800a2a2:	d007      	beq.n	800a2b4 <__any_on+0x26>
 800a2a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2a8:	fa24 f001 	lsr.w	r0, r4, r1
 800a2ac:	fa00 f101 	lsl.w	r1, r0, r1
 800a2b0:	428c      	cmp	r4, r1
 800a2b2:	d10b      	bne.n	800a2cc <__any_on+0x3e>
 800a2b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d803      	bhi.n	800a2c4 <__any_on+0x36>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	bd10      	pop	{r4, pc}
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	e7f7      	b.n	800a2b4 <__any_on+0x26>
 800a2c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	d0f5      	beq.n	800a2b8 <__any_on+0x2a>
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	e7f6      	b.n	800a2be <__any_on+0x30>

0800a2d0 <sulp>:
 800a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	4690      	mov	r8, r2
 800a2d8:	f7ff feca 	bl	800a070 <__ulp>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	f1b8 0f00 	cmp.w	r8, #0
 800a2e4:	d011      	beq.n	800a30a <sulp+0x3a>
 800a2e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a2ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	dd0b      	ble.n	800a30a <sulp+0x3a>
 800a2f2:	2400      	movs	r4, #0
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2fe:	4622      	mov	r2, r4
 800a300:	462b      	mov	r3, r5
 800a302:	f7f6 f955 	bl	80005b0 <__aeabi_dmul>
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a312:	0000      	movs	r0, r0
 800a314:	0000      	movs	r0, r0
	...

0800a318 <_strtod_l>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	b09f      	sub	sp, #124	; 0x7c
 800a31e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a320:	2200      	movs	r2, #0
 800a322:	4604      	mov	r4, r0
 800a324:	921a      	str	r2, [sp, #104]	; 0x68
 800a326:	460d      	mov	r5, r1
 800a328:	f04f 0800 	mov.w	r8, #0
 800a32c:	f04f 0900 	mov.w	r9, #0
 800a330:	460a      	mov	r2, r1
 800a332:	9219      	str	r2, [sp, #100]	; 0x64
 800a334:	7811      	ldrb	r1, [r2, #0]
 800a336:	292b      	cmp	r1, #43	; 0x2b
 800a338:	d04a      	beq.n	800a3d0 <_strtod_l+0xb8>
 800a33a:	d838      	bhi.n	800a3ae <_strtod_l+0x96>
 800a33c:	290d      	cmp	r1, #13
 800a33e:	d832      	bhi.n	800a3a6 <_strtod_l+0x8e>
 800a340:	2908      	cmp	r1, #8
 800a342:	d832      	bhi.n	800a3aa <_strtod_l+0x92>
 800a344:	2900      	cmp	r1, #0
 800a346:	d03b      	beq.n	800a3c0 <_strtod_l+0xa8>
 800a348:	2200      	movs	r2, #0
 800a34a:	920e      	str	r2, [sp, #56]	; 0x38
 800a34c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a34e:	7832      	ldrb	r2, [r6, #0]
 800a350:	2a30      	cmp	r2, #48	; 0x30
 800a352:	f040 80b2 	bne.w	800a4ba <_strtod_l+0x1a2>
 800a356:	7872      	ldrb	r2, [r6, #1]
 800a358:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a35c:	2a58      	cmp	r2, #88	; 0x58
 800a35e:	d16e      	bne.n	800a43e <_strtod_l+0x126>
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a364:	4620      	mov	r0, r4
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	ab1a      	add	r3, sp, #104	; 0x68
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	4a8c      	ldr	r2, [pc, #560]	; (800a5a0 <_strtod_l+0x288>)
 800a36e:	ab1b      	add	r3, sp, #108	; 0x6c
 800a370:	a919      	add	r1, sp, #100	; 0x64
 800a372:	f001 fb0f 	bl	800b994 <__gethex>
 800a376:	f010 070f 	ands.w	r7, r0, #15
 800a37a:	4605      	mov	r5, r0
 800a37c:	d005      	beq.n	800a38a <_strtod_l+0x72>
 800a37e:	2f06      	cmp	r7, #6
 800a380:	d128      	bne.n	800a3d4 <_strtod_l+0xbc>
 800a382:	2300      	movs	r3, #0
 800a384:	3601      	adds	r6, #1
 800a386:	9619      	str	r6, [sp, #100]	; 0x64
 800a388:	930e      	str	r3, [sp, #56]	; 0x38
 800a38a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 85a0 	bne.w	800aed2 <_strtod_l+0xbba>
 800a392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a394:	b1cb      	cbz	r3, 800a3ca <_strtod_l+0xb2>
 800a396:	4642      	mov	r2, r8
 800a398:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a39c:	4610      	mov	r0, r2
 800a39e:	4619      	mov	r1, r3
 800a3a0:	b01f      	add	sp, #124	; 0x7c
 800a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a6:	2920      	cmp	r1, #32
 800a3a8:	d1ce      	bne.n	800a348 <_strtod_l+0x30>
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	e7c1      	b.n	800a332 <_strtod_l+0x1a>
 800a3ae:	292d      	cmp	r1, #45	; 0x2d
 800a3b0:	d1ca      	bne.n	800a348 <_strtod_l+0x30>
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	910e      	str	r1, [sp, #56]	; 0x38
 800a3b6:	1c51      	adds	r1, r2, #1
 800a3b8:	9119      	str	r1, [sp, #100]	; 0x64
 800a3ba:	7852      	ldrb	r2, [r2, #1]
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	d1c5      	bne.n	800a34c <_strtod_l+0x34>
 800a3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3c2:	9519      	str	r5, [sp, #100]	; 0x64
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f040 8582 	bne.w	800aece <_strtod_l+0xbb6>
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	e7e5      	b.n	800a39c <_strtod_l+0x84>
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	e7ef      	b.n	800a3b4 <_strtod_l+0x9c>
 800a3d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3d6:	b13a      	cbz	r2, 800a3e8 <_strtod_l+0xd0>
 800a3d8:	2135      	movs	r1, #53	; 0x35
 800a3da:	a81c      	add	r0, sp, #112	; 0x70
 800a3dc:	f7ff ff34 	bl	800a248 <__copybits>
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3e4:	f7ff fb18 	bl	8009a18 <_Bfree>
 800a3e8:	3f01      	subs	r7, #1
 800a3ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a3ec:	2f04      	cmp	r7, #4
 800a3ee:	d806      	bhi.n	800a3fe <_strtod_l+0xe6>
 800a3f0:	e8df f007 	tbb	[pc, r7]
 800a3f4:	201d0314 	.word	0x201d0314
 800a3f8:	14          	.byte	0x14
 800a3f9:	00          	.byte	0x00
 800a3fa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a3fe:	05e9      	lsls	r1, r5, #23
 800a400:	bf48      	it	mi
 800a402:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a40a:	0d1b      	lsrs	r3, r3, #20
 800a40c:	051b      	lsls	r3, r3, #20
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1bb      	bne.n	800a38a <_strtod_l+0x72>
 800a412:	f7fe fb15 	bl	8008a40 <__errno>
 800a416:	2322      	movs	r3, #34	; 0x22
 800a418:	6003      	str	r3, [r0, #0]
 800a41a:	e7b6      	b.n	800a38a <_strtod_l+0x72>
 800a41c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a420:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a428:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a42c:	e7e7      	b.n	800a3fe <_strtod_l+0xe6>
 800a42e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a5a4 <_strtod_l+0x28c>
 800a432:	e7e4      	b.n	800a3fe <_strtod_l+0xe6>
 800a434:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a438:	f04f 38ff 	mov.w	r8, #4294967295
 800a43c:	e7df      	b.n	800a3fe <_strtod_l+0xe6>
 800a43e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	9219      	str	r2, [sp, #100]	; 0x64
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	2b30      	cmp	r3, #48	; 0x30
 800a448:	d0f9      	beq.n	800a43e <_strtod_l+0x126>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d09d      	beq.n	800a38a <_strtod_l+0x72>
 800a44e:	2301      	movs	r3, #1
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	220a      	movs	r2, #10
 800a456:	46d3      	mov	fp, sl
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a45c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a460:	930b      	str	r3, [sp, #44]	; 0x2c
 800a462:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a464:	7806      	ldrb	r6, [r0, #0]
 800a466:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a46a:	b2d9      	uxtb	r1, r3
 800a46c:	2909      	cmp	r1, #9
 800a46e:	d926      	bls.n	800a4be <_strtod_l+0x1a6>
 800a470:	2201      	movs	r2, #1
 800a472:	494d      	ldr	r1, [pc, #308]	; (800a5a8 <_strtod_l+0x290>)
 800a474:	f001 f9be 	bl	800b7f4 <strncmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d030      	beq.n	800a4de <_strtod_l+0x1c6>
 800a47c:	2000      	movs	r0, #0
 800a47e:	4632      	mov	r2, r6
 800a480:	4603      	mov	r3, r0
 800a482:	465e      	mov	r6, fp
 800a484:	9008      	str	r0, [sp, #32]
 800a486:	2a65      	cmp	r2, #101	; 0x65
 800a488:	d001      	beq.n	800a48e <_strtod_l+0x176>
 800a48a:	2a45      	cmp	r2, #69	; 0x45
 800a48c:	d113      	bne.n	800a4b6 <_strtod_l+0x19e>
 800a48e:	b91e      	cbnz	r6, 800a498 <_strtod_l+0x180>
 800a490:	9a05      	ldr	r2, [sp, #20]
 800a492:	4302      	orrs	r2, r0
 800a494:	d094      	beq.n	800a3c0 <_strtod_l+0xa8>
 800a496:	2600      	movs	r6, #0
 800a498:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a49a:	1c6a      	adds	r2, r5, #1
 800a49c:	9219      	str	r2, [sp, #100]	; 0x64
 800a49e:	786a      	ldrb	r2, [r5, #1]
 800a4a0:	2a2b      	cmp	r2, #43	; 0x2b
 800a4a2:	d074      	beq.n	800a58e <_strtod_l+0x276>
 800a4a4:	2a2d      	cmp	r2, #45	; 0x2d
 800a4a6:	d078      	beq.n	800a59a <_strtod_l+0x282>
 800a4a8:	f04f 0c00 	mov.w	ip, #0
 800a4ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4b0:	2909      	cmp	r1, #9
 800a4b2:	d97f      	bls.n	800a5b4 <_strtod_l+0x29c>
 800a4b4:	9519      	str	r5, [sp, #100]	; 0x64
 800a4b6:	2700      	movs	r7, #0
 800a4b8:	e09e      	b.n	800a5f8 <_strtod_l+0x2e0>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e7c8      	b.n	800a450 <_strtod_l+0x138>
 800a4be:	f1bb 0f08 	cmp.w	fp, #8
 800a4c2:	bfd8      	it	le
 800a4c4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800a4c6:	f100 0001 	add.w	r0, r0, #1
 800a4ca:	bfd6      	itet	le
 800a4cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4d0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a4d4:	930a      	strle	r3, [sp, #40]	; 0x28
 800a4d6:	f10b 0b01 	add.w	fp, fp, #1
 800a4da:	9019      	str	r0, [sp, #100]	; 0x64
 800a4dc:	e7c1      	b.n	800a462 <_strtod_l+0x14a>
 800a4de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	9219      	str	r2, [sp, #100]	; 0x64
 800a4e4:	785a      	ldrb	r2, [r3, #1]
 800a4e6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ea:	d037      	beq.n	800a55c <_strtod_l+0x244>
 800a4ec:	465e      	mov	r6, fp
 800a4ee:	9008      	str	r0, [sp, #32]
 800a4f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d912      	bls.n	800a51e <_strtod_l+0x206>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7c4      	b.n	800a486 <_strtod_l+0x16e>
 800a4fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4fe:	3001      	adds	r0, #1
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	9219      	str	r2, [sp, #100]	; 0x64
 800a504:	785a      	ldrb	r2, [r3, #1]
 800a506:	2a30      	cmp	r2, #48	; 0x30
 800a508:	d0f8      	beq.n	800a4fc <_strtod_l+0x1e4>
 800a50a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a50e:	2b08      	cmp	r3, #8
 800a510:	f200 84e4 	bhi.w	800aedc <_strtod_l+0xbc4>
 800a514:	9008      	str	r0, [sp, #32]
 800a516:	2000      	movs	r0, #0
 800a518:	4606      	mov	r6, r0
 800a51a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a51c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51e:	3a30      	subs	r2, #48	; 0x30
 800a520:	f100 0301 	add.w	r3, r0, #1
 800a524:	d014      	beq.n	800a550 <_strtod_l+0x238>
 800a526:	9908      	ldr	r1, [sp, #32]
 800a528:	eb00 0c06 	add.w	ip, r0, r6
 800a52c:	4419      	add	r1, r3
 800a52e:	9108      	str	r1, [sp, #32]
 800a530:	4633      	mov	r3, r6
 800a532:	210a      	movs	r1, #10
 800a534:	4563      	cmp	r3, ip
 800a536:	d113      	bne.n	800a560 <_strtod_l+0x248>
 800a538:	1833      	adds	r3, r6, r0
 800a53a:	2b08      	cmp	r3, #8
 800a53c:	f106 0601 	add.w	r6, r6, #1
 800a540:	4406      	add	r6, r0
 800a542:	dc1a      	bgt.n	800a57a <_strtod_l+0x262>
 800a544:	230a      	movs	r3, #10
 800a546:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a548:	fb03 2301 	mla	r3, r3, r1, r2
 800a54c:	930a      	str	r3, [sp, #40]	; 0x28
 800a54e:	2300      	movs	r3, #0
 800a550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a552:	4618      	mov	r0, r3
 800a554:	1c51      	adds	r1, r2, #1
 800a556:	9119      	str	r1, [sp, #100]	; 0x64
 800a558:	7852      	ldrb	r2, [r2, #1]
 800a55a:	e7c9      	b.n	800a4f0 <_strtod_l+0x1d8>
 800a55c:	4658      	mov	r0, fp
 800a55e:	e7d2      	b.n	800a506 <_strtod_l+0x1ee>
 800a560:	2b08      	cmp	r3, #8
 800a562:	f103 0301 	add.w	r3, r3, #1
 800a566:	dc03      	bgt.n	800a570 <_strtod_l+0x258>
 800a568:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a56a:	434f      	muls	r7, r1
 800a56c:	970a      	str	r7, [sp, #40]	; 0x28
 800a56e:	e7e1      	b.n	800a534 <_strtod_l+0x21c>
 800a570:	2b10      	cmp	r3, #16
 800a572:	bfd8      	it	le
 800a574:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a578:	e7dc      	b.n	800a534 <_strtod_l+0x21c>
 800a57a:	2e10      	cmp	r6, #16
 800a57c:	bfdc      	itt	le
 800a57e:	230a      	movle	r3, #10
 800a580:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a584:	e7e3      	b.n	800a54e <_strtod_l+0x236>
 800a586:	2300      	movs	r3, #0
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	2301      	movs	r3, #1
 800a58c:	e780      	b.n	800a490 <_strtod_l+0x178>
 800a58e:	f04f 0c00 	mov.w	ip, #0
 800a592:	1caa      	adds	r2, r5, #2
 800a594:	9219      	str	r2, [sp, #100]	; 0x64
 800a596:	78aa      	ldrb	r2, [r5, #2]
 800a598:	e788      	b.n	800a4ac <_strtod_l+0x194>
 800a59a:	f04f 0c01 	mov.w	ip, #1
 800a59e:	e7f8      	b.n	800a592 <_strtod_l+0x27a>
 800a5a0:	0800c628 	.word	0x0800c628
 800a5a4:	7ff00000 	.word	0x7ff00000
 800a5a8:	0800c624 	.word	0x0800c624
 800a5ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5ae:	1c51      	adds	r1, r2, #1
 800a5b0:	9119      	str	r1, [sp, #100]	; 0x64
 800a5b2:	7852      	ldrb	r2, [r2, #1]
 800a5b4:	2a30      	cmp	r2, #48	; 0x30
 800a5b6:	d0f9      	beq.n	800a5ac <_strtod_l+0x294>
 800a5b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5bc:	2908      	cmp	r1, #8
 800a5be:	f63f af7a 	bhi.w	800a4b6 <_strtod_l+0x19e>
 800a5c2:	3a30      	subs	r2, #48	; 0x30
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5c8:	920c      	str	r2, [sp, #48]	; 0x30
 800a5ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5cc:	1c57      	adds	r7, r2, #1
 800a5ce:	9719      	str	r7, [sp, #100]	; 0x64
 800a5d0:	7852      	ldrb	r2, [r2, #1]
 800a5d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5d6:	f1be 0f09 	cmp.w	lr, #9
 800a5da:	d938      	bls.n	800a64e <_strtod_l+0x336>
 800a5dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5de:	1a7f      	subs	r7, r7, r1
 800a5e0:	2f08      	cmp	r7, #8
 800a5e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5e6:	dc03      	bgt.n	800a5f0 <_strtod_l+0x2d8>
 800a5e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ea:	428f      	cmp	r7, r1
 800a5ec:	bfa8      	it	ge
 800a5ee:	460f      	movge	r7, r1
 800a5f0:	f1bc 0f00 	cmp.w	ip, #0
 800a5f4:	d000      	beq.n	800a5f8 <_strtod_l+0x2e0>
 800a5f6:	427f      	negs	r7, r7
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d14f      	bne.n	800a69c <_strtod_l+0x384>
 800a5fc:	9905      	ldr	r1, [sp, #20]
 800a5fe:	4301      	orrs	r1, r0
 800a600:	f47f aec3 	bne.w	800a38a <_strtod_l+0x72>
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f aedb 	bne.w	800a3c0 <_strtod_l+0xa8>
 800a60a:	2a69      	cmp	r2, #105	; 0x69
 800a60c:	d029      	beq.n	800a662 <_strtod_l+0x34a>
 800a60e:	dc26      	bgt.n	800a65e <_strtod_l+0x346>
 800a610:	2a49      	cmp	r2, #73	; 0x49
 800a612:	d026      	beq.n	800a662 <_strtod_l+0x34a>
 800a614:	2a4e      	cmp	r2, #78	; 0x4e
 800a616:	f47f aed3 	bne.w	800a3c0 <_strtod_l+0xa8>
 800a61a:	499a      	ldr	r1, [pc, #616]	; (800a884 <_strtod_l+0x56c>)
 800a61c:	a819      	add	r0, sp, #100	; 0x64
 800a61e:	f001 fbfb 	bl	800be18 <__match>
 800a622:	2800      	cmp	r0, #0
 800a624:	f43f aecc 	beq.w	800a3c0 <_strtod_l+0xa8>
 800a628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b28      	cmp	r3, #40	; 0x28
 800a62e:	d12f      	bne.n	800a690 <_strtod_l+0x378>
 800a630:	4995      	ldr	r1, [pc, #596]	; (800a888 <_strtod_l+0x570>)
 800a632:	aa1c      	add	r2, sp, #112	; 0x70
 800a634:	a819      	add	r0, sp, #100	; 0x64
 800a636:	f001 fc03 	bl	800be40 <__hexnan>
 800a63a:	2805      	cmp	r0, #5
 800a63c:	d128      	bne.n	800a690 <_strtod_l+0x378>
 800a63e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a640:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a644:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a648:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a64c:	e69d      	b.n	800a38a <_strtod_l+0x72>
 800a64e:	210a      	movs	r1, #10
 800a650:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a652:	fb01 2107 	mla	r1, r1, r7, r2
 800a656:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a65a:	9209      	str	r2, [sp, #36]	; 0x24
 800a65c:	e7b5      	b.n	800a5ca <_strtod_l+0x2b2>
 800a65e:	2a6e      	cmp	r2, #110	; 0x6e
 800a660:	e7d9      	b.n	800a616 <_strtod_l+0x2fe>
 800a662:	498a      	ldr	r1, [pc, #552]	; (800a88c <_strtod_l+0x574>)
 800a664:	a819      	add	r0, sp, #100	; 0x64
 800a666:	f001 fbd7 	bl	800be18 <__match>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f43f aea8 	beq.w	800a3c0 <_strtod_l+0xa8>
 800a670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a672:	4987      	ldr	r1, [pc, #540]	; (800a890 <_strtod_l+0x578>)
 800a674:	3b01      	subs	r3, #1
 800a676:	a819      	add	r0, sp, #100	; 0x64
 800a678:	9319      	str	r3, [sp, #100]	; 0x64
 800a67a:	f001 fbcd 	bl	800be18 <__match>
 800a67e:	b910      	cbnz	r0, 800a686 <_strtod_l+0x36e>
 800a680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a682:	3301      	adds	r3, #1
 800a684:	9319      	str	r3, [sp, #100]	; 0x64
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a894 <_strtod_l+0x57c>
 800a68e:	e67c      	b.n	800a38a <_strtod_l+0x72>
 800a690:	4881      	ldr	r0, [pc, #516]	; (800a898 <_strtod_l+0x580>)
 800a692:	f001 f8df 	bl	800b854 <nan>
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	e676      	b.n	800a38a <_strtod_l+0x72>
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	f1bb 0f00 	cmp.w	fp, #0
 800a6a2:	bf08      	it	eq
 800a6a4:	46b3      	moveq	fp, r6
 800a6a6:	1afb      	subs	r3, r7, r3
 800a6a8:	2e10      	cmp	r6, #16
 800a6aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6ac:	4635      	mov	r5, r6
 800a6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b0:	bfa8      	it	ge
 800a6b2:	2510      	movge	r5, #16
 800a6b4:	f7f5 ff02 	bl	80004bc <__aeabi_ui2d>
 800a6b8:	2e09      	cmp	r6, #9
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	dd13      	ble.n	800a6e8 <_strtod_l+0x3d0>
 800a6c0:	4b76      	ldr	r3, [pc, #472]	; (800a89c <_strtod_l+0x584>)
 800a6c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6ca:	f7f5 ff71 	bl	80005b0 <__aeabi_dmul>
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	f7f5 fef2 	bl	80004bc <__aeabi_ui2d>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4649      	mov	r1, r9
 800a6e0:	f7f5 fdb0 	bl	8000244 <__adddf3>
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	2e0f      	cmp	r6, #15
 800a6ea:	dc36      	bgt.n	800a75a <_strtod_l+0x442>
 800a6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f43f ae4b 	beq.w	800a38a <_strtod_l+0x72>
 800a6f4:	dd22      	ble.n	800a73c <_strtod_l+0x424>
 800a6f6:	2b16      	cmp	r3, #22
 800a6f8:	dc09      	bgt.n	800a70e <_strtod_l+0x3f6>
 800a6fa:	4968      	ldr	r1, [pc, #416]	; (800a89c <_strtod_l+0x584>)
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a702:	464b      	mov	r3, r9
 800a704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a708:	f7f5 ff52 	bl	80005b0 <__aeabi_dmul>
 800a70c:	e7c3      	b.n	800a696 <_strtod_l+0x37e>
 800a70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a710:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a714:	4293      	cmp	r3, r2
 800a716:	db20      	blt.n	800a75a <_strtod_l+0x442>
 800a718:	4c60      	ldr	r4, [pc, #384]	; (800a89c <_strtod_l+0x584>)
 800a71a:	f1c6 060f 	rsb	r6, r6, #15
 800a71e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a722:	4642      	mov	r2, r8
 800a724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a728:	464b      	mov	r3, r9
 800a72a:	f7f5 ff41 	bl	80005b0 <__aeabi_dmul>
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	1b9e      	subs	r6, r3, r6
 800a732:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a736:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a73a:	e7e5      	b.n	800a708 <_strtod_l+0x3f0>
 800a73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73e:	3316      	adds	r3, #22
 800a740:	db0b      	blt.n	800a75a <_strtod_l+0x442>
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	4640      	mov	r0, r8
 800a746:	1bdf      	subs	r7, r3, r7
 800a748:	4b54      	ldr	r3, [pc, #336]	; (800a89c <_strtod_l+0x584>)
 800a74a:	4649      	mov	r1, r9
 800a74c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a754:	f7f6 f856 	bl	8000804 <__aeabi_ddiv>
 800a758:	e79d      	b.n	800a696 <_strtod_l+0x37e>
 800a75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75c:	1b75      	subs	r5, r6, r5
 800a75e:	441d      	add	r5, r3
 800a760:	2d00      	cmp	r5, #0
 800a762:	dd70      	ble.n	800a846 <_strtod_l+0x52e>
 800a764:	f015 030f 	ands.w	r3, r5, #15
 800a768:	d00a      	beq.n	800a780 <_strtod_l+0x468>
 800a76a:	494c      	ldr	r1, [pc, #304]	; (800a89c <_strtod_l+0x584>)
 800a76c:	4642      	mov	r2, r8
 800a76e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a776:	464b      	mov	r3, r9
 800a778:	f7f5 ff1a 	bl	80005b0 <__aeabi_dmul>
 800a77c:	4680      	mov	r8, r0
 800a77e:	4689      	mov	r9, r1
 800a780:	f035 050f 	bics.w	r5, r5, #15
 800a784:	d04d      	beq.n	800a822 <_strtod_l+0x50a>
 800a786:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a78a:	dd22      	ble.n	800a7d2 <_strtod_l+0x4ba>
 800a78c:	2600      	movs	r6, #0
 800a78e:	46b3      	mov	fp, r6
 800a790:	960b      	str	r6, [sp, #44]	; 0x2c
 800a792:	9608      	str	r6, [sp, #32]
 800a794:	2322      	movs	r3, #34	; 0x22
 800a796:	f04f 0800 	mov.w	r8, #0
 800a79a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a894 <_strtod_l+0x57c>
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f43f adf1 	beq.w	800a38a <_strtod_l+0x72>
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7ac:	f7ff f934 	bl	8009a18 <_Bfree>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	9908      	ldr	r1, [sp, #32]
 800a7b4:	f7ff f930 	bl	8009a18 <_Bfree>
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff f92c 	bl	8009a18 <_Bfree>
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7c4:	f7ff f928 	bl	8009a18 <_Bfree>
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7ff f924 	bl	8009a18 <_Bfree>
 800a7d0:	e5db      	b.n	800a38a <_strtod_l+0x72>
 800a7d2:	4b33      	ldr	r3, [pc, #204]	; (800a8a0 <_strtod_l+0x588>)
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	9305      	str	r3, [sp, #20]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4649      	mov	r1, r9
 800a7dc:	469a      	mov	sl, r3
 800a7de:	112d      	asrs	r5, r5, #4
 800a7e0:	2d01      	cmp	r5, #1
 800a7e2:	dc21      	bgt.n	800a828 <_strtod_l+0x510>
 800a7e4:	b10b      	cbz	r3, 800a7ea <_strtod_l+0x4d2>
 800a7e6:	4680      	mov	r8, r0
 800a7e8:	4689      	mov	r9, r1
 800a7ea:	492d      	ldr	r1, [pc, #180]	; (800a8a0 <_strtod_l+0x588>)
 800a7ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	f7f5 fed8 	bl	80005b0 <__aeabi_dmul>
 800a800:	4b24      	ldr	r3, [pc, #144]	; (800a894 <_strtod_l+0x57c>)
 800a802:	460a      	mov	r2, r1
 800a804:	400b      	ands	r3, r1
 800a806:	4927      	ldr	r1, [pc, #156]	; (800a8a4 <_strtod_l+0x58c>)
 800a808:	4680      	mov	r8, r0
 800a80a:	428b      	cmp	r3, r1
 800a80c:	d8be      	bhi.n	800a78c <_strtod_l+0x474>
 800a80e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a812:	428b      	cmp	r3, r1
 800a814:	bf86      	itte	hi
 800a816:	f04f 38ff 	movhi.w	r8, #4294967295
 800a81a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a8a8 <_strtod_l+0x590>
 800a81e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a822:	2300      	movs	r3, #0
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	e07b      	b.n	800a920 <_strtod_l+0x608>
 800a828:	07ea      	lsls	r2, r5, #31
 800a82a:	d505      	bpl.n	800a838 <_strtod_l+0x520>
 800a82c:	9b05      	ldr	r3, [sp, #20]
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 febd 	bl	80005b0 <__aeabi_dmul>
 800a836:	2301      	movs	r3, #1
 800a838:	9a05      	ldr	r2, [sp, #20]
 800a83a:	f10a 0a01 	add.w	sl, sl, #1
 800a83e:	3208      	adds	r2, #8
 800a840:	106d      	asrs	r5, r5, #1
 800a842:	9205      	str	r2, [sp, #20]
 800a844:	e7cc      	b.n	800a7e0 <_strtod_l+0x4c8>
 800a846:	d0ec      	beq.n	800a822 <_strtod_l+0x50a>
 800a848:	426d      	negs	r5, r5
 800a84a:	f015 020f 	ands.w	r2, r5, #15
 800a84e:	d00a      	beq.n	800a866 <_strtod_l+0x54e>
 800a850:	4b12      	ldr	r3, [pc, #72]	; (800a89c <_strtod_l+0x584>)
 800a852:	4640      	mov	r0, r8
 800a854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a858:	4649      	mov	r1, r9
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 ffd1 	bl	8000804 <__aeabi_ddiv>
 800a862:	4680      	mov	r8, r0
 800a864:	4689      	mov	r9, r1
 800a866:	112d      	asrs	r5, r5, #4
 800a868:	d0db      	beq.n	800a822 <_strtod_l+0x50a>
 800a86a:	2d1f      	cmp	r5, #31
 800a86c:	dd1e      	ble.n	800a8ac <_strtod_l+0x594>
 800a86e:	2600      	movs	r6, #0
 800a870:	46b3      	mov	fp, r6
 800a872:	960b      	str	r6, [sp, #44]	; 0x2c
 800a874:	9608      	str	r6, [sp, #32]
 800a876:	2322      	movs	r3, #34	; 0x22
 800a878:	f04f 0800 	mov.w	r8, #0
 800a87c:	f04f 0900 	mov.w	r9, #0
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	e78d      	b.n	800a7a0 <_strtod_l+0x488>
 800a884:	0800c413 	.word	0x0800c413
 800a888:	0800c63c 	.word	0x0800c63c
 800a88c:	0800c40b 	.word	0x0800c40b
 800a890:	0800c442 	.word	0x0800c442
 800a894:	7ff00000 	.word	0x7ff00000
 800a898:	0800c7cd 	.word	0x0800c7cd
 800a89c:	0800c550 	.word	0x0800c550
 800a8a0:	0800c528 	.word	0x0800c528
 800a8a4:	7ca00000 	.word	0x7ca00000
 800a8a8:	7fefffff 	.word	0x7fefffff
 800a8ac:	f015 0310 	ands.w	r3, r5, #16
 800a8b0:	bf18      	it	ne
 800a8b2:	236a      	movne	r3, #106	; 0x6a
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	9305      	str	r3, [sp, #20]
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800ab88 <_strtod_l+0x870>
 800a8c0:	07ea      	lsls	r2, r5, #31
 800a8c2:	d504      	bpl.n	800a8ce <_strtod_l+0x5b6>
 800a8c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8c8:	f7f5 fe72 	bl	80005b0 <__aeabi_dmul>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	106d      	asrs	r5, r5, #1
 800a8d0:	f10a 0a08 	add.w	sl, sl, #8
 800a8d4:	d1f4      	bne.n	800a8c0 <_strtod_l+0x5a8>
 800a8d6:	b10b      	cbz	r3, 800a8dc <_strtod_l+0x5c4>
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4689      	mov	r9, r1
 800a8dc:	9b05      	ldr	r3, [sp, #20]
 800a8de:	b1bb      	cbz	r3, 800a910 <_strtod_l+0x5f8>
 800a8e0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a8e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	dd10      	ble.n	800a910 <_strtod_l+0x5f8>
 800a8ee:	2b1f      	cmp	r3, #31
 800a8f0:	f340 8128 	ble.w	800ab44 <_strtod_l+0x82c>
 800a8f4:	2b34      	cmp	r3, #52	; 0x34
 800a8f6:	bfd8      	it	le
 800a8f8:	f04f 33ff 	movle.w	r3, #4294967295
 800a8fc:	f04f 0800 	mov.w	r8, #0
 800a900:	bfcf      	iteee	gt
 800a902:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a906:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a90a:	4093      	lslle	r3, r2
 800a90c:	ea03 0901 	andle.w	r9, r3, r1
 800a910:	2200      	movs	r2, #0
 800a912:	2300      	movs	r3, #0
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f6 f8b2 	bl	8000a80 <__aeabi_dcmpeq>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d1a6      	bne.n	800a86e <_strtod_l+0x556>
 800a920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a922:	465a      	mov	r2, fp
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4620      	mov	r0, r4
 800a928:	4633      	mov	r3, r6
 800a92a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a92c:	f7ff f8dc 	bl	8009ae8 <__s2b>
 800a930:	900b      	str	r0, [sp, #44]	; 0x2c
 800a932:	2800      	cmp	r0, #0
 800a934:	f43f af2a 	beq.w	800a78c <_strtod_l+0x474>
 800a938:	2600      	movs	r6, #0
 800a93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	2a00      	cmp	r2, #0
 800a940:	eba3 0307 	sub.w	r3, r3, r7
 800a944:	bfa8      	it	ge
 800a946:	2300      	movge	r3, #0
 800a948:	46b3      	mov	fp, r6
 800a94a:	9312      	str	r3, [sp, #72]	; 0x48
 800a94c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a950:	9316      	str	r3, [sp, #88]	; 0x58
 800a952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a954:	4620      	mov	r0, r4
 800a956:	6859      	ldr	r1, [r3, #4]
 800a958:	f7ff f81e 	bl	8009998 <_Balloc>
 800a95c:	9008      	str	r0, [sp, #32]
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f af18 	beq.w	800a794 <_strtod_l+0x47c>
 800a964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a966:	300c      	adds	r0, #12
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	f103 010c 	add.w	r1, r3, #12
 800a96e:	3202      	adds	r2, #2
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	f000 ff61 	bl	800b838 <memcpy>
 800a976:	ab1c      	add	r3, sp, #112	; 0x70
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	4642      	mov	r2, r8
 800a980:	464b      	mov	r3, r9
 800a982:	4620      	mov	r0, r4
 800a984:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a988:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a98c:	f7ff fbd8 	bl	800a140 <__d2b>
 800a990:	901a      	str	r0, [sp, #104]	; 0x68
 800a992:	2800      	cmp	r0, #0
 800a994:	f43f aefe 	beq.w	800a794 <_strtod_l+0x47c>
 800a998:	2101      	movs	r1, #1
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7ff f93c 	bl	8009c18 <__i2b>
 800a9a0:	4683      	mov	fp, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f43f aef6 	beq.w	800a794 <_strtod_l+0x47c>
 800a9a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a9aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9ac:	2f00      	cmp	r7, #0
 800a9ae:	bfab      	itete	ge
 800a9b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a9b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a9b4:	eb07 0a03 	addge.w	sl, r7, r3
 800a9b8:	1bdd      	sublt	r5, r3, r7
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	bfa8      	it	ge
 800a9be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a9c0:	eba7 0703 	sub.w	r7, r7, r3
 800a9c4:	4417      	add	r7, r2
 800a9c6:	4b71      	ldr	r3, [pc, #452]	; (800ab8c <_strtod_l+0x874>)
 800a9c8:	f107 37ff 	add.w	r7, r7, #4294967295
 800a9cc:	bfb8      	it	lt
 800a9ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a9d2:	429f      	cmp	r7, r3
 800a9d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9d8:	f280 80c7 	bge.w	800ab6a <_strtod_l+0x852>
 800a9dc:	1bdb      	subs	r3, r3, r7
 800a9de:	2b1f      	cmp	r3, #31
 800a9e0:	f04f 0101 	mov.w	r1, #1
 800a9e4:	eba2 0203 	sub.w	r2, r2, r3
 800a9e8:	f300 80b3 	bgt.w	800ab52 <_strtod_l+0x83a>
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9310      	str	r3, [sp, #64]	; 0x40
 800a9f6:	eb0a 0702 	add.w	r7, sl, r2
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	45ba      	cmp	sl, r7
 800a9fe:	4415      	add	r5, r2
 800aa00:	441d      	add	r5, r3
 800aa02:	4653      	mov	r3, sl
 800aa04:	bfa8      	it	ge
 800aa06:	463b      	movge	r3, r7
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	bfa8      	it	ge
 800aa0c:	462b      	movge	r3, r5
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfc2      	ittt	gt
 800aa12:	1aff      	subgt	r7, r7, r3
 800aa14:	1aed      	subgt	r5, r5, r3
 800aa16:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aa1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd17      	ble.n	800aa50 <_strtod_l+0x738>
 800aa20:	4659      	mov	r1, fp
 800aa22:	461a      	mov	r2, r3
 800aa24:	4620      	mov	r0, r4
 800aa26:	f7ff f9b5 	bl	8009d94 <__pow5mult>
 800aa2a:	4683      	mov	fp, r0
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f43f aeb1 	beq.w	800a794 <_strtod_l+0x47c>
 800aa32:	4601      	mov	r1, r0
 800aa34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff f904 	bl	8009c44 <__multiply>
 800aa3c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f43f aea8 	beq.w	800a794 <_strtod_l+0x47c>
 800aa44:	4620      	mov	r0, r4
 800aa46:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa48:	f7fe ffe6 	bl	8009a18 <_Bfree>
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa50:	2f00      	cmp	r7, #0
 800aa52:	f300 808f 	bgt.w	800ab74 <_strtod_l+0x85c>
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd08      	ble.n	800aa6e <_strtod_l+0x756>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa60:	9908      	ldr	r1, [sp, #32]
 800aa62:	f7ff f997 	bl	8009d94 <__pow5mult>
 800aa66:	9008      	str	r0, [sp, #32]
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f43f ae93 	beq.w	800a794 <_strtod_l+0x47c>
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	dd08      	ble.n	800aa84 <_strtod_l+0x76c>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4620      	mov	r0, r4
 800aa76:	9908      	ldr	r1, [sp, #32]
 800aa78:	f7ff f9e6 	bl	8009e48 <__lshift>
 800aa7c:	9008      	str	r0, [sp, #32]
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f ae88 	beq.w	800a794 <_strtod_l+0x47c>
 800aa84:	f1ba 0f00 	cmp.w	sl, #0
 800aa88:	dd08      	ble.n	800aa9c <_strtod_l+0x784>
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7ff f9da 	bl	8009e48 <__lshift>
 800aa94:	4683      	mov	fp, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f43f ae7c 	beq.w	800a794 <_strtod_l+0x47c>
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	9a08      	ldr	r2, [sp, #32]
 800aaa0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aaa2:	f7ff fa59 	bl	8009f58 <__mdiff>
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f43f ae73 	beq.w	800a794 <_strtod_l+0x47c>
 800aaae:	2500      	movs	r5, #0
 800aab0:	68c3      	ldr	r3, [r0, #12]
 800aab2:	4659      	mov	r1, fp
 800aab4:	60c5      	str	r5, [r0, #12]
 800aab6:	930a      	str	r3, [sp, #40]	; 0x28
 800aab8:	f7ff fa32 	bl	8009f20 <__mcmp>
 800aabc:	42a8      	cmp	r0, r5
 800aabe:	da6b      	bge.n	800ab98 <_strtod_l+0x880>
 800aac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac2:	ea53 0308 	orrs.w	r3, r3, r8
 800aac6:	f040 808f 	bne.w	800abe8 <_strtod_l+0x8d0>
 800aaca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 808a 	bne.w	800abe8 <_strtod_l+0x8d0>
 800aad4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aad8:	0d1b      	lsrs	r3, r3, #20
 800aada:	051b      	lsls	r3, r3, #20
 800aadc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aae0:	f240 8082 	bls.w	800abe8 <_strtod_l+0x8d0>
 800aae4:	6973      	ldr	r3, [r6, #20]
 800aae6:	b913      	cbnz	r3, 800aaee <_strtod_l+0x7d6>
 800aae8:	6933      	ldr	r3, [r6, #16]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	dd7c      	ble.n	800abe8 <_strtod_l+0x8d0>
 800aaee:	4631      	mov	r1, r6
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f7ff f9a8 	bl	8009e48 <__lshift>
 800aaf8:	4659      	mov	r1, fp
 800aafa:	4606      	mov	r6, r0
 800aafc:	f7ff fa10 	bl	8009f20 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dd71      	ble.n	800abe8 <_strtod_l+0x8d0>
 800ab04:	9905      	ldr	r1, [sp, #20]
 800ab06:	464b      	mov	r3, r9
 800ab08:	4a21      	ldr	r2, [pc, #132]	; (800ab90 <_strtod_l+0x878>)
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	f000 808d 	beq.w	800ac2a <_strtod_l+0x912>
 800ab10:	ea02 0109 	and.w	r1, r2, r9
 800ab14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab18:	f300 8087 	bgt.w	800ac2a <_strtod_l+0x912>
 800ab1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab20:	f77f aea9 	ble.w	800a876 <_strtod_l+0x55e>
 800ab24:	4640      	mov	r0, r8
 800ab26:	4649      	mov	r1, r9
 800ab28:	4b1a      	ldr	r3, [pc, #104]	; (800ab94 <_strtod_l+0x87c>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7f5 fd40 	bl	80005b0 <__aeabi_dmul>
 800ab30:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <_strtod_l+0x878>)
 800ab32:	4680      	mov	r8, r0
 800ab34:	400b      	ands	r3, r1
 800ab36:	4689      	mov	r9, r1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f47f ae35 	bne.w	800a7a8 <_strtod_l+0x490>
 800ab3e:	2322      	movs	r3, #34	; 0x22
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	e631      	b.n	800a7a8 <_strtod_l+0x490>
 800ab44:	f04f 32ff 	mov.w	r2, #4294967295
 800ab48:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4c:	ea03 0808 	and.w	r8, r3, r8
 800ab50:	e6de      	b.n	800a910 <_strtod_l+0x5f8>
 800ab52:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800ab56:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800ab5a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800ab5e:	37e2      	adds	r7, #226	; 0xe2
 800ab60:	fa01 f307 	lsl.w	r3, r1, r7
 800ab64:	9310      	str	r3, [sp, #64]	; 0x40
 800ab66:	9113      	str	r1, [sp, #76]	; 0x4c
 800ab68:	e745      	b.n	800a9f6 <_strtod_l+0x6de>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ab6e:	2301      	movs	r3, #1
 800ab70:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab72:	e740      	b.n	800a9f6 <_strtod_l+0x6de>
 800ab74:	463a      	mov	r2, r7
 800ab76:	4620      	mov	r0, r4
 800ab78:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab7a:	f7ff f965 	bl	8009e48 <__lshift>
 800ab7e:	901a      	str	r0, [sp, #104]	; 0x68
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f47f af68 	bne.w	800aa56 <_strtod_l+0x73e>
 800ab86:	e605      	b.n	800a794 <_strtod_l+0x47c>
 800ab88:	0800c650 	.word	0x0800c650
 800ab8c:	fffffc02 	.word	0xfffffc02
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	39500000 	.word	0x39500000
 800ab98:	46ca      	mov	sl, r9
 800ab9a:	d165      	bne.n	800ac68 <_strtod_l+0x950>
 800ab9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aba2:	b352      	cbz	r2, 800abfa <_strtod_l+0x8e2>
 800aba4:	4a9e      	ldr	r2, [pc, #632]	; (800ae20 <_strtod_l+0xb08>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d12a      	bne.n	800ac00 <_strtod_l+0x8e8>
 800abaa:	9b05      	ldr	r3, [sp, #20]
 800abac:	4641      	mov	r1, r8
 800abae:	b1fb      	cbz	r3, 800abf0 <_strtod_l+0x8d8>
 800abb0:	4b9c      	ldr	r3, [pc, #624]	; (800ae24 <_strtod_l+0xb0c>)
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	ea09 0303 	and.w	r3, r9, r3
 800abba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abbe:	d81a      	bhi.n	800abf6 <_strtod_l+0x8de>
 800abc0:	0d1b      	lsrs	r3, r3, #20
 800abc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abc6:	fa02 f303 	lsl.w	r3, r2, r3
 800abca:	4299      	cmp	r1, r3
 800abcc:	d118      	bne.n	800ac00 <_strtod_l+0x8e8>
 800abce:	4b96      	ldr	r3, [pc, #600]	; (800ae28 <_strtod_l+0xb10>)
 800abd0:	459a      	cmp	sl, r3
 800abd2:	d102      	bne.n	800abda <_strtod_l+0x8c2>
 800abd4:	3101      	adds	r1, #1
 800abd6:	f43f addd 	beq.w	800a794 <_strtod_l+0x47c>
 800abda:	f04f 0800 	mov.w	r8, #0
 800abde:	4b91      	ldr	r3, [pc, #580]	; (800ae24 <_strtod_l+0xb0c>)
 800abe0:	ea0a 0303 	and.w	r3, sl, r3
 800abe4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d19a      	bne.n	800ab24 <_strtod_l+0x80c>
 800abee:	e5db      	b.n	800a7a8 <_strtod_l+0x490>
 800abf0:	f04f 33ff 	mov.w	r3, #4294967295
 800abf4:	e7e9      	b.n	800abca <_strtod_l+0x8b2>
 800abf6:	4613      	mov	r3, r2
 800abf8:	e7e7      	b.n	800abca <_strtod_l+0x8b2>
 800abfa:	ea53 0308 	orrs.w	r3, r3, r8
 800abfe:	d081      	beq.n	800ab04 <_strtod_l+0x7ec>
 800ac00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac02:	b1e3      	cbz	r3, 800ac3e <_strtod_l+0x926>
 800ac04:	ea13 0f0a 	tst.w	r3, sl
 800ac08:	d0ee      	beq.n	800abe8 <_strtod_l+0x8d0>
 800ac0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	9a05      	ldr	r2, [sp, #20]
 800ac12:	b1c3      	cbz	r3, 800ac46 <_strtod_l+0x92e>
 800ac14:	f7ff fb5c 	bl	800a2d0 <sulp>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac20:	f7f5 fb10 	bl	8000244 <__adddf3>
 800ac24:	4680      	mov	r8, r0
 800ac26:	4689      	mov	r9, r1
 800ac28:	e7de      	b.n	800abe8 <_strtod_l+0x8d0>
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac34:	f04f 38ff 	mov.w	r8, #4294967295
 800ac38:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac3c:	e7d4      	b.n	800abe8 <_strtod_l+0x8d0>
 800ac3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac40:	ea13 0f08 	tst.w	r3, r8
 800ac44:	e7e0      	b.n	800ac08 <_strtod_l+0x8f0>
 800ac46:	f7ff fb43 	bl	800a2d0 <sulp>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac52:	f7f5 faf5 	bl	8000240 <__aeabi_dsub>
 800ac56:	2200      	movs	r2, #0
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4689      	mov	r9, r1
 800ac5e:	f7f5 ff0f 	bl	8000a80 <__aeabi_dcmpeq>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0c0      	beq.n	800abe8 <_strtod_l+0x8d0>
 800ac66:	e606      	b.n	800a876 <_strtod_l+0x55e>
 800ac68:	4659      	mov	r1, fp
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff fabe 	bl	800a1ec <__ratio>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac7e:	f7f5 ff13 	bl	8000aa8 <__aeabi_dcmple>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d06f      	beq.n	800ad66 <_strtod_l+0xa4e>
 800ac86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d17c      	bne.n	800ad86 <_strtod_l+0xa6e>
 800ac8c:	f1b8 0f00 	cmp.w	r8, #0
 800ac90:	d159      	bne.n	800ad46 <_strtod_l+0xa2e>
 800ac92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d17b      	bne.n	800ad92 <_strtod_l+0xa7a>
 800ac9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4b62      	ldr	r3, [pc, #392]	; (800ae2c <_strtod_l+0xb14>)
 800aca2:	f7f5 fef7 	bl	8000a94 <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d15a      	bne.n	800ad60 <_strtod_l+0xa48>
 800acaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acae:	2200      	movs	r2, #0
 800acb0:	4b5f      	ldr	r3, [pc, #380]	; (800ae30 <_strtod_l+0xb18>)
 800acb2:	f7f5 fc7d 	bl	80005b0 <__aeabi_dmul>
 800acb6:	4605      	mov	r5, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800acbe:	9506      	str	r5, [sp, #24]
 800acc0:	9307      	str	r3, [sp, #28]
 800acc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800acca:	4b56      	ldr	r3, [pc, #344]	; (800ae24 <_strtod_l+0xb0c>)
 800accc:	4a55      	ldr	r2, [pc, #340]	; (800ae24 <_strtod_l+0xb0c>)
 800acce:	ea0a 0303 	and.w	r3, sl, r3
 800acd2:	9313      	str	r3, [sp, #76]	; 0x4c
 800acd4:	4b57      	ldr	r3, [pc, #348]	; (800ae34 <_strtod_l+0xb1c>)
 800acd6:	ea0a 0202 	and.w	r2, sl, r2
 800acda:	429a      	cmp	r2, r3
 800acdc:	f040 80b0 	bne.w	800ae40 <_strtod_l+0xb28>
 800ace0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ace4:	4640      	mov	r0, r8
 800ace6:	4649      	mov	r1, r9
 800ace8:	f7ff f9c2 	bl	800a070 <__ulp>
 800acec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acf0:	f7f5 fc5e 	bl	80005b0 <__aeabi_dmul>
 800acf4:	4642      	mov	r2, r8
 800acf6:	464b      	mov	r3, r9
 800acf8:	f7f5 faa4 	bl	8000244 <__adddf3>
 800acfc:	f8df a124 	ldr.w	sl, [pc, #292]	; 800ae24 <_strtod_l+0xb0c>
 800ad00:	4a4d      	ldr	r2, [pc, #308]	; (800ae38 <_strtod_l+0xb20>)
 800ad02:	ea01 0a0a 	and.w	sl, r1, sl
 800ad06:	4592      	cmp	sl, r2
 800ad08:	4680      	mov	r8, r0
 800ad0a:	d948      	bls.n	800ad9e <_strtod_l+0xa86>
 800ad0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad0e:	4b46      	ldr	r3, [pc, #280]	; (800ae28 <_strtod_l+0xb10>)
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d103      	bne.n	800ad1c <_strtod_l+0xa04>
 800ad14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad16:	3301      	adds	r3, #1
 800ad18:	f43f ad3c 	beq.w	800a794 <_strtod_l+0x47c>
 800ad1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ad20:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800ae28 <_strtod_l+0xb10>
 800ad24:	4620      	mov	r0, r4
 800ad26:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad28:	f7fe fe76 	bl	8009a18 <_Bfree>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	9908      	ldr	r1, [sp, #32]
 800ad30:	f7fe fe72 	bl	8009a18 <_Bfree>
 800ad34:	4659      	mov	r1, fp
 800ad36:	4620      	mov	r0, r4
 800ad38:	f7fe fe6e 	bl	8009a18 <_Bfree>
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f7fe fe6a 	bl	8009a18 <_Bfree>
 800ad44:	e605      	b.n	800a952 <_strtod_l+0x63a>
 800ad46:	f1b8 0f01 	cmp.w	r8, #1
 800ad4a:	d103      	bne.n	800ad54 <_strtod_l+0xa3c>
 800ad4c:	f1b9 0f00 	cmp.w	r9, #0
 800ad50:	f43f ad91 	beq.w	800a876 <_strtod_l+0x55e>
 800ad54:	2200      	movs	r2, #0
 800ad56:	4b39      	ldr	r3, [pc, #228]	; (800ae3c <_strtod_l+0xb24>)
 800ad58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad5e:	e016      	b.n	800ad8e <_strtod_l+0xa76>
 800ad60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad62:	4f33      	ldr	r7, [pc, #204]	; (800ae30 <_strtod_l+0xb18>)
 800ad64:	e7a9      	b.n	800acba <_strtod_l+0x9a2>
 800ad66:	4b32      	ldr	r3, [pc, #200]	; (800ae30 <_strtod_l+0xb18>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad6e:	f7f5 fc1f 	bl	80005b0 <__aeabi_dmul>
 800ad72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad74:	4605      	mov	r5, r0
 800ad76:	460f      	mov	r7, r1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d09e      	beq.n	800acba <_strtod_l+0x9a2>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad84:	e79d      	b.n	800acc2 <_strtod_l+0x9aa>
 800ad86:	2200      	movs	r2, #0
 800ad88:	4b28      	ldr	r3, [pc, #160]	; (800ae2c <_strtod_l+0xb14>)
 800ad8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad8e:	4f27      	ldr	r7, [pc, #156]	; (800ae2c <_strtod_l+0xb14>)
 800ad90:	e797      	b.n	800acc2 <_strtod_l+0x9aa>
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b29      	ldr	r3, [pc, #164]	; (800ae3c <_strtod_l+0xb24>)
 800ad96:	4645      	mov	r5, r8
 800ad98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad9c:	e7f7      	b.n	800ad8e <_strtod_l+0xa76>
 800ad9e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	46ca      	mov	sl, r9
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1bc      	bne.n	800ad24 <_strtod_l+0xa0c>
 800adaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adb0:	0d1b      	lsrs	r3, r3, #20
 800adb2:	051b      	lsls	r3, r3, #20
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d1b5      	bne.n	800ad24 <_strtod_l+0xa0c>
 800adb8:	4628      	mov	r0, r5
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f6 fa3a 	bl	8001234 <__aeabi_d2lz>
 800adc0:	f7f5 fbc8 	bl	8000554 <__aeabi_l2d>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4628      	mov	r0, r5
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fa38 	bl	8000240 <__aeabi_dsub>
 800add0:	460b      	mov	r3, r1
 800add2:	4602      	mov	r2, r0
 800add4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800add8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800addc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adde:	ea4a 0a08 	orr.w	sl, sl, r8
 800ade2:	ea5a 0a03 	orrs.w	sl, sl, r3
 800ade6:	d06c      	beq.n	800aec2 <_strtod_l+0xbaa>
 800ade8:	a309      	add	r3, pc, #36	; (adr r3, 800ae10 <_strtod_l+0xaf8>)
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f7f5 fe51 	bl	8000a94 <__aeabi_dcmplt>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f47f acd8 	bne.w	800a7a8 <_strtod_l+0x490>
 800adf8:	a307      	add	r3, pc, #28	; (adr r3, 800ae18 <_strtod_l+0xb00>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae02:	f7f5 fe65 	bl	8000ad0 <__aeabi_dcmpgt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d08c      	beq.n	800ad24 <_strtod_l+0xa0c>
 800ae0a:	e4cd      	b.n	800a7a8 <_strtod_l+0x490>
 800ae0c:	f3af 8000 	nop.w
 800ae10:	94a03595 	.word	0x94a03595
 800ae14:	3fdfffff 	.word	0x3fdfffff
 800ae18:	35afe535 	.word	0x35afe535
 800ae1c:	3fe00000 	.word	0x3fe00000
 800ae20:	000fffff 	.word	0x000fffff
 800ae24:	7ff00000 	.word	0x7ff00000
 800ae28:	7fefffff 	.word	0x7fefffff
 800ae2c:	3ff00000 	.word	0x3ff00000
 800ae30:	3fe00000 	.word	0x3fe00000
 800ae34:	7fe00000 	.word	0x7fe00000
 800ae38:	7c9fffff 	.word	0x7c9fffff
 800ae3c:	bff00000 	.word	0xbff00000
 800ae40:	9b05      	ldr	r3, [sp, #20]
 800ae42:	b333      	cbz	r3, 800ae92 <_strtod_l+0xb7a>
 800ae44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae4a:	d822      	bhi.n	800ae92 <_strtod_l+0xb7a>
 800ae4c:	a328      	add	r3, pc, #160	; (adr r3, 800aef0 <_strtod_l+0xbd8>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	4628      	mov	r0, r5
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fe27 	bl	8000aa8 <__aeabi_dcmple>
 800ae5a:	b1a0      	cbz	r0, 800ae86 <_strtod_l+0xb6e>
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f7f5 fe7e 	bl	8000b60 <__aeabi_d2uiz>
 800ae64:	2801      	cmp	r0, #1
 800ae66:	bf38      	it	cc
 800ae68:	2001      	movcc	r0, #1
 800ae6a:	f7f5 fb27 	bl	80004bc <__aeabi_ui2d>
 800ae6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae70:	4605      	mov	r5, r0
 800ae72:	460f      	mov	r7, r1
 800ae74:	bb03      	cbnz	r3, 800aeb8 <_strtod_l+0xba0>
 800ae76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae7a:	9014      	str	r0, [sp, #80]	; 0x50
 800ae7c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae7e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ae82:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ae86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae8a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae8e:	1a9b      	subs	r3, r3, r2
 800ae90:	9311      	str	r3, [sp, #68]	; 0x44
 800ae92:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae96:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800ae9a:	f7ff f8e9 	bl	800a070 <__ulp>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fb83 	bl	80005b0 <__aeabi_dmul>
 800aeaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeae:	f7f5 f9c9 	bl	8000244 <__adddf3>
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	e774      	b.n	800ada2 <_strtod_l+0xa8a>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800aec0:	e7dd      	b.n	800ae7e <_strtod_l+0xb66>
 800aec2:	a30d      	add	r3, pc, #52	; (adr r3, 800aef8 <_strtod_l+0xbe0>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f7f5 fde4 	bl	8000a94 <__aeabi_dcmplt>
 800aecc:	e79b      	b.n	800ae06 <_strtod_l+0xaee>
 800aece:	2300      	movs	r3, #0
 800aed0:	930e      	str	r3, [sp, #56]	; 0x38
 800aed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aed4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	f7ff ba5b 	b.w	800a392 <_strtod_l+0x7a>
 800aedc:	2a65      	cmp	r2, #101	; 0x65
 800aede:	f43f ab52 	beq.w	800a586 <_strtod_l+0x26e>
 800aee2:	2a45      	cmp	r2, #69	; 0x45
 800aee4:	f43f ab4f 	beq.w	800a586 <_strtod_l+0x26e>
 800aee8:	2301      	movs	r3, #1
 800aeea:	f7ff bb87 	b.w	800a5fc <_strtod_l+0x2e4>
 800aeee:	bf00      	nop
 800aef0:	ffc00000 	.word	0xffc00000
 800aef4:	41dfffff 	.word	0x41dfffff
 800aef8:	94a03595 	.word	0x94a03595
 800aefc:	3fcfffff 	.word	0x3fcfffff

0800af00 <_strtod_r>:
 800af00:	4b01      	ldr	r3, [pc, #4]	; (800af08 <_strtod_r+0x8>)
 800af02:	f7ff ba09 	b.w	800a318 <_strtod_l>
 800af06:	bf00      	nop
 800af08:	20000084 	.word	0x20000084

0800af0c <_strtol_l.constprop.0>:
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af12:	4686      	mov	lr, r0
 800af14:	4690      	mov	r8, r2
 800af16:	d001      	beq.n	800af1c <_strtol_l.constprop.0+0x10>
 800af18:	2b24      	cmp	r3, #36	; 0x24
 800af1a:	d906      	bls.n	800af2a <_strtol_l.constprop.0+0x1e>
 800af1c:	f7fd fd90 	bl	8008a40 <__errno>
 800af20:	2316      	movs	r3, #22
 800af22:	6003      	str	r3, [r0, #0]
 800af24:	2000      	movs	r0, #0
 800af26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2a:	460d      	mov	r5, r1
 800af2c:	4835      	ldr	r0, [pc, #212]	; (800b004 <_strtol_l.constprop.0+0xf8>)
 800af2e:	462a      	mov	r2, r5
 800af30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af34:	5d06      	ldrb	r6, [r0, r4]
 800af36:	f016 0608 	ands.w	r6, r6, #8
 800af3a:	d1f8      	bne.n	800af2e <_strtol_l.constprop.0+0x22>
 800af3c:	2c2d      	cmp	r4, #45	; 0x2d
 800af3e:	d12e      	bne.n	800af9e <_strtol_l.constprop.0+0x92>
 800af40:	2601      	movs	r6, #1
 800af42:	782c      	ldrb	r4, [r5, #0]
 800af44:	1c95      	adds	r5, r2, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d057      	beq.n	800affa <_strtol_l.constprop.0+0xee>
 800af4a:	2b10      	cmp	r3, #16
 800af4c:	d109      	bne.n	800af62 <_strtol_l.constprop.0+0x56>
 800af4e:	2c30      	cmp	r4, #48	; 0x30
 800af50:	d107      	bne.n	800af62 <_strtol_l.constprop.0+0x56>
 800af52:	782a      	ldrb	r2, [r5, #0]
 800af54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800af58:	2a58      	cmp	r2, #88	; 0x58
 800af5a:	d149      	bne.n	800aff0 <_strtol_l.constprop.0+0xe4>
 800af5c:	2310      	movs	r3, #16
 800af5e:	786c      	ldrb	r4, [r5, #1]
 800af60:	3502      	adds	r5, #2
 800af62:	2200      	movs	r2, #0
 800af64:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800af68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af6c:	fbbc f9f3 	udiv	r9, ip, r3
 800af70:	4610      	mov	r0, r2
 800af72:	fb03 ca19 	mls	sl, r3, r9, ip
 800af76:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800af7a:	2f09      	cmp	r7, #9
 800af7c:	d814      	bhi.n	800afa8 <_strtol_l.constprop.0+0x9c>
 800af7e:	463c      	mov	r4, r7
 800af80:	42a3      	cmp	r3, r4
 800af82:	dd20      	ble.n	800afc6 <_strtol_l.constprop.0+0xba>
 800af84:	1c57      	adds	r7, r2, #1
 800af86:	d007      	beq.n	800af98 <_strtol_l.constprop.0+0x8c>
 800af88:	4581      	cmp	r9, r0
 800af8a:	d319      	bcc.n	800afc0 <_strtol_l.constprop.0+0xb4>
 800af8c:	d101      	bne.n	800af92 <_strtol_l.constprop.0+0x86>
 800af8e:	45a2      	cmp	sl, r4
 800af90:	db16      	blt.n	800afc0 <_strtol_l.constprop.0+0xb4>
 800af92:	2201      	movs	r2, #1
 800af94:	fb00 4003 	mla	r0, r0, r3, r4
 800af98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af9c:	e7eb      	b.n	800af76 <_strtol_l.constprop.0+0x6a>
 800af9e:	2c2b      	cmp	r4, #43	; 0x2b
 800afa0:	bf04      	itt	eq
 800afa2:	782c      	ldrbeq	r4, [r5, #0]
 800afa4:	1c95      	addeq	r5, r2, #2
 800afa6:	e7ce      	b.n	800af46 <_strtol_l.constprop.0+0x3a>
 800afa8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800afac:	2f19      	cmp	r7, #25
 800afae:	d801      	bhi.n	800afb4 <_strtol_l.constprop.0+0xa8>
 800afb0:	3c37      	subs	r4, #55	; 0x37
 800afb2:	e7e5      	b.n	800af80 <_strtol_l.constprop.0+0x74>
 800afb4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800afb8:	2f19      	cmp	r7, #25
 800afba:	d804      	bhi.n	800afc6 <_strtol_l.constprop.0+0xba>
 800afbc:	3c57      	subs	r4, #87	; 0x57
 800afbe:	e7df      	b.n	800af80 <_strtol_l.constprop.0+0x74>
 800afc0:	f04f 32ff 	mov.w	r2, #4294967295
 800afc4:	e7e8      	b.n	800af98 <_strtol_l.constprop.0+0x8c>
 800afc6:	1c53      	adds	r3, r2, #1
 800afc8:	d108      	bne.n	800afdc <_strtol_l.constprop.0+0xd0>
 800afca:	2322      	movs	r3, #34	; 0x22
 800afcc:	4660      	mov	r0, ip
 800afce:	f8ce 3000 	str.w	r3, [lr]
 800afd2:	f1b8 0f00 	cmp.w	r8, #0
 800afd6:	d0a6      	beq.n	800af26 <_strtol_l.constprop.0+0x1a>
 800afd8:	1e69      	subs	r1, r5, #1
 800afda:	e006      	b.n	800afea <_strtol_l.constprop.0+0xde>
 800afdc:	b106      	cbz	r6, 800afe0 <_strtol_l.constprop.0+0xd4>
 800afde:	4240      	negs	r0, r0
 800afe0:	f1b8 0f00 	cmp.w	r8, #0
 800afe4:	d09f      	beq.n	800af26 <_strtol_l.constprop.0+0x1a>
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	d1f6      	bne.n	800afd8 <_strtol_l.constprop.0+0xcc>
 800afea:	f8c8 1000 	str.w	r1, [r8]
 800afee:	e79a      	b.n	800af26 <_strtol_l.constprop.0+0x1a>
 800aff0:	2430      	movs	r4, #48	; 0x30
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1b5      	bne.n	800af62 <_strtol_l.constprop.0+0x56>
 800aff6:	2308      	movs	r3, #8
 800aff8:	e7b3      	b.n	800af62 <_strtol_l.constprop.0+0x56>
 800affa:	2c30      	cmp	r4, #48	; 0x30
 800affc:	d0a9      	beq.n	800af52 <_strtol_l.constprop.0+0x46>
 800affe:	230a      	movs	r3, #10
 800b000:	e7af      	b.n	800af62 <_strtol_l.constprop.0+0x56>
 800b002:	bf00      	nop
 800b004:	0800c679 	.word	0x0800c679

0800b008 <_strtol_r>:
 800b008:	f7ff bf80 	b.w	800af0c <_strtol_l.constprop.0>

0800b00c <__ssputs_r>:
 800b00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b010:	461f      	mov	r7, r3
 800b012:	688e      	ldr	r6, [r1, #8]
 800b014:	4682      	mov	sl, r0
 800b016:	42be      	cmp	r6, r7
 800b018:	460c      	mov	r4, r1
 800b01a:	4690      	mov	r8, r2
 800b01c:	680b      	ldr	r3, [r1, #0]
 800b01e:	d82c      	bhi.n	800b07a <__ssputs_r+0x6e>
 800b020:	898a      	ldrh	r2, [r1, #12]
 800b022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b026:	d026      	beq.n	800b076 <__ssputs_r+0x6a>
 800b028:	6965      	ldr	r5, [r4, #20]
 800b02a:	6909      	ldr	r1, [r1, #16]
 800b02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b030:	eba3 0901 	sub.w	r9, r3, r1
 800b034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b038:	1c7b      	adds	r3, r7, #1
 800b03a:	444b      	add	r3, r9
 800b03c:	106d      	asrs	r5, r5, #1
 800b03e:	429d      	cmp	r5, r3
 800b040:	bf38      	it	cc
 800b042:	461d      	movcc	r5, r3
 800b044:	0553      	lsls	r3, r2, #21
 800b046:	d527      	bpl.n	800b098 <__ssputs_r+0x8c>
 800b048:	4629      	mov	r1, r5
 800b04a:	f7fe fc19 	bl	8009880 <_malloc_r>
 800b04e:	4606      	mov	r6, r0
 800b050:	b360      	cbz	r0, 800b0ac <__ssputs_r+0xa0>
 800b052:	464a      	mov	r2, r9
 800b054:	6921      	ldr	r1, [r4, #16]
 800b056:	f000 fbef 	bl	800b838 <memcpy>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	6126      	str	r6, [r4, #16]
 800b068:	444e      	add	r6, r9
 800b06a:	6026      	str	r6, [r4, #0]
 800b06c:	463e      	mov	r6, r7
 800b06e:	6165      	str	r5, [r4, #20]
 800b070:	eba5 0509 	sub.w	r5, r5, r9
 800b074:	60a5      	str	r5, [r4, #8]
 800b076:	42be      	cmp	r6, r7
 800b078:	d900      	bls.n	800b07c <__ssputs_r+0x70>
 800b07a:	463e      	mov	r6, r7
 800b07c:	4632      	mov	r2, r6
 800b07e:	4641      	mov	r1, r8
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	f000 fb9d 	bl	800b7c0 <memmove>
 800b086:	2000      	movs	r0, #0
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	1b9b      	subs	r3, r3, r6
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	4433      	add	r3, r6
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b098:	462a      	mov	r2, r5
 800b09a:	f000 ff7e 	bl	800bf9a <_realloc_r>
 800b09e:	4606      	mov	r6, r0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1e0      	bne.n	800b066 <__ssputs_r+0x5a>
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	6921      	ldr	r1, [r4, #16]
 800b0a8:	f7fe fb7a 	bl	80097a0 <_free_r>
 800b0ac:	230c      	movs	r3, #12
 800b0ae:	f8ca 3000 	str.w	r3, [sl]
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	e7e9      	b.n	800b094 <__ssputs_r+0x88>

0800b0c0 <_svfiprintf_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4698      	mov	r8, r3
 800b0c6:	898b      	ldrh	r3, [r1, #12]
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	061b      	lsls	r3, r3, #24
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	4614      	mov	r4, r2
 800b0d0:	b09d      	sub	sp, #116	; 0x74
 800b0d2:	d50e      	bpl.n	800b0f2 <_svfiprintf_r+0x32>
 800b0d4:	690b      	ldr	r3, [r1, #16]
 800b0d6:	b963      	cbnz	r3, 800b0f2 <_svfiprintf_r+0x32>
 800b0d8:	2140      	movs	r1, #64	; 0x40
 800b0da:	f7fe fbd1 	bl	8009880 <_malloc_r>
 800b0de:	6028      	str	r0, [r5, #0]
 800b0e0:	6128      	str	r0, [r5, #16]
 800b0e2:	b920      	cbnz	r0, 800b0ee <_svfiprintf_r+0x2e>
 800b0e4:	230c      	movs	r3, #12
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ec:	e0d0      	b.n	800b290 <_svfiprintf_r+0x1d0>
 800b0ee:	2340      	movs	r3, #64	; 0x40
 800b0f0:	616b      	str	r3, [r5, #20]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f6:	2320      	movs	r3, #32
 800b0f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0fc:	2330      	movs	r3, #48	; 0x30
 800b0fe:	f04f 0901 	mov.w	r9, #1
 800b102:	f8cd 800c 	str.w	r8, [sp, #12]
 800b106:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b2a8 <_svfiprintf_r+0x1e8>
 800b10a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b10e:	4623      	mov	r3, r4
 800b110:	469a      	mov	sl, r3
 800b112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b116:	b10a      	cbz	r2, 800b11c <_svfiprintf_r+0x5c>
 800b118:	2a25      	cmp	r2, #37	; 0x25
 800b11a:	d1f9      	bne.n	800b110 <_svfiprintf_r+0x50>
 800b11c:	ebba 0b04 	subs.w	fp, sl, r4
 800b120:	d00b      	beq.n	800b13a <_svfiprintf_r+0x7a>
 800b122:	465b      	mov	r3, fp
 800b124:	4622      	mov	r2, r4
 800b126:	4629      	mov	r1, r5
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff6f 	bl	800b00c <__ssputs_r>
 800b12e:	3001      	adds	r0, #1
 800b130:	f000 80a9 	beq.w	800b286 <_svfiprintf_r+0x1c6>
 800b134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b136:	445a      	add	r2, fp
 800b138:	9209      	str	r2, [sp, #36]	; 0x24
 800b13a:	f89a 3000 	ldrb.w	r3, [sl]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 80a1 	beq.w	800b286 <_svfiprintf_r+0x1c6>
 800b144:	2300      	movs	r3, #0
 800b146:	f04f 32ff 	mov.w	r2, #4294967295
 800b14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14e:	f10a 0a01 	add.w	sl, sl, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b15a:	931a      	str	r3, [sp, #104]	; 0x68
 800b15c:	4654      	mov	r4, sl
 800b15e:	2205      	movs	r2, #5
 800b160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b164:	4850      	ldr	r0, [pc, #320]	; (800b2a8 <_svfiprintf_r+0x1e8>)
 800b166:	f7fd fc98 	bl	8008a9a <memchr>
 800b16a:	9a04      	ldr	r2, [sp, #16]
 800b16c:	b9d8      	cbnz	r0, 800b1a6 <_svfiprintf_r+0xe6>
 800b16e:	06d0      	lsls	r0, r2, #27
 800b170:	bf44      	itt	mi
 800b172:	2320      	movmi	r3, #32
 800b174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b178:	0711      	lsls	r1, r2, #28
 800b17a:	bf44      	itt	mi
 800b17c:	232b      	movmi	r3, #43	; 0x2b
 800b17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b182:	f89a 3000 	ldrb.w	r3, [sl]
 800b186:	2b2a      	cmp	r3, #42	; 0x2a
 800b188:	d015      	beq.n	800b1b6 <_svfiprintf_r+0xf6>
 800b18a:	4654      	mov	r4, sl
 800b18c:	2000      	movs	r0, #0
 800b18e:	f04f 0c0a 	mov.w	ip, #10
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	4621      	mov	r1, r4
 800b196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b19a:	3b30      	subs	r3, #48	; 0x30
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	d94d      	bls.n	800b23c <_svfiprintf_r+0x17c>
 800b1a0:	b1b0      	cbz	r0, 800b1d0 <_svfiprintf_r+0x110>
 800b1a2:	9207      	str	r2, [sp, #28]
 800b1a4:	e014      	b.n	800b1d0 <_svfiprintf_r+0x110>
 800b1a6:	eba0 0308 	sub.w	r3, r0, r8
 800b1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	46a2      	mov	sl, r4
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	e7d2      	b.n	800b15c <_svfiprintf_r+0x9c>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9103      	str	r1, [sp, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfbb      	ittet	lt
 800b1c2:	425b      	neglt	r3, r3
 800b1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c8:	9307      	strge	r3, [sp, #28]
 800b1ca:	9307      	strlt	r3, [sp, #28]
 800b1cc:	bfb8      	it	lt
 800b1ce:	9204      	strlt	r2, [sp, #16]
 800b1d0:	7823      	ldrb	r3, [r4, #0]
 800b1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1d4:	d10c      	bne.n	800b1f0 <_svfiprintf_r+0x130>
 800b1d6:	7863      	ldrb	r3, [r4, #1]
 800b1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1da:	d134      	bne.n	800b246 <_svfiprintf_r+0x186>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	3402      	adds	r4, #2
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	9203      	str	r2, [sp, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	bfb8      	it	lt
 800b1ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b2ac <_svfiprintf_r+0x1ec>
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	7821      	ldrb	r1, [r4, #0]
 800b1fa:	f7fd fc4e 	bl	8008a9a <memchr>
 800b1fe:	b138      	cbz	r0, 800b210 <_svfiprintf_r+0x150>
 800b200:	2240      	movs	r2, #64	; 0x40
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	eba0 000a 	sub.w	r0, r0, sl
 800b208:	4082      	lsls	r2, r0
 800b20a:	4313      	orrs	r3, r2
 800b20c:	3401      	adds	r4, #1
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	2206      	movs	r2, #6
 800b216:	4826      	ldr	r0, [pc, #152]	; (800b2b0 <_svfiprintf_r+0x1f0>)
 800b218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b21c:	f7fd fc3d 	bl	8008a9a <memchr>
 800b220:	2800      	cmp	r0, #0
 800b222:	d038      	beq.n	800b296 <_svfiprintf_r+0x1d6>
 800b224:	4b23      	ldr	r3, [pc, #140]	; (800b2b4 <_svfiprintf_r+0x1f4>)
 800b226:	bb1b      	cbnz	r3, 800b270 <_svfiprintf_r+0x1b0>
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	3307      	adds	r3, #7
 800b22c:	f023 0307 	bic.w	r3, r3, #7
 800b230:	3308      	adds	r3, #8
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b236:	4433      	add	r3, r6
 800b238:	9309      	str	r3, [sp, #36]	; 0x24
 800b23a:	e768      	b.n	800b10e <_svfiprintf_r+0x4e>
 800b23c:	460c      	mov	r4, r1
 800b23e:	2001      	movs	r0, #1
 800b240:	fb0c 3202 	mla	r2, ip, r2, r3
 800b244:	e7a6      	b.n	800b194 <_svfiprintf_r+0xd4>
 800b246:	2300      	movs	r3, #0
 800b248:	f04f 0c0a 	mov.w	ip, #10
 800b24c:	4619      	mov	r1, r3
 800b24e:	3401      	adds	r4, #1
 800b250:	9305      	str	r3, [sp, #20]
 800b252:	4620      	mov	r0, r4
 800b254:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b258:	3a30      	subs	r2, #48	; 0x30
 800b25a:	2a09      	cmp	r2, #9
 800b25c:	d903      	bls.n	800b266 <_svfiprintf_r+0x1a6>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0c6      	beq.n	800b1f0 <_svfiprintf_r+0x130>
 800b262:	9105      	str	r1, [sp, #20]
 800b264:	e7c4      	b.n	800b1f0 <_svfiprintf_r+0x130>
 800b266:	4604      	mov	r4, r0
 800b268:	2301      	movs	r3, #1
 800b26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b26e:	e7f0      	b.n	800b252 <_svfiprintf_r+0x192>
 800b270:	ab03      	add	r3, sp, #12
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	462a      	mov	r2, r5
 800b276:	4638      	mov	r0, r7
 800b278:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <_svfiprintf_r+0x1f8>)
 800b27a:	a904      	add	r1, sp, #16
 800b27c:	f7fc fc86 	bl	8007b8c <_printf_float>
 800b280:	1c42      	adds	r2, r0, #1
 800b282:	4606      	mov	r6, r0
 800b284:	d1d6      	bne.n	800b234 <_svfiprintf_r+0x174>
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	065b      	lsls	r3, r3, #25
 800b28a:	f53f af2d 	bmi.w	800b0e8 <_svfiprintf_r+0x28>
 800b28e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b290:	b01d      	add	sp, #116	; 0x74
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	ab03      	add	r3, sp, #12
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	462a      	mov	r2, r5
 800b29c:	4638      	mov	r0, r7
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <_svfiprintf_r+0x1f8>)
 800b2a0:	a904      	add	r1, sp, #16
 800b2a2:	f7fc ff13 	bl	80080cc <_printf_i>
 800b2a6:	e7eb      	b.n	800b280 <_svfiprintf_r+0x1c0>
 800b2a8:	0800c779 	.word	0x0800c779
 800b2ac:	0800c77f 	.word	0x0800c77f
 800b2b0:	0800c783 	.word	0x0800c783
 800b2b4:	08007b8d 	.word	0x08007b8d
 800b2b8:	0800b00d 	.word	0x0800b00d

0800b2bc <__sfputc_r>:
 800b2bc:	6893      	ldr	r3, [r2, #8]
 800b2be:	b410      	push	{r4}
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	6093      	str	r3, [r2, #8]
 800b2c6:	da07      	bge.n	800b2d8 <__sfputc_r+0x1c>
 800b2c8:	6994      	ldr	r4, [r2, #24]
 800b2ca:	42a3      	cmp	r3, r4
 800b2cc:	db01      	blt.n	800b2d2 <__sfputc_r+0x16>
 800b2ce:	290a      	cmp	r1, #10
 800b2d0:	d102      	bne.n	800b2d8 <__sfputc_r+0x1c>
 800b2d2:	bc10      	pop	{r4}
 800b2d4:	f000 b9de 	b.w	800b694 <__swbuf_r>
 800b2d8:	6813      	ldr	r3, [r2, #0]
 800b2da:	1c58      	adds	r0, r3, #1
 800b2dc:	6010      	str	r0, [r2, #0]
 800b2de:	7019      	strb	r1, [r3, #0]
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	bc10      	pop	{r4}
 800b2e4:	4770      	bx	lr

0800b2e6 <__sfputs_r>:
 800b2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	18d5      	adds	r5, r2, r3
 800b2f0:	42ac      	cmp	r4, r5
 800b2f2:	d101      	bne.n	800b2f8 <__sfputs_r+0x12>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e007      	b.n	800b308 <__sfputs_r+0x22>
 800b2f8:	463a      	mov	r2, r7
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	f7ff ffdc 	bl	800b2bc <__sfputc_r>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d1f3      	bne.n	800b2f0 <__sfputs_r+0xa>
 800b308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b30c <_vfiprintf_r>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	460d      	mov	r5, r1
 800b312:	4614      	mov	r4, r2
 800b314:	4698      	mov	r8, r3
 800b316:	4606      	mov	r6, r0
 800b318:	b09d      	sub	sp, #116	; 0x74
 800b31a:	b118      	cbz	r0, 800b324 <_vfiprintf_r+0x18>
 800b31c:	6a03      	ldr	r3, [r0, #32]
 800b31e:	b90b      	cbnz	r3, 800b324 <_vfiprintf_r+0x18>
 800b320:	f7fd fa90 	bl	8008844 <__sinit>
 800b324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b326:	07d9      	lsls	r1, r3, #31
 800b328:	d405      	bmi.n	800b336 <_vfiprintf_r+0x2a>
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	059a      	lsls	r2, r3, #22
 800b32e:	d402      	bmi.n	800b336 <_vfiprintf_r+0x2a>
 800b330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b332:	f7fd fbb0 	bl	8008a96 <__retarget_lock_acquire_recursive>
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	071b      	lsls	r3, r3, #28
 800b33a:	d501      	bpl.n	800b340 <_vfiprintf_r+0x34>
 800b33c:	692b      	ldr	r3, [r5, #16]
 800b33e:	b99b      	cbnz	r3, 800b368 <_vfiprintf_r+0x5c>
 800b340:	4629      	mov	r1, r5
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f9e4 	bl	800b710 <__swsetup_r>
 800b348:	b170      	cbz	r0, 800b368 <_vfiprintf_r+0x5c>
 800b34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b34c:	07dc      	lsls	r4, r3, #31
 800b34e:	d504      	bpl.n	800b35a <_vfiprintf_r+0x4e>
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	b01d      	add	sp, #116	; 0x74
 800b356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	0598      	lsls	r0, r3, #22
 800b35e:	d4f7      	bmi.n	800b350 <_vfiprintf_r+0x44>
 800b360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b362:	f7fd fb99 	bl	8008a98 <__retarget_lock_release_recursive>
 800b366:	e7f3      	b.n	800b350 <_vfiprintf_r+0x44>
 800b368:	2300      	movs	r3, #0
 800b36a:	9309      	str	r3, [sp, #36]	; 0x24
 800b36c:	2320      	movs	r3, #32
 800b36e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b372:	2330      	movs	r3, #48	; 0x30
 800b374:	f04f 0901 	mov.w	r9, #1
 800b378:	f8cd 800c 	str.w	r8, [sp, #12]
 800b37c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b52c <_vfiprintf_r+0x220>
 800b380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b384:	4623      	mov	r3, r4
 800b386:	469a      	mov	sl, r3
 800b388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b38c:	b10a      	cbz	r2, 800b392 <_vfiprintf_r+0x86>
 800b38e:	2a25      	cmp	r2, #37	; 0x25
 800b390:	d1f9      	bne.n	800b386 <_vfiprintf_r+0x7a>
 800b392:	ebba 0b04 	subs.w	fp, sl, r4
 800b396:	d00b      	beq.n	800b3b0 <_vfiprintf_r+0xa4>
 800b398:	465b      	mov	r3, fp
 800b39a:	4622      	mov	r2, r4
 800b39c:	4629      	mov	r1, r5
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7ff ffa1 	bl	800b2e6 <__sfputs_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f000 80a9 	beq.w	800b4fc <_vfiprintf_r+0x1f0>
 800b3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ac:	445a      	add	r2, fp
 800b3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 80a1 	beq.w	800b4fc <_vfiprintf_r+0x1f0>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c4:	f10a 0a01 	add.w	sl, sl, #1
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	9307      	str	r3, [sp, #28]
 800b3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3d2:	4654      	mov	r4, sl
 800b3d4:	2205      	movs	r2, #5
 800b3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3da:	4854      	ldr	r0, [pc, #336]	; (800b52c <_vfiprintf_r+0x220>)
 800b3dc:	f7fd fb5d 	bl	8008a9a <memchr>
 800b3e0:	9a04      	ldr	r2, [sp, #16]
 800b3e2:	b9d8      	cbnz	r0, 800b41c <_vfiprintf_r+0x110>
 800b3e4:	06d1      	lsls	r1, r2, #27
 800b3e6:	bf44      	itt	mi
 800b3e8:	2320      	movmi	r3, #32
 800b3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ee:	0713      	lsls	r3, r2, #28
 800b3f0:	bf44      	itt	mi
 800b3f2:	232b      	movmi	r3, #43	; 0x2b
 800b3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b3fe:	d015      	beq.n	800b42c <_vfiprintf_r+0x120>
 800b400:	4654      	mov	r4, sl
 800b402:	2000      	movs	r0, #0
 800b404:	f04f 0c0a 	mov.w	ip, #10
 800b408:	9a07      	ldr	r2, [sp, #28]
 800b40a:	4621      	mov	r1, r4
 800b40c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b410:	3b30      	subs	r3, #48	; 0x30
 800b412:	2b09      	cmp	r3, #9
 800b414:	d94d      	bls.n	800b4b2 <_vfiprintf_r+0x1a6>
 800b416:	b1b0      	cbz	r0, 800b446 <_vfiprintf_r+0x13a>
 800b418:	9207      	str	r2, [sp, #28]
 800b41a:	e014      	b.n	800b446 <_vfiprintf_r+0x13a>
 800b41c:	eba0 0308 	sub.w	r3, r0, r8
 800b420:	fa09 f303 	lsl.w	r3, r9, r3
 800b424:	4313      	orrs	r3, r2
 800b426:	46a2      	mov	sl, r4
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	e7d2      	b.n	800b3d2 <_vfiprintf_r+0xc6>
 800b42c:	9b03      	ldr	r3, [sp, #12]
 800b42e:	1d19      	adds	r1, r3, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	9103      	str	r1, [sp, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfbb      	ittet	lt
 800b438:	425b      	neglt	r3, r3
 800b43a:	f042 0202 	orrlt.w	r2, r2, #2
 800b43e:	9307      	strge	r3, [sp, #28]
 800b440:	9307      	strlt	r3, [sp, #28]
 800b442:	bfb8      	it	lt
 800b444:	9204      	strlt	r2, [sp, #16]
 800b446:	7823      	ldrb	r3, [r4, #0]
 800b448:	2b2e      	cmp	r3, #46	; 0x2e
 800b44a:	d10c      	bne.n	800b466 <_vfiprintf_r+0x15a>
 800b44c:	7863      	ldrb	r3, [r4, #1]
 800b44e:	2b2a      	cmp	r3, #42	; 0x2a
 800b450:	d134      	bne.n	800b4bc <_vfiprintf_r+0x1b0>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	3402      	adds	r4, #2
 800b456:	1d1a      	adds	r2, r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	9203      	str	r2, [sp, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bfb8      	it	lt
 800b460:	f04f 33ff 	movlt.w	r3, #4294967295
 800b464:	9305      	str	r3, [sp, #20]
 800b466:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b530 <_vfiprintf_r+0x224>
 800b46a:	2203      	movs	r2, #3
 800b46c:	4650      	mov	r0, sl
 800b46e:	7821      	ldrb	r1, [r4, #0]
 800b470:	f7fd fb13 	bl	8008a9a <memchr>
 800b474:	b138      	cbz	r0, 800b486 <_vfiprintf_r+0x17a>
 800b476:	2240      	movs	r2, #64	; 0x40
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	eba0 000a 	sub.w	r0, r0, sl
 800b47e:	4082      	lsls	r2, r0
 800b480:	4313      	orrs	r3, r2
 800b482:	3401      	adds	r4, #1
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b48a:	2206      	movs	r2, #6
 800b48c:	4829      	ldr	r0, [pc, #164]	; (800b534 <_vfiprintf_r+0x228>)
 800b48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b492:	f7fd fb02 	bl	8008a9a <memchr>
 800b496:	2800      	cmp	r0, #0
 800b498:	d03f      	beq.n	800b51a <_vfiprintf_r+0x20e>
 800b49a:	4b27      	ldr	r3, [pc, #156]	; (800b538 <_vfiprintf_r+0x22c>)
 800b49c:	bb1b      	cbnz	r3, 800b4e6 <_vfiprintf_r+0x1da>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	3307      	adds	r3, #7
 800b4a2:	f023 0307 	bic.w	r3, r3, #7
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ac:	443b      	add	r3, r7
 800b4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b0:	e768      	b.n	800b384 <_vfiprintf_r+0x78>
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ba:	e7a6      	b.n	800b40a <_vfiprintf_r+0xfe>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f04f 0c0a 	mov.w	ip, #10
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	3401      	adds	r4, #1
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ce:	3a30      	subs	r2, #48	; 0x30
 800b4d0:	2a09      	cmp	r2, #9
 800b4d2:	d903      	bls.n	800b4dc <_vfiprintf_r+0x1d0>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0c6      	beq.n	800b466 <_vfiprintf_r+0x15a>
 800b4d8:	9105      	str	r1, [sp, #20]
 800b4da:	e7c4      	b.n	800b466 <_vfiprintf_r+0x15a>
 800b4dc:	4604      	mov	r4, r0
 800b4de:	2301      	movs	r3, #1
 800b4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4e4:	e7f0      	b.n	800b4c8 <_vfiprintf_r+0x1bc>
 800b4e6:	ab03      	add	r3, sp, #12
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	4b13      	ldr	r3, [pc, #76]	; (800b53c <_vfiprintf_r+0x230>)
 800b4f0:	a904      	add	r1, sp, #16
 800b4f2:	f7fc fb4b 	bl	8007b8c <_printf_float>
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	1c78      	adds	r0, r7, #1
 800b4fa:	d1d6      	bne.n	800b4aa <_vfiprintf_r+0x19e>
 800b4fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	d405      	bmi.n	800b50e <_vfiprintf_r+0x202>
 800b502:	89ab      	ldrh	r3, [r5, #12]
 800b504:	059a      	lsls	r2, r3, #22
 800b506:	d402      	bmi.n	800b50e <_vfiprintf_r+0x202>
 800b508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50a:	f7fd fac5 	bl	8008a98 <__retarget_lock_release_recursive>
 800b50e:	89ab      	ldrh	r3, [r5, #12]
 800b510:	065b      	lsls	r3, r3, #25
 800b512:	f53f af1d 	bmi.w	800b350 <_vfiprintf_r+0x44>
 800b516:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b518:	e71c      	b.n	800b354 <_vfiprintf_r+0x48>
 800b51a:	ab03      	add	r3, sp, #12
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	462a      	mov	r2, r5
 800b520:	4630      	mov	r0, r6
 800b522:	4b06      	ldr	r3, [pc, #24]	; (800b53c <_vfiprintf_r+0x230>)
 800b524:	a904      	add	r1, sp, #16
 800b526:	f7fc fdd1 	bl	80080cc <_printf_i>
 800b52a:	e7e4      	b.n	800b4f6 <_vfiprintf_r+0x1ea>
 800b52c:	0800c779 	.word	0x0800c779
 800b530:	0800c77f 	.word	0x0800c77f
 800b534:	0800c783 	.word	0x0800c783
 800b538:	08007b8d 	.word	0x08007b8d
 800b53c:	0800b2e7 	.word	0x0800b2e7

0800b540 <__sflush_r>:
 800b540:	898a      	ldrh	r2, [r1, #12]
 800b542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b544:	4605      	mov	r5, r0
 800b546:	0710      	lsls	r0, r2, #28
 800b548:	460c      	mov	r4, r1
 800b54a:	d457      	bmi.n	800b5fc <__sflush_r+0xbc>
 800b54c:	684b      	ldr	r3, [r1, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dc04      	bgt.n	800b55c <__sflush_r+0x1c>
 800b552:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	dc01      	bgt.n	800b55c <__sflush_r+0x1c>
 800b558:	2000      	movs	r0, #0
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d0fa      	beq.n	800b558 <__sflush_r+0x18>
 800b562:	2300      	movs	r3, #0
 800b564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b568:	682f      	ldr	r7, [r5, #0]
 800b56a:	6a21      	ldr	r1, [r4, #32]
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	d032      	beq.n	800b5d6 <__sflush_r+0x96>
 800b570:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	075a      	lsls	r2, r3, #29
 800b576:	d505      	bpl.n	800b584 <__sflush_r+0x44>
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	1ac0      	subs	r0, r0, r3
 800b57c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b57e:	b10b      	cbz	r3, 800b584 <__sflush_r+0x44>
 800b580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b582:	1ac0      	subs	r0, r0, r3
 800b584:	2300      	movs	r3, #0
 800b586:	4602      	mov	r2, r0
 800b588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b58a:	4628      	mov	r0, r5
 800b58c:	6a21      	ldr	r1, [r4, #32]
 800b58e:	47b0      	blx	r6
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	d106      	bne.n	800b5a4 <__sflush_r+0x64>
 800b596:	6829      	ldr	r1, [r5, #0]
 800b598:	291d      	cmp	r1, #29
 800b59a:	d82b      	bhi.n	800b5f4 <__sflush_r+0xb4>
 800b59c:	4a28      	ldr	r2, [pc, #160]	; (800b640 <__sflush_r+0x100>)
 800b59e:	410a      	asrs	r2, r1
 800b5a0:	07d6      	lsls	r6, r2, #31
 800b5a2:	d427      	bmi.n	800b5f4 <__sflush_r+0xb4>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6062      	str	r2, [r4, #4]
 800b5a8:	6922      	ldr	r2, [r4, #16]
 800b5aa:	04d9      	lsls	r1, r3, #19
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	d504      	bpl.n	800b5ba <__sflush_r+0x7a>
 800b5b0:	1c42      	adds	r2, r0, #1
 800b5b2:	d101      	bne.n	800b5b8 <__sflush_r+0x78>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b903      	cbnz	r3, 800b5ba <__sflush_r+0x7a>
 800b5b8:	6560      	str	r0, [r4, #84]	; 0x54
 800b5ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5bc:	602f      	str	r7, [r5, #0]
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d0ca      	beq.n	800b558 <__sflush_r+0x18>
 800b5c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	d002      	beq.n	800b5d0 <__sflush_r+0x90>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7fe f8e8 	bl	80097a0 <_free_r>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5d4:	e7c1      	b.n	800b55a <__sflush_r+0x1a>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	1c41      	adds	r1, r0, #1
 800b5de:	d1c8      	bne.n	800b572 <__sflush_r+0x32>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0c5      	beq.n	800b572 <__sflush_r+0x32>
 800b5e6:	2b1d      	cmp	r3, #29
 800b5e8:	d001      	beq.n	800b5ee <__sflush_r+0xae>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	d101      	bne.n	800b5f2 <__sflush_r+0xb2>
 800b5ee:	602f      	str	r7, [r5, #0]
 800b5f0:	e7b2      	b.n	800b558 <__sflush_r+0x18>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	e7ae      	b.n	800b55a <__sflush_r+0x1a>
 800b5fc:	690f      	ldr	r7, [r1, #16]
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d0aa      	beq.n	800b558 <__sflush_r+0x18>
 800b602:	0793      	lsls	r3, r2, #30
 800b604:	bf18      	it	ne
 800b606:	2300      	movne	r3, #0
 800b608:	680e      	ldr	r6, [r1, #0]
 800b60a:	bf08      	it	eq
 800b60c:	694b      	ldreq	r3, [r1, #20]
 800b60e:	1bf6      	subs	r6, r6, r7
 800b610:	600f      	str	r7, [r1, #0]
 800b612:	608b      	str	r3, [r1, #8]
 800b614:	2e00      	cmp	r6, #0
 800b616:	dd9f      	ble.n	800b558 <__sflush_r+0x18>
 800b618:	4633      	mov	r3, r6
 800b61a:	463a      	mov	r2, r7
 800b61c:	4628      	mov	r0, r5
 800b61e:	6a21      	ldr	r1, [r4, #32]
 800b620:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b624:	47e0      	blx	ip
 800b626:	2800      	cmp	r0, #0
 800b628:	dc06      	bgt.n	800b638 <__sflush_r+0xf8>
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	e790      	b.n	800b55a <__sflush_r+0x1a>
 800b638:	4407      	add	r7, r0
 800b63a:	1a36      	subs	r6, r6, r0
 800b63c:	e7ea      	b.n	800b614 <__sflush_r+0xd4>
 800b63e:	bf00      	nop
 800b640:	dfbffffe 	.word	0xdfbffffe

0800b644 <_fflush_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	690b      	ldr	r3, [r1, #16]
 800b648:	4605      	mov	r5, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	b913      	cbnz	r3, 800b654 <_fflush_r+0x10>
 800b64e:	2500      	movs	r5, #0
 800b650:	4628      	mov	r0, r5
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	b118      	cbz	r0, 800b65e <_fflush_r+0x1a>
 800b656:	6a03      	ldr	r3, [r0, #32]
 800b658:	b90b      	cbnz	r3, 800b65e <_fflush_r+0x1a>
 800b65a:	f7fd f8f3 	bl	8008844 <__sinit>
 800b65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0f3      	beq.n	800b64e <_fflush_r+0xa>
 800b666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b668:	07d0      	lsls	r0, r2, #31
 800b66a:	d404      	bmi.n	800b676 <_fflush_r+0x32>
 800b66c:	0599      	lsls	r1, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_fflush_r+0x32>
 800b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b672:	f7fd fa10 	bl	8008a96 <__retarget_lock_acquire_recursive>
 800b676:	4628      	mov	r0, r5
 800b678:	4621      	mov	r1, r4
 800b67a:	f7ff ff61 	bl	800b540 <__sflush_r>
 800b67e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b680:	4605      	mov	r5, r0
 800b682:	07da      	lsls	r2, r3, #31
 800b684:	d4e4      	bmi.n	800b650 <_fflush_r+0xc>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	059b      	lsls	r3, r3, #22
 800b68a:	d4e1      	bmi.n	800b650 <_fflush_r+0xc>
 800b68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b68e:	f7fd fa03 	bl	8008a98 <__retarget_lock_release_recursive>
 800b692:	e7dd      	b.n	800b650 <_fflush_r+0xc>

0800b694 <__swbuf_r>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	460e      	mov	r6, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	4605      	mov	r5, r0
 800b69c:	b118      	cbz	r0, 800b6a6 <__swbuf_r+0x12>
 800b69e:	6a03      	ldr	r3, [r0, #32]
 800b6a0:	b90b      	cbnz	r3, 800b6a6 <__swbuf_r+0x12>
 800b6a2:	f7fd f8cf 	bl	8008844 <__sinit>
 800b6a6:	69a3      	ldr	r3, [r4, #24]
 800b6a8:	60a3      	str	r3, [r4, #8]
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	071a      	lsls	r2, r3, #28
 800b6ae:	d525      	bpl.n	800b6fc <__swbuf_r+0x68>
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	b31b      	cbz	r3, 800b6fc <__swbuf_r+0x68>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	b2f6      	uxtb	r6, r6
 800b6ba:	1a98      	subs	r0, r3, r2
 800b6bc:	6963      	ldr	r3, [r4, #20]
 800b6be:	4637      	mov	r7, r6
 800b6c0:	4283      	cmp	r3, r0
 800b6c2:	dc04      	bgt.n	800b6ce <__swbuf_r+0x3a>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f7ff ffbc 	bl	800b644 <_fflush_r>
 800b6cc:	b9e0      	cbnz	r0, 800b708 <__swbuf_r+0x74>
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	6022      	str	r2, [r4, #0]
 800b6da:	701e      	strb	r6, [r3, #0]
 800b6dc:	6962      	ldr	r2, [r4, #20]
 800b6de:	1c43      	adds	r3, r0, #1
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d004      	beq.n	800b6ee <__swbuf_r+0x5a>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	07db      	lsls	r3, r3, #31
 800b6e8:	d506      	bpl.n	800b6f8 <__swbuf_r+0x64>
 800b6ea:	2e0a      	cmp	r6, #10
 800b6ec:	d104      	bne.n	800b6f8 <__swbuf_r+0x64>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f7ff ffa7 	bl	800b644 <_fflush_r>
 800b6f6:	b938      	cbnz	r0, 800b708 <__swbuf_r+0x74>
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4628      	mov	r0, r5
 800b700:	f000 f806 	bl	800b710 <__swsetup_r>
 800b704:	2800      	cmp	r0, #0
 800b706:	d0d5      	beq.n	800b6b4 <__swbuf_r+0x20>
 800b708:	f04f 37ff 	mov.w	r7, #4294967295
 800b70c:	e7f4      	b.n	800b6f8 <__swbuf_r+0x64>
	...

0800b710 <__swsetup_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <__swsetup_r+0xac>)
 800b714:	4605      	mov	r5, r0
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	460c      	mov	r4, r1
 800b71a:	b118      	cbz	r0, 800b724 <__swsetup_r+0x14>
 800b71c:	6a03      	ldr	r3, [r0, #32]
 800b71e:	b90b      	cbnz	r3, 800b724 <__swsetup_r+0x14>
 800b720:	f7fd f890 	bl	8008844 <__sinit>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b72a:	0718      	lsls	r0, r3, #28
 800b72c:	d422      	bmi.n	800b774 <__swsetup_r+0x64>
 800b72e:	06d9      	lsls	r1, r3, #27
 800b730:	d407      	bmi.n	800b742 <__swsetup_r+0x32>
 800b732:	2309      	movs	r3, #9
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	e034      	b.n	800b7ac <__swsetup_r+0x9c>
 800b742:	0758      	lsls	r0, r3, #29
 800b744:	d512      	bpl.n	800b76c <__swsetup_r+0x5c>
 800b746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b748:	b141      	cbz	r1, 800b75c <__swsetup_r+0x4c>
 800b74a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b74e:	4299      	cmp	r1, r3
 800b750:	d002      	beq.n	800b758 <__swsetup_r+0x48>
 800b752:	4628      	mov	r0, r5
 800b754:	f7fe f824 	bl	80097a0 <_free_r>
 800b758:	2300      	movs	r3, #0
 800b75a:	6363      	str	r3, [r4, #52]	; 0x34
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	2300      	movs	r3, #0
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f043 0308 	orr.w	r3, r3, #8
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	b94b      	cbnz	r3, 800b78c <__swsetup_r+0x7c>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b77e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b782:	d003      	beq.n	800b78c <__swsetup_r+0x7c>
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 fc7b 	bl	800c082 <__smakebuf_r>
 800b78c:	89a0      	ldrh	r0, [r4, #12]
 800b78e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b792:	f010 0301 	ands.w	r3, r0, #1
 800b796:	d00a      	beq.n	800b7ae <__swsetup_r+0x9e>
 800b798:	2300      	movs	r3, #0
 800b79a:	60a3      	str	r3, [r4, #8]
 800b79c:	6963      	ldr	r3, [r4, #20]
 800b79e:	425b      	negs	r3, r3
 800b7a0:	61a3      	str	r3, [r4, #24]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	b943      	cbnz	r3, 800b7b8 <__swsetup_r+0xa8>
 800b7a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7aa:	d1c4      	bne.n	800b736 <__swsetup_r+0x26>
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	0781      	lsls	r1, r0, #30
 800b7b0:	bf58      	it	pl
 800b7b2:	6963      	ldrpl	r3, [r4, #20]
 800b7b4:	60a3      	str	r3, [r4, #8]
 800b7b6:	e7f4      	b.n	800b7a2 <__swsetup_r+0x92>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7f7      	b.n	800b7ac <__swsetup_r+0x9c>
 800b7bc:	20000080 	.word	0x20000080

0800b7c0 <memmove>:
 800b7c0:	4288      	cmp	r0, r1
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	eb01 0402 	add.w	r4, r1, r2
 800b7c8:	d902      	bls.n	800b7d0 <memmove+0x10>
 800b7ca:	4284      	cmp	r4, r0
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	d807      	bhi.n	800b7e0 <memmove+0x20>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	42a1      	cmp	r1, r4
 800b7d4:	d008      	beq.n	800b7e8 <memmove+0x28>
 800b7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7de:	e7f8      	b.n	800b7d2 <memmove+0x12>
 800b7e0:	4601      	mov	r1, r0
 800b7e2:	4402      	add	r2, r0
 800b7e4:	428a      	cmp	r2, r1
 800b7e6:	d100      	bne.n	800b7ea <memmove+0x2a>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7f2:	e7f7      	b.n	800b7e4 <memmove+0x24>

0800b7f4 <strncmp>:
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	b16a      	cbz	r2, 800b814 <strncmp+0x20>
 800b7f8:	3901      	subs	r1, #1
 800b7fa:	1884      	adds	r4, r0, r2
 800b7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b804:	429a      	cmp	r2, r3
 800b806:	d103      	bne.n	800b810 <strncmp+0x1c>
 800b808:	42a0      	cmp	r0, r4
 800b80a:	d001      	beq.n	800b810 <strncmp+0x1c>
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	d1f5      	bne.n	800b7fc <strncmp+0x8>
 800b810:	1ad0      	subs	r0, r2, r3
 800b812:	bd10      	pop	{r4, pc}
 800b814:	4610      	mov	r0, r2
 800b816:	e7fc      	b.n	800b812 <strncmp+0x1e>

0800b818 <_sbrk_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	2300      	movs	r3, #0
 800b81c:	4d05      	ldr	r5, [pc, #20]	; (800b834 <_sbrk_r+0x1c>)
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f7 f84c 	bl	80028c0 <_sbrk>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_sbrk_r+0x1a>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_sbrk_r+0x1a>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20000718 	.word	0x20000718

0800b838 <memcpy>:
 800b838:	440a      	add	r2, r1
 800b83a:	4291      	cmp	r1, r2
 800b83c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b840:	d100      	bne.n	800b844 <memcpy+0xc>
 800b842:	4770      	bx	lr
 800b844:	b510      	push	{r4, lr}
 800b846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b84a:	4291      	cmp	r1, r2
 800b84c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b850:	d1f9      	bne.n	800b846 <memcpy+0xe>
 800b852:	bd10      	pop	{r4, pc}

0800b854 <nan>:
 800b854:	2000      	movs	r0, #0
 800b856:	4901      	ldr	r1, [pc, #4]	; (800b85c <nan+0x8>)
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	7ff80000 	.word	0x7ff80000

0800b860 <__assert_func>:
 800b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b862:	4614      	mov	r4, r2
 800b864:	461a      	mov	r2, r3
 800b866:	4b09      	ldr	r3, [pc, #36]	; (800b88c <__assert_func+0x2c>)
 800b868:	4605      	mov	r5, r0
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68d8      	ldr	r0, [r3, #12]
 800b86e:	b14c      	cbz	r4, 800b884 <__assert_func+0x24>
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <__assert_func+0x30>)
 800b872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b876:	9100      	str	r1, [sp, #0]
 800b878:	462b      	mov	r3, r5
 800b87a:	4906      	ldr	r1, [pc, #24]	; (800b894 <__assert_func+0x34>)
 800b87c:	f000 fbca 	bl	800c014 <fiprintf>
 800b880:	f000 fc5e 	bl	800c140 <abort>
 800b884:	4b04      	ldr	r3, [pc, #16]	; (800b898 <__assert_func+0x38>)
 800b886:	461c      	mov	r4, r3
 800b888:	e7f3      	b.n	800b872 <__assert_func+0x12>
 800b88a:	bf00      	nop
 800b88c:	20000080 	.word	0x20000080
 800b890:	0800c792 	.word	0x0800c792
 800b894:	0800c79f 	.word	0x0800c79f
 800b898:	0800c7cd 	.word	0x0800c7cd

0800b89c <_calloc_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	fba1 5402 	umull	r5, r4, r1, r2
 800b8a2:	b934      	cbnz	r4, 800b8b2 <_calloc_r+0x16>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7fd ffeb 	bl	8009880 <_malloc_r>
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <_calloc_r+0x1e>
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	220c      	movs	r2, #12
 800b8b4:	2600      	movs	r6, #0
 800b8b6:	6002      	str	r2, [r0, #0]
 800b8b8:	e7f9      	b.n	800b8ae <_calloc_r+0x12>
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f7fd f86c 	bl	800899a <memset>
 800b8c2:	e7f4      	b.n	800b8ae <_calloc_r+0x12>

0800b8c4 <rshift>:
 800b8c4:	6903      	ldr	r3, [r0, #16]
 800b8c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8ce:	f100 0414 	add.w	r4, r0, #20
 800b8d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8d6:	dd46      	ble.n	800b966 <rshift+0xa2>
 800b8d8:	f011 011f 	ands.w	r1, r1, #31
 800b8dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8e4:	d10c      	bne.n	800b900 <rshift+0x3c>
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f100 0710 	add.w	r7, r0, #16
 800b8ec:	42b1      	cmp	r1, r6
 800b8ee:	d335      	bcc.n	800b95c <rshift+0x98>
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	1eea      	subs	r2, r5, #3
 800b8f6:	4296      	cmp	r6, r2
 800b8f8:	bf38      	it	cc
 800b8fa:	2300      	movcc	r3, #0
 800b8fc:	4423      	add	r3, r4
 800b8fe:	e015      	b.n	800b92c <rshift+0x68>
 800b900:	46a1      	mov	r9, r4
 800b902:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b906:	f1c1 0820 	rsb	r8, r1, #32
 800b90a:	40cf      	lsrs	r7, r1
 800b90c:	f105 0e04 	add.w	lr, r5, #4
 800b910:	4576      	cmp	r6, lr
 800b912:	46f4      	mov	ip, lr
 800b914:	d816      	bhi.n	800b944 <rshift+0x80>
 800b916:	1a9a      	subs	r2, r3, r2
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	3a04      	subs	r2, #4
 800b91c:	3501      	adds	r5, #1
 800b91e:	42ae      	cmp	r6, r5
 800b920:	bf38      	it	cc
 800b922:	2200      	movcc	r2, #0
 800b924:	18a3      	adds	r3, r4, r2
 800b926:	50a7      	str	r7, [r4, r2]
 800b928:	b107      	cbz	r7, 800b92c <rshift+0x68>
 800b92a:	3304      	adds	r3, #4
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	eba3 0204 	sub.w	r2, r3, r4
 800b932:	bf08      	it	eq
 800b934:	2300      	moveq	r3, #0
 800b936:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b93a:	6102      	str	r2, [r0, #16]
 800b93c:	bf08      	it	eq
 800b93e:	6143      	streq	r3, [r0, #20]
 800b940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b944:	f8dc c000 	ldr.w	ip, [ip]
 800b948:	fa0c fc08 	lsl.w	ip, ip, r8
 800b94c:	ea4c 0707 	orr.w	r7, ip, r7
 800b950:	f849 7b04 	str.w	r7, [r9], #4
 800b954:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b958:	40cf      	lsrs	r7, r1
 800b95a:	e7d9      	b.n	800b910 <rshift+0x4c>
 800b95c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b960:	f847 cf04 	str.w	ip, [r7, #4]!
 800b964:	e7c2      	b.n	800b8ec <rshift+0x28>
 800b966:	4623      	mov	r3, r4
 800b968:	e7e0      	b.n	800b92c <rshift+0x68>

0800b96a <__hexdig_fun>:
 800b96a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b96e:	2b09      	cmp	r3, #9
 800b970:	d802      	bhi.n	800b978 <__hexdig_fun+0xe>
 800b972:	3820      	subs	r0, #32
 800b974:	b2c0      	uxtb	r0, r0
 800b976:	4770      	bx	lr
 800b978:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b97c:	2b05      	cmp	r3, #5
 800b97e:	d801      	bhi.n	800b984 <__hexdig_fun+0x1a>
 800b980:	3847      	subs	r0, #71	; 0x47
 800b982:	e7f7      	b.n	800b974 <__hexdig_fun+0xa>
 800b984:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b988:	2b05      	cmp	r3, #5
 800b98a:	d801      	bhi.n	800b990 <__hexdig_fun+0x26>
 800b98c:	3827      	subs	r0, #39	; 0x27
 800b98e:	e7f1      	b.n	800b974 <__hexdig_fun+0xa>
 800b990:	2000      	movs	r0, #0
 800b992:	4770      	bx	lr

0800b994 <__gethex>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4681      	mov	r9, r0
 800b99a:	468a      	mov	sl, r1
 800b99c:	4617      	mov	r7, r2
 800b99e:	680a      	ldr	r2, [r1, #0]
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	f102 0b02 	add.w	fp, r2, #2
 800b9a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b9aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b9ae:	9302      	str	r3, [sp, #8]
 800b9b0:	32fe      	adds	r2, #254	; 0xfe
 800b9b2:	eb02 030b 	add.w	r3, r2, fp
 800b9b6:	46d8      	mov	r8, fp
 800b9b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	2830      	cmp	r0, #48	; 0x30
 800b9c0:	d0f7      	beq.n	800b9b2 <__gethex+0x1e>
 800b9c2:	f7ff ffd2 	bl	800b96a <__hexdig_fun>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d138      	bne.n	800ba3e <__gethex+0xaa>
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	49a7      	ldr	r1, [pc, #668]	; (800bc70 <__gethex+0x2dc>)
 800b9d2:	f7ff ff0f 	bl	800b7f4 <strncmp>
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d169      	bne.n	800bab0 <__gethex+0x11c>
 800b9dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b9e0:	465d      	mov	r5, fp
 800b9e2:	f7ff ffc2 	bl	800b96a <__hexdig_fun>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d064      	beq.n	800bab4 <__gethex+0x120>
 800b9ea:	465a      	mov	r2, fp
 800b9ec:	7810      	ldrb	r0, [r2, #0]
 800b9ee:	4690      	mov	r8, r2
 800b9f0:	2830      	cmp	r0, #48	; 0x30
 800b9f2:	f102 0201 	add.w	r2, r2, #1
 800b9f6:	d0f9      	beq.n	800b9ec <__gethex+0x58>
 800b9f8:	f7ff ffb7 	bl	800b96a <__hexdig_fun>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	fab0 f480 	clz	r4, r0
 800ba02:	465e      	mov	r6, fp
 800ba04:	0964      	lsrs	r4, r4, #5
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	4642      	mov	r2, r8
 800ba0a:	4615      	mov	r5, r2
 800ba0c:	7828      	ldrb	r0, [r5, #0]
 800ba0e:	3201      	adds	r2, #1
 800ba10:	f7ff ffab 	bl	800b96a <__hexdig_fun>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1f8      	bne.n	800ba0a <__gethex+0x76>
 800ba18:	2201      	movs	r2, #1
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	4994      	ldr	r1, [pc, #592]	; (800bc70 <__gethex+0x2dc>)
 800ba1e:	f7ff fee9 	bl	800b7f4 <strncmp>
 800ba22:	b978      	cbnz	r0, 800ba44 <__gethex+0xb0>
 800ba24:	b946      	cbnz	r6, 800ba38 <__gethex+0xa4>
 800ba26:	1c6e      	adds	r6, r5, #1
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4615      	mov	r5, r2
 800ba2c:	7828      	ldrb	r0, [r5, #0]
 800ba2e:	3201      	adds	r2, #1
 800ba30:	f7ff ff9b 	bl	800b96a <__hexdig_fun>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1f8      	bne.n	800ba2a <__gethex+0x96>
 800ba38:	1b73      	subs	r3, r6, r5
 800ba3a:	009e      	lsls	r6, r3, #2
 800ba3c:	e004      	b.n	800ba48 <__gethex+0xb4>
 800ba3e:	2400      	movs	r4, #0
 800ba40:	4626      	mov	r6, r4
 800ba42:	e7e1      	b.n	800ba08 <__gethex+0x74>
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	d1f7      	bne.n	800ba38 <__gethex+0xa4>
 800ba48:	782b      	ldrb	r3, [r5, #0]
 800ba4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba4e:	2b50      	cmp	r3, #80	; 0x50
 800ba50:	d13d      	bne.n	800bace <__gethex+0x13a>
 800ba52:	786b      	ldrb	r3, [r5, #1]
 800ba54:	2b2b      	cmp	r3, #43	; 0x2b
 800ba56:	d02f      	beq.n	800bab8 <__gethex+0x124>
 800ba58:	2b2d      	cmp	r3, #45	; 0x2d
 800ba5a:	d031      	beq.n	800bac0 <__gethex+0x12c>
 800ba5c:	f04f 0b00 	mov.w	fp, #0
 800ba60:	1c69      	adds	r1, r5, #1
 800ba62:	7808      	ldrb	r0, [r1, #0]
 800ba64:	f7ff ff81 	bl	800b96a <__hexdig_fun>
 800ba68:	1e42      	subs	r2, r0, #1
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	2a18      	cmp	r2, #24
 800ba6e:	d82e      	bhi.n	800bace <__gethex+0x13a>
 800ba70:	f1a0 0210 	sub.w	r2, r0, #16
 800ba74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba78:	f7ff ff77 	bl	800b96a <__hexdig_fun>
 800ba7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba80:	fa5f fc8c 	uxtb.w	ip, ip
 800ba84:	f1bc 0f18 	cmp.w	ip, #24
 800ba88:	d91d      	bls.n	800bac6 <__gethex+0x132>
 800ba8a:	f1bb 0f00 	cmp.w	fp, #0
 800ba8e:	d000      	beq.n	800ba92 <__gethex+0xfe>
 800ba90:	4252      	negs	r2, r2
 800ba92:	4416      	add	r6, r2
 800ba94:	f8ca 1000 	str.w	r1, [sl]
 800ba98:	b1dc      	cbz	r4, 800bad2 <__gethex+0x13e>
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	f04f 0800 	movne.w	r8, #0
 800baa4:	f04f 0806 	moveq.w	r8, #6
 800baa8:	4640      	mov	r0, r8
 800baaa:	b005      	add	sp, #20
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	4645      	mov	r5, r8
 800bab2:	4626      	mov	r6, r4
 800bab4:	2401      	movs	r4, #1
 800bab6:	e7c7      	b.n	800ba48 <__gethex+0xb4>
 800bab8:	f04f 0b00 	mov.w	fp, #0
 800babc:	1ca9      	adds	r1, r5, #2
 800babe:	e7d0      	b.n	800ba62 <__gethex+0xce>
 800bac0:	f04f 0b01 	mov.w	fp, #1
 800bac4:	e7fa      	b.n	800babc <__gethex+0x128>
 800bac6:	230a      	movs	r3, #10
 800bac8:	fb03 0002 	mla	r0, r3, r2, r0
 800bacc:	e7d0      	b.n	800ba70 <__gethex+0xdc>
 800bace:	4629      	mov	r1, r5
 800bad0:	e7e0      	b.n	800ba94 <__gethex+0x100>
 800bad2:	4621      	mov	r1, r4
 800bad4:	eba5 0308 	sub.w	r3, r5, r8
 800bad8:	3b01      	subs	r3, #1
 800bada:	2b07      	cmp	r3, #7
 800badc:	dc0a      	bgt.n	800baf4 <__gethex+0x160>
 800bade:	4648      	mov	r0, r9
 800bae0:	f7fd ff5a 	bl	8009998 <_Balloc>
 800bae4:	4604      	mov	r4, r0
 800bae6:	b940      	cbnz	r0, 800bafa <__gethex+0x166>
 800bae8:	4602      	mov	r2, r0
 800baea:	21e4      	movs	r1, #228	; 0xe4
 800baec:	4b61      	ldr	r3, [pc, #388]	; (800bc74 <__gethex+0x2e0>)
 800baee:	4862      	ldr	r0, [pc, #392]	; (800bc78 <__gethex+0x2e4>)
 800baf0:	f7ff feb6 	bl	800b860 <__assert_func>
 800baf4:	3101      	adds	r1, #1
 800baf6:	105b      	asrs	r3, r3, #1
 800baf8:	e7ef      	b.n	800bada <__gethex+0x146>
 800bafa:	2300      	movs	r3, #0
 800bafc:	469b      	mov	fp, r3
 800bafe:	f100 0a14 	add.w	sl, r0, #20
 800bb02:	f8cd a004 	str.w	sl, [sp, #4]
 800bb06:	45a8      	cmp	r8, r5
 800bb08:	d344      	bcc.n	800bb94 <__gethex+0x200>
 800bb0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb0e:	4658      	mov	r0, fp
 800bb10:	f848 bb04 	str.w	fp, [r8], #4
 800bb14:	eba8 080a 	sub.w	r8, r8, sl
 800bb18:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800bb1c:	6122      	str	r2, [r4, #16]
 800bb1e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800bb22:	f7fe f82b 	bl	8009b7c <__hi0bits>
 800bb26:	683d      	ldr	r5, [r7, #0]
 800bb28:	eba8 0800 	sub.w	r8, r8, r0
 800bb2c:	45a8      	cmp	r8, r5
 800bb2e:	dd59      	ble.n	800bbe4 <__gethex+0x250>
 800bb30:	eba8 0805 	sub.w	r8, r8, r5
 800bb34:	4641      	mov	r1, r8
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7fe fba9 	bl	800a28e <__any_on>
 800bb3c:	4683      	mov	fp, r0
 800bb3e:	b1b8      	cbz	r0, 800bb70 <__gethex+0x1dc>
 800bb40:	f04f 0b01 	mov.w	fp, #1
 800bb44:	f108 33ff 	add.w	r3, r8, #4294967295
 800bb48:	1159      	asrs	r1, r3, #5
 800bb4a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb4e:	f003 021f 	and.w	r2, r3, #31
 800bb52:	fa0b f202 	lsl.w	r2, fp, r2
 800bb56:	420a      	tst	r2, r1
 800bb58:	d00a      	beq.n	800bb70 <__gethex+0x1dc>
 800bb5a:	455b      	cmp	r3, fp
 800bb5c:	dd06      	ble.n	800bb6c <__gethex+0x1d8>
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f1a8 0102 	sub.w	r1, r8, #2
 800bb64:	f7fe fb93 	bl	800a28e <__any_on>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d138      	bne.n	800bbde <__gethex+0x24a>
 800bb6c:	f04f 0b02 	mov.w	fp, #2
 800bb70:	4641      	mov	r1, r8
 800bb72:	4620      	mov	r0, r4
 800bb74:	f7ff fea6 	bl	800b8c4 <rshift>
 800bb78:	4446      	add	r6, r8
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	42b3      	cmp	r3, r6
 800bb7e:	da41      	bge.n	800bc04 <__gethex+0x270>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4648      	mov	r0, r9
 800bb84:	f7fd ff48 	bl	8009a18 <_Bfree>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	e789      	b.n	800baa8 <__gethex+0x114>
 800bb94:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb98:	2a2e      	cmp	r2, #46	; 0x2e
 800bb9a:	d014      	beq.n	800bbc6 <__gethex+0x232>
 800bb9c:	2b20      	cmp	r3, #32
 800bb9e:	d106      	bne.n	800bbae <__gethex+0x21a>
 800bba0:	9b01      	ldr	r3, [sp, #4]
 800bba2:	f843 bb04 	str.w	fp, [r3], #4
 800bba6:	f04f 0b00 	mov.w	fp, #0
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	465b      	mov	r3, fp
 800bbae:	7828      	ldrb	r0, [r5, #0]
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	f7ff feda 	bl	800b96a <__hexdig_fun>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	f000 000f 	and.w	r0, r0, #15
 800bbbc:	4098      	lsls	r0, r3
 800bbbe:	ea4b 0b00 	orr.w	fp, fp, r0
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	e79f      	b.n	800bb06 <__gethex+0x172>
 800bbc6:	45a8      	cmp	r8, r5
 800bbc8:	d8e8      	bhi.n	800bb9c <__gethex+0x208>
 800bbca:	2201      	movs	r2, #1
 800bbcc:	4628      	mov	r0, r5
 800bbce:	4928      	ldr	r1, [pc, #160]	; (800bc70 <__gethex+0x2dc>)
 800bbd0:	9303      	str	r3, [sp, #12]
 800bbd2:	f7ff fe0f 	bl	800b7f4 <strncmp>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1df      	bne.n	800bb9c <__gethex+0x208>
 800bbdc:	e793      	b.n	800bb06 <__gethex+0x172>
 800bbde:	f04f 0b03 	mov.w	fp, #3
 800bbe2:	e7c5      	b.n	800bb70 <__gethex+0x1dc>
 800bbe4:	da0b      	bge.n	800bbfe <__gethex+0x26a>
 800bbe6:	eba5 0808 	sub.w	r8, r5, r8
 800bbea:	4621      	mov	r1, r4
 800bbec:	4642      	mov	r2, r8
 800bbee:	4648      	mov	r0, r9
 800bbf0:	f7fe f92a 	bl	8009e48 <__lshift>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	eba6 0608 	sub.w	r6, r6, r8
 800bbfa:	f100 0a14 	add.w	sl, r0, #20
 800bbfe:	f04f 0b00 	mov.w	fp, #0
 800bc02:	e7ba      	b.n	800bb7a <__gethex+0x1e6>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	42b3      	cmp	r3, r6
 800bc08:	dd74      	ble.n	800bcf4 <__gethex+0x360>
 800bc0a:	1b9e      	subs	r6, r3, r6
 800bc0c:	42b5      	cmp	r5, r6
 800bc0e:	dc35      	bgt.n	800bc7c <__gethex+0x2e8>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d023      	beq.n	800bc5e <__gethex+0x2ca>
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d025      	beq.n	800bc66 <__gethex+0x2d2>
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d115      	bne.n	800bc4a <__gethex+0x2b6>
 800bc1e:	42b5      	cmp	r5, r6
 800bc20:	d113      	bne.n	800bc4a <__gethex+0x2b6>
 800bc22:	2d01      	cmp	r5, #1
 800bc24:	d10b      	bne.n	800bc3e <__gethex+0x2aa>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	9a02      	ldr	r2, [sp, #8]
 800bc2a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	2301      	movs	r3, #1
 800bc32:	6123      	str	r3, [r4, #16]
 800bc34:	f8ca 3000 	str.w	r3, [sl]
 800bc38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc3a:	601c      	str	r4, [r3, #0]
 800bc3c:	e734      	b.n	800baa8 <__gethex+0x114>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	1e69      	subs	r1, r5, #1
 800bc42:	f7fe fb24 	bl	800a28e <__any_on>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d1ed      	bne.n	800bc26 <__gethex+0x292>
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f7fd fee3 	bl	8009a18 <_Bfree>
 800bc52:	2300      	movs	r3, #0
 800bc54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc56:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	e724      	b.n	800baa8 <__gethex+0x114>
 800bc5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1f2      	bne.n	800bc4a <__gethex+0x2b6>
 800bc64:	e7df      	b.n	800bc26 <__gethex+0x292>
 800bc66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1dc      	bne.n	800bc26 <__gethex+0x292>
 800bc6c:	e7ed      	b.n	800bc4a <__gethex+0x2b6>
 800bc6e:	bf00      	nop
 800bc70:	0800c624 	.word	0x0800c624
 800bc74:	0800c4bb 	.word	0x0800c4bb
 800bc78:	0800c7ce 	.word	0x0800c7ce
 800bc7c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bc80:	f1bb 0f00 	cmp.w	fp, #0
 800bc84:	d133      	bne.n	800bcee <__gethex+0x35a>
 800bc86:	f1b8 0f00 	cmp.w	r8, #0
 800bc8a:	d004      	beq.n	800bc96 <__gethex+0x302>
 800bc8c:	4641      	mov	r1, r8
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f7fe fafd 	bl	800a28e <__any_on>
 800bc94:	4683      	mov	fp, r0
 800bc96:	2301      	movs	r3, #1
 800bc98:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc9c:	f008 081f 	and.w	r8, r8, #31
 800bca0:	fa03 f308 	lsl.w	r3, r3, r8
 800bca4:	f04f 0802 	mov.w	r8, #2
 800bca8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bcac:	4631      	mov	r1, r6
 800bcae:	4213      	tst	r3, r2
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	bf18      	it	ne
 800bcb4:	f04b 0b02 	orrne.w	fp, fp, #2
 800bcb8:	1bad      	subs	r5, r5, r6
 800bcba:	f7ff fe03 	bl	800b8c4 <rshift>
 800bcbe:	687e      	ldr	r6, [r7, #4]
 800bcc0:	f1bb 0f00 	cmp.w	fp, #0
 800bcc4:	d04a      	beq.n	800bd5c <__gethex+0x3c8>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d016      	beq.n	800bcfa <__gethex+0x366>
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d018      	beq.n	800bd02 <__gethex+0x36e>
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d109      	bne.n	800bce8 <__gethex+0x354>
 800bcd4:	f01b 0f02 	tst.w	fp, #2
 800bcd8:	d006      	beq.n	800bce8 <__gethex+0x354>
 800bcda:	f8da 3000 	ldr.w	r3, [sl]
 800bcde:	ea4b 0b03 	orr.w	fp, fp, r3
 800bce2:	f01b 0f01 	tst.w	fp, #1
 800bce6:	d10f      	bne.n	800bd08 <__gethex+0x374>
 800bce8:	f048 0810 	orr.w	r8, r8, #16
 800bcec:	e036      	b.n	800bd5c <__gethex+0x3c8>
 800bcee:	f04f 0b01 	mov.w	fp, #1
 800bcf2:	e7d0      	b.n	800bc96 <__gethex+0x302>
 800bcf4:	f04f 0801 	mov.w	r8, #1
 800bcf8:	e7e2      	b.n	800bcc0 <__gethex+0x32c>
 800bcfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcfc:	f1c3 0301 	rsb	r3, r3, #1
 800bd00:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0ef      	beq.n	800bce8 <__gethex+0x354>
 800bd08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd0c:	f104 0214 	add.w	r2, r4, #20
 800bd10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	2300      	movs	r3, #0
 800bd18:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bd1c:	4694      	mov	ip, r2
 800bd1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bd22:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bd26:	d01e      	beq.n	800bd66 <__gethex+0x3d2>
 800bd28:	3101      	adds	r1, #1
 800bd2a:	f8cc 1000 	str.w	r1, [ip]
 800bd2e:	f1b8 0f02 	cmp.w	r8, #2
 800bd32:	f104 0214 	add.w	r2, r4, #20
 800bd36:	d13d      	bne.n	800bdb4 <__gethex+0x420>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	42ab      	cmp	r3, r5
 800bd3e:	d10b      	bne.n	800bd58 <__gethex+0x3c4>
 800bd40:	2301      	movs	r3, #1
 800bd42:	1169      	asrs	r1, r5, #5
 800bd44:	f005 051f 	and.w	r5, r5, #31
 800bd48:	fa03 f505 	lsl.w	r5, r3, r5
 800bd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd50:	421d      	tst	r5, r3
 800bd52:	bf18      	it	ne
 800bd54:	f04f 0801 	movne.w	r8, #1
 800bd58:	f048 0820 	orr.w	r8, r8, #32
 800bd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd5e:	601c      	str	r4, [r3, #0]
 800bd60:	9b02      	ldr	r3, [sp, #8]
 800bd62:	601e      	str	r6, [r3, #0]
 800bd64:	e6a0      	b.n	800baa8 <__gethex+0x114>
 800bd66:	4290      	cmp	r0, r2
 800bd68:	f842 3c04 	str.w	r3, [r2, #-4]
 800bd6c:	d8d6      	bhi.n	800bd1c <__gethex+0x388>
 800bd6e:	68a2      	ldr	r2, [r4, #8]
 800bd70:	4593      	cmp	fp, r2
 800bd72:	db17      	blt.n	800bda4 <__gethex+0x410>
 800bd74:	6861      	ldr	r1, [r4, #4]
 800bd76:	4648      	mov	r0, r9
 800bd78:	3101      	adds	r1, #1
 800bd7a:	f7fd fe0d 	bl	8009998 <_Balloc>
 800bd7e:	4682      	mov	sl, r0
 800bd80:	b918      	cbnz	r0, 800bd8a <__gethex+0x3f6>
 800bd82:	4602      	mov	r2, r0
 800bd84:	2184      	movs	r1, #132	; 0x84
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <__gethex+0x45c>)
 800bd88:	e6b1      	b.n	800baee <__gethex+0x15a>
 800bd8a:	6922      	ldr	r2, [r4, #16]
 800bd8c:	f104 010c 	add.w	r1, r4, #12
 800bd90:	3202      	adds	r2, #2
 800bd92:	0092      	lsls	r2, r2, #2
 800bd94:	300c      	adds	r0, #12
 800bd96:	f7ff fd4f 	bl	800b838 <memcpy>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4648      	mov	r0, r9
 800bd9e:	f7fd fe3b 	bl	8009a18 <_Bfree>
 800bda2:	4654      	mov	r4, sl
 800bda4:	6922      	ldr	r2, [r4, #16]
 800bda6:	1c51      	adds	r1, r2, #1
 800bda8:	6121      	str	r1, [r4, #16]
 800bdaa:	2101      	movs	r1, #1
 800bdac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bdb0:	6151      	str	r1, [r2, #20]
 800bdb2:	e7bc      	b.n	800bd2e <__gethex+0x39a>
 800bdb4:	6921      	ldr	r1, [r4, #16]
 800bdb6:	4559      	cmp	r1, fp
 800bdb8:	dd0b      	ble.n	800bdd2 <__gethex+0x43e>
 800bdba:	2101      	movs	r1, #1
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7ff fd81 	bl	800b8c4 <rshift>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3601      	adds	r6, #1
 800bdc6:	42b3      	cmp	r3, r6
 800bdc8:	f6ff aeda 	blt.w	800bb80 <__gethex+0x1ec>
 800bdcc:	f04f 0801 	mov.w	r8, #1
 800bdd0:	e7c2      	b.n	800bd58 <__gethex+0x3c4>
 800bdd2:	f015 051f 	ands.w	r5, r5, #31
 800bdd6:	d0f9      	beq.n	800bdcc <__gethex+0x438>
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	f1c5 0520 	rsb	r5, r5, #32
 800bdde:	441a      	add	r2, r3
 800bde0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bde4:	f7fd feca 	bl	8009b7c <__hi0bits>
 800bde8:	42a8      	cmp	r0, r5
 800bdea:	dbe6      	blt.n	800bdba <__gethex+0x426>
 800bdec:	e7ee      	b.n	800bdcc <__gethex+0x438>
 800bdee:	bf00      	nop
 800bdf0:	0800c4bb 	.word	0x0800c4bb

0800bdf4 <L_shift>:
 800bdf4:	f1c2 0208 	rsb	r2, r2, #8
 800bdf8:	0092      	lsls	r2, r2, #2
 800bdfa:	b570      	push	{r4, r5, r6, lr}
 800bdfc:	f1c2 0620 	rsb	r6, r2, #32
 800be00:	6843      	ldr	r3, [r0, #4]
 800be02:	6804      	ldr	r4, [r0, #0]
 800be04:	fa03 f506 	lsl.w	r5, r3, r6
 800be08:	432c      	orrs	r4, r5
 800be0a:	40d3      	lsrs	r3, r2
 800be0c:	6004      	str	r4, [r0, #0]
 800be0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be12:	4288      	cmp	r0, r1
 800be14:	d3f4      	bcc.n	800be00 <L_shift+0xc>
 800be16:	bd70      	pop	{r4, r5, r6, pc}

0800be18 <__match>:
 800be18:	b530      	push	{r4, r5, lr}
 800be1a:	6803      	ldr	r3, [r0, #0]
 800be1c:	3301      	adds	r3, #1
 800be1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be22:	b914      	cbnz	r4, 800be2a <__match+0x12>
 800be24:	6003      	str	r3, [r0, #0]
 800be26:	2001      	movs	r0, #1
 800be28:	bd30      	pop	{r4, r5, pc}
 800be2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be32:	2d19      	cmp	r5, #25
 800be34:	bf98      	it	ls
 800be36:	3220      	addls	r2, #32
 800be38:	42a2      	cmp	r2, r4
 800be3a:	d0f0      	beq.n	800be1e <__match+0x6>
 800be3c:	2000      	movs	r0, #0
 800be3e:	e7f3      	b.n	800be28 <__match+0x10>

0800be40 <__hexnan>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	2500      	movs	r5, #0
 800be46:	680b      	ldr	r3, [r1, #0]
 800be48:	4682      	mov	sl, r0
 800be4a:	115e      	asrs	r6, r3, #5
 800be4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be50:	f013 031f 	ands.w	r3, r3, #31
 800be54:	bf18      	it	ne
 800be56:	3604      	addne	r6, #4
 800be58:	1f37      	subs	r7, r6, #4
 800be5a:	4690      	mov	r8, r2
 800be5c:	46b9      	mov	r9, r7
 800be5e:	463c      	mov	r4, r7
 800be60:	46ab      	mov	fp, r5
 800be62:	b087      	sub	sp, #28
 800be64:	6801      	ldr	r1, [r0, #0]
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	f846 5c04 	str.w	r5, [r6, #-4]
 800be6c:	9502      	str	r5, [sp, #8]
 800be6e:	784a      	ldrb	r2, [r1, #1]
 800be70:	1c4b      	adds	r3, r1, #1
 800be72:	9303      	str	r3, [sp, #12]
 800be74:	b342      	cbz	r2, 800bec8 <__hexnan+0x88>
 800be76:	4610      	mov	r0, r2
 800be78:	9105      	str	r1, [sp, #20]
 800be7a:	9204      	str	r2, [sp, #16]
 800be7c:	f7ff fd75 	bl	800b96a <__hexdig_fun>
 800be80:	2800      	cmp	r0, #0
 800be82:	d14f      	bne.n	800bf24 <__hexnan+0xe4>
 800be84:	9a04      	ldr	r2, [sp, #16]
 800be86:	9905      	ldr	r1, [sp, #20]
 800be88:	2a20      	cmp	r2, #32
 800be8a:	d818      	bhi.n	800bebe <__hexnan+0x7e>
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	459b      	cmp	fp, r3
 800be90:	dd13      	ble.n	800beba <__hexnan+0x7a>
 800be92:	454c      	cmp	r4, r9
 800be94:	d206      	bcs.n	800bea4 <__hexnan+0x64>
 800be96:	2d07      	cmp	r5, #7
 800be98:	dc04      	bgt.n	800bea4 <__hexnan+0x64>
 800be9a:	462a      	mov	r2, r5
 800be9c:	4649      	mov	r1, r9
 800be9e:	4620      	mov	r0, r4
 800bea0:	f7ff ffa8 	bl	800bdf4 <L_shift>
 800bea4:	4544      	cmp	r4, r8
 800bea6:	d950      	bls.n	800bf4a <__hexnan+0x10a>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f1a4 0904 	sub.w	r9, r4, #4
 800beae:	f844 3c04 	str.w	r3, [r4, #-4]
 800beb2:	461d      	mov	r5, r3
 800beb4:	464c      	mov	r4, r9
 800beb6:	f8cd b008 	str.w	fp, [sp, #8]
 800beba:	9903      	ldr	r1, [sp, #12]
 800bebc:	e7d7      	b.n	800be6e <__hexnan+0x2e>
 800bebe:	2a29      	cmp	r2, #41	; 0x29
 800bec0:	d155      	bne.n	800bf6e <__hexnan+0x12e>
 800bec2:	3102      	adds	r1, #2
 800bec4:	f8ca 1000 	str.w	r1, [sl]
 800bec8:	f1bb 0f00 	cmp.w	fp, #0
 800becc:	d04f      	beq.n	800bf6e <__hexnan+0x12e>
 800bece:	454c      	cmp	r4, r9
 800bed0:	d206      	bcs.n	800bee0 <__hexnan+0xa0>
 800bed2:	2d07      	cmp	r5, #7
 800bed4:	dc04      	bgt.n	800bee0 <__hexnan+0xa0>
 800bed6:	462a      	mov	r2, r5
 800bed8:	4649      	mov	r1, r9
 800beda:	4620      	mov	r0, r4
 800bedc:	f7ff ff8a 	bl	800bdf4 <L_shift>
 800bee0:	4544      	cmp	r4, r8
 800bee2:	d934      	bls.n	800bf4e <__hexnan+0x10e>
 800bee4:	4623      	mov	r3, r4
 800bee6:	f1a8 0204 	sub.w	r2, r8, #4
 800beea:	f853 1b04 	ldr.w	r1, [r3], #4
 800beee:	429f      	cmp	r7, r3
 800bef0:	f842 1f04 	str.w	r1, [r2, #4]!
 800bef4:	d2f9      	bcs.n	800beea <__hexnan+0xaa>
 800bef6:	1b3b      	subs	r3, r7, r4
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	3304      	adds	r3, #4
 800befe:	3e03      	subs	r6, #3
 800bf00:	3401      	adds	r4, #1
 800bf02:	42a6      	cmp	r6, r4
 800bf04:	bf38      	it	cc
 800bf06:	2304      	movcc	r3, #4
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4443      	add	r3, r8
 800bf0c:	f843 2b04 	str.w	r2, [r3], #4
 800bf10:	429f      	cmp	r7, r3
 800bf12:	d2fb      	bcs.n	800bf0c <__hexnan+0xcc>
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	b91b      	cbnz	r3, 800bf20 <__hexnan+0xe0>
 800bf18:	4547      	cmp	r7, r8
 800bf1a:	d126      	bne.n	800bf6a <__hexnan+0x12a>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	2005      	movs	r0, #5
 800bf22:	e025      	b.n	800bf70 <__hexnan+0x130>
 800bf24:	3501      	adds	r5, #1
 800bf26:	2d08      	cmp	r5, #8
 800bf28:	f10b 0b01 	add.w	fp, fp, #1
 800bf2c:	dd06      	ble.n	800bf3c <__hexnan+0xfc>
 800bf2e:	4544      	cmp	r4, r8
 800bf30:	d9c3      	bls.n	800beba <__hexnan+0x7a>
 800bf32:	2300      	movs	r3, #0
 800bf34:	2501      	movs	r5, #1
 800bf36:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf3a:	3c04      	subs	r4, #4
 800bf3c:	6822      	ldr	r2, [r4, #0]
 800bf3e:	f000 000f 	and.w	r0, r0, #15
 800bf42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf46:	6020      	str	r0, [r4, #0]
 800bf48:	e7b7      	b.n	800beba <__hexnan+0x7a>
 800bf4a:	2508      	movs	r5, #8
 800bf4c:	e7b5      	b.n	800beba <__hexnan+0x7a>
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d0df      	beq.n	800bf14 <__hexnan+0xd4>
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295
 800bf58:	f1c3 0320 	rsb	r3, r3, #32
 800bf5c:	40da      	lsrs	r2, r3
 800bf5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf62:	4013      	ands	r3, r2
 800bf64:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf68:	e7d4      	b.n	800bf14 <__hexnan+0xd4>
 800bf6a:	3f04      	subs	r7, #4
 800bf6c:	e7d2      	b.n	800bf14 <__hexnan+0xd4>
 800bf6e:	2004      	movs	r0, #4
 800bf70:	b007      	add	sp, #28
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf76 <__ascii_mbtowc>:
 800bf76:	b082      	sub	sp, #8
 800bf78:	b901      	cbnz	r1, 800bf7c <__ascii_mbtowc+0x6>
 800bf7a:	a901      	add	r1, sp, #4
 800bf7c:	b142      	cbz	r2, 800bf90 <__ascii_mbtowc+0x1a>
 800bf7e:	b14b      	cbz	r3, 800bf94 <__ascii_mbtowc+0x1e>
 800bf80:	7813      	ldrb	r3, [r2, #0]
 800bf82:	600b      	str	r3, [r1, #0]
 800bf84:	7812      	ldrb	r2, [r2, #0]
 800bf86:	1e10      	subs	r0, r2, #0
 800bf88:	bf18      	it	ne
 800bf8a:	2001      	movne	r0, #1
 800bf8c:	b002      	add	sp, #8
 800bf8e:	4770      	bx	lr
 800bf90:	4610      	mov	r0, r2
 800bf92:	e7fb      	b.n	800bf8c <__ascii_mbtowc+0x16>
 800bf94:	f06f 0001 	mvn.w	r0, #1
 800bf98:	e7f8      	b.n	800bf8c <__ascii_mbtowc+0x16>

0800bf9a <_realloc_r>:
 800bf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4614      	mov	r4, r2
 800bfa2:	460e      	mov	r6, r1
 800bfa4:	b921      	cbnz	r1, 800bfb0 <_realloc_r+0x16>
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfac:	f7fd bc68 	b.w	8009880 <_malloc_r>
 800bfb0:	b92a      	cbnz	r2, 800bfbe <_realloc_r+0x24>
 800bfb2:	f7fd fbf5 	bl	80097a0 <_free_r>
 800bfb6:	4625      	mov	r5, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfbe:	f000 f8c6 	bl	800c14e <_malloc_usable_size_r>
 800bfc2:	4284      	cmp	r4, r0
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	d802      	bhi.n	800bfce <_realloc_r+0x34>
 800bfc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfcc:	d812      	bhi.n	800bff4 <_realloc_r+0x5a>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	f7fd fc55 	bl	8009880 <_malloc_r>
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0ed      	beq.n	800bfb8 <_realloc_r+0x1e>
 800bfdc:	42bc      	cmp	r4, r7
 800bfde:	4622      	mov	r2, r4
 800bfe0:	4631      	mov	r1, r6
 800bfe2:	bf28      	it	cs
 800bfe4:	463a      	movcs	r2, r7
 800bfe6:	f7ff fc27 	bl	800b838 <memcpy>
 800bfea:	4631      	mov	r1, r6
 800bfec:	4640      	mov	r0, r8
 800bfee:	f7fd fbd7 	bl	80097a0 <_free_r>
 800bff2:	e7e1      	b.n	800bfb8 <_realloc_r+0x1e>
 800bff4:	4635      	mov	r5, r6
 800bff6:	e7df      	b.n	800bfb8 <_realloc_r+0x1e>

0800bff8 <__ascii_wctomb>:
 800bff8:	4603      	mov	r3, r0
 800bffa:	4608      	mov	r0, r1
 800bffc:	b141      	cbz	r1, 800c010 <__ascii_wctomb+0x18>
 800bffe:	2aff      	cmp	r2, #255	; 0xff
 800c000:	d904      	bls.n	800c00c <__ascii_wctomb+0x14>
 800c002:	228a      	movs	r2, #138	; 0x8a
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	4770      	bx	lr
 800c00c:	2001      	movs	r0, #1
 800c00e:	700a      	strb	r2, [r1, #0]
 800c010:	4770      	bx	lr
	...

0800c014 <fiprintf>:
 800c014:	b40e      	push	{r1, r2, r3}
 800c016:	b503      	push	{r0, r1, lr}
 800c018:	4601      	mov	r1, r0
 800c01a:	ab03      	add	r3, sp, #12
 800c01c:	4805      	ldr	r0, [pc, #20]	; (800c034 <fiprintf+0x20>)
 800c01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c022:	6800      	ldr	r0, [r0, #0]
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	f7ff f971 	bl	800b30c <_vfiprintf_r>
 800c02a:	b002      	add	sp, #8
 800c02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c030:	b003      	add	sp, #12
 800c032:	4770      	bx	lr
 800c034:	20000080 	.word	0x20000080

0800c038 <__swhatbuf_r>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	460c      	mov	r4, r1
 800c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c040:	4615      	mov	r5, r2
 800c042:	2900      	cmp	r1, #0
 800c044:	461e      	mov	r6, r3
 800c046:	b096      	sub	sp, #88	; 0x58
 800c048:	da0c      	bge.n	800c064 <__swhatbuf_r+0x2c>
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	2100      	movs	r1, #0
 800c04e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c052:	bf0c      	ite	eq
 800c054:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c058:	2340      	movne	r3, #64	; 0x40
 800c05a:	2000      	movs	r0, #0
 800c05c:	6031      	str	r1, [r6, #0]
 800c05e:	602b      	str	r3, [r5, #0]
 800c060:	b016      	add	sp, #88	; 0x58
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	466a      	mov	r2, sp
 800c066:	f000 f849 	bl	800c0fc <_fstat_r>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	dbed      	blt.n	800c04a <__swhatbuf_r+0x12>
 800c06e:	9901      	ldr	r1, [sp, #4]
 800c070:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c074:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c078:	4259      	negs	r1, r3
 800c07a:	4159      	adcs	r1, r3
 800c07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c080:	e7eb      	b.n	800c05a <__swhatbuf_r+0x22>

0800c082 <__smakebuf_r>:
 800c082:	898b      	ldrh	r3, [r1, #12]
 800c084:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c086:	079d      	lsls	r5, r3, #30
 800c088:	4606      	mov	r6, r0
 800c08a:	460c      	mov	r4, r1
 800c08c:	d507      	bpl.n	800c09e <__smakebuf_r+0x1c>
 800c08e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	2301      	movs	r3, #1
 800c098:	6163      	str	r3, [r4, #20]
 800c09a:	b002      	add	sp, #8
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
 800c09e:	466a      	mov	r2, sp
 800c0a0:	ab01      	add	r3, sp, #4
 800c0a2:	f7ff ffc9 	bl	800c038 <__swhatbuf_r>
 800c0a6:	9900      	ldr	r1, [sp, #0]
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7fd fbe8 	bl	8009880 <_malloc_r>
 800c0b0:	b948      	cbnz	r0, 800c0c6 <__smakebuf_r+0x44>
 800c0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b6:	059a      	lsls	r2, r3, #22
 800c0b8:	d4ef      	bmi.n	800c09a <__smakebuf_r+0x18>
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	f043 0302 	orr.w	r3, r3, #2
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	e7e3      	b.n	800c08e <__smakebuf_r+0xc>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	6020      	str	r0, [r4, #0]
 800c0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ce:	81a3      	strh	r3, [r4, #12]
 800c0d0:	9b00      	ldr	r3, [sp, #0]
 800c0d2:	6120      	str	r0, [r4, #16]
 800c0d4:	6163      	str	r3, [r4, #20]
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	b15b      	cbz	r3, 800c0f2 <__smakebuf_r+0x70>
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0e0:	f000 f81e 	bl	800c120 <_isatty_r>
 800c0e4:	b128      	cbz	r0, 800c0f2 <__smakebuf_r+0x70>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	f043 0301 	orr.w	r3, r3, #1
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	431d      	orrs	r5, r3
 800c0f6:	81a5      	strh	r5, [r4, #12]
 800c0f8:	e7cf      	b.n	800c09a <__smakebuf_r+0x18>
	...

0800c0fc <_fstat_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	2300      	movs	r3, #0
 800c100:	4d06      	ldr	r5, [pc, #24]	; (800c11c <_fstat_r+0x20>)
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	4611      	mov	r1, r2
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	f7f6 fbb4 	bl	8002876 <_fstat>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	d102      	bne.n	800c118 <_fstat_r+0x1c>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	b103      	cbz	r3, 800c118 <_fstat_r+0x1c>
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop
 800c11c:	20000718 	.word	0x20000718

0800c120 <_isatty_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	2300      	movs	r3, #0
 800c124:	4d05      	ldr	r5, [pc, #20]	; (800c13c <_isatty_r+0x1c>)
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	602b      	str	r3, [r5, #0]
 800c12c:	f7f6 fbb2 	bl	8002894 <_isatty>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_isatty_r+0x1a>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_isatty_r+0x1a>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20000718 	.word	0x20000718

0800c140 <abort>:
 800c140:	2006      	movs	r0, #6
 800c142:	b508      	push	{r3, lr}
 800c144:	f000 f834 	bl	800c1b0 <raise>
 800c148:	2001      	movs	r0, #1
 800c14a:	f7f6 fb46 	bl	80027da <_exit>

0800c14e <_malloc_usable_size_r>:
 800c14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c152:	1f18      	subs	r0, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	bfbc      	itt	lt
 800c158:	580b      	ldrlt	r3, [r1, r0]
 800c15a:	18c0      	addlt	r0, r0, r3
 800c15c:	4770      	bx	lr

0800c15e <_raise_r>:
 800c15e:	291f      	cmp	r1, #31
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	d904      	bls.n	800c172 <_raise_r+0x14>
 800c168:	2316      	movs	r3, #22
 800c16a:	6003      	str	r3, [r0, #0]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c174:	b112      	cbz	r2, 800c17c <_raise_r+0x1e>
 800c176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c17a:	b94b      	cbnz	r3, 800c190 <_raise_r+0x32>
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 f831 	bl	800c1e4 <_getpid_r>
 800c182:	462a      	mov	r2, r5
 800c184:	4601      	mov	r1, r0
 800c186:	4620      	mov	r0, r4
 800c188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c18c:	f000 b818 	b.w	800c1c0 <_kill_r>
 800c190:	2b01      	cmp	r3, #1
 800c192:	d00a      	beq.n	800c1aa <_raise_r+0x4c>
 800c194:	1c59      	adds	r1, r3, #1
 800c196:	d103      	bne.n	800c1a0 <_raise_r+0x42>
 800c198:	2316      	movs	r3, #22
 800c19a:	6003      	str	r3, [r0, #0]
 800c19c:	2001      	movs	r0, #1
 800c19e:	e7e7      	b.n	800c170 <_raise_r+0x12>
 800c1a0:	2400      	movs	r4, #0
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1a8:	4798      	blx	r3
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e7e0      	b.n	800c170 <_raise_r+0x12>
	...

0800c1b0 <raise>:
 800c1b0:	4b02      	ldr	r3, [pc, #8]	; (800c1bc <raise+0xc>)
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	f7ff bfd2 	b.w	800c15e <_raise_r>
 800c1ba:	bf00      	nop
 800c1bc:	20000080 	.word	0x20000080

0800c1c0 <_kill_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4d06      	ldr	r5, [pc, #24]	; (800c1e0 <_kill_r+0x20>)
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	602b      	str	r3, [r5, #0]
 800c1ce:	f7f6 faf4 	bl	80027ba <_kill>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	d102      	bne.n	800c1dc <_kill_r+0x1c>
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	b103      	cbz	r3, 800c1dc <_kill_r+0x1c>
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	bd38      	pop	{r3, r4, r5, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000718 	.word	0x20000718

0800c1e4 <_getpid_r>:
 800c1e4:	f7f6 bae2 	b.w	80027ac <_getpid>

0800c1e8 <_init>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	bf00      	nop
 800c1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ee:	bc08      	pop	{r3}
 800c1f0:	469e      	mov	lr, r3
 800c1f2:	4770      	bx	lr

0800c1f4 <_fini>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr
